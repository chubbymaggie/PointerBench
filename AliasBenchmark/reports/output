Buildfile: /Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/experiments.xml
settings:
compile:
runtests:
    [junit] Running tests.dart.BasicTest
    [junit] Tests run: 11, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 9,195 sec
    [junit] Output:
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.1 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.0 seconds.
    [junit] [Spark] Solution found in 0.0 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b", "{allocId:1, mayAlias:[a,b], notMayAlias:[], mustAlias:[a,b], notMustAlias:[]}") for variable b
    [junit] 	Allocation site $r0 = new benchmark.objects.A -> alias: [a, b], not alias: []
    [junit] =========RESULTS FOR  basic.SimpleAlias1========
    [junit] GT:2,[a, b]
    [junit] FN:0,[]
    [junit] FP:0,[]
    [junit] PTSGT:1
    [junit] REPORTED:1
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.0 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.0 seconds.
    [junit] [Spark] Solution found in 0.0 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("node", "{allocId:1, mayAlias:[node], notMayAlias:[i,o,p,q], mustAlias:[node], notMustAlias:[i,o,p,q]}") for variable node
    [junit] 	Allocation site $r0 = new basic.Loops1$N -> alias: [node], not alias: [o, p, q, i]
    [junit] =========RESULTS FOR  basic.Loops1========
    [junit] GT:1,[node]
    [junit] FN:0,[]
    [junit] FP:0,[]
    [junit] PTSGT:1
    [junit] REPORTED:1
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.0 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.0 seconds.
    [junit] [Spark] Solution found in 0.0 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b", "{allocId:1, mayAlias:[b,x], notMayAlias:[], mustAlias:[b,x], notMustAlias:[]}") for variable b
    [junit] 	Allocation site $r0 = new benchmark.objects.A -> alias: [b, x], not alias: []
    [junit] =========RESULTS FOR  basic.Parameter1========
    [junit] GT:2,[b, x]
    [junit] FN:0,[]
    [junit] FP:0,[]
    [junit] PTSGT:1
    [junit] REPORTED:1
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.0 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.0 seconds.
    [junit] [Spark] Solution found in 0.0 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b", "{allocId:1, mayAlias:[b,x], notMayAlias:[], mustAlias:[b,x], notMustAlias:[]}") for variable b
    [junit] 	Allocation site $r0 = new benchmark.objects.A -> alias: [x, b], not alias: []
    [junit] =========RESULTS FOR  basic.Parameter2========
    [junit] GT:2,[x, b]
    [junit] FN:0,[]
    [junit] FP:0,[]
    [junit] PTSGT:1
    [junit] REPORTED:1
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.0 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.0 seconds.
    [junit] [Spark] Solution found in 0.0 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b", "{allocId:1, mayAlias:[a,b], notMayAlias:[], mustAlias:[a,b], notMustAlias:[]}") for variable b
    [junit] 	Allocation site $r0 = new benchmark.objects.A -> alias: [a, b], not alias: []
    [junit] =========RESULTS FOR  basic.ReturnValue1========
    [junit] GT:2,[a, b]
    [junit] FN:0,[]
    [junit] FP:0,[]
    [junit] PTSGT:1
    [junit] REPORTED:1
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.0 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.0 seconds.
    [junit] [Spark] Solution found in 0.0 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b", "{allocId:1, mayAlias:[a,b], notMayAlias:[rv2], mustAlias:[a,b], notMustAlias:[rv2]}") for variable b
    [junit] 	Allocation site $r0 = new benchmark.objects.A -> alias: [b, a], not alias: [rv2]
    [junit] =========RESULTS FOR  basic.ReturnValue2========
    [junit] GT:2,[a, b]
    [junit] FN:0,[]
    [junit] FP:0,[]
    [junit] PTSGT:1
    [junit] REPORTED:1
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.0 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.0 seconds.
    [junit] [Spark] Solution found in 0.0 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("x", "{allocId:1, mayAlias:[x], notMayAlias:[a,b,y], mustAlias:[x], notMustAlias:[a,b,y]}") for variable x
    [junit] 	Allocation site $r1 = new benchmark.objects.B -> alias: [x], not alias: [y, b, a]
    [junit] =========RESULTS FOR  basic.ReturnValue3========
    [junit] GT:1,[x]
    [junit] FN:0,[]
    [junit] FP:0,[]
    [junit] PTSGT:1
    [junit] REPORTED:1
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.0 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.0 seconds.
    [junit] [Spark] Solution found in 0.0 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("x", "{allocId:1, mayAlias:[x,y], notMayAlias:[a,b], mustAlias:[x,y], notMustAlias:[a,b]}") for variable x
    [junit] 	Allocation site $r2 = new benchmark.objects.B -> alias: [y, x], not alias: [a, b]
    [junit] =========RESULTS FOR  basic.Method1========
    [junit] GT:2,[x, y]
    [junit] FN:0,[]
    [junit] FP:0,[]
    [junit] PTSGT:1
    [junit] REPORTED:1
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.0 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.0 seconds.
    [junit] [Spark] Solution found in 0.0 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("x", "{allocId:1, mayAlias:[x,y], notMayAlias:[a,b,m2], mustAlias:[x,y], notMustAlias:[a,b,m2]}") for variable x
    [junit] 	Allocation site $r2 = new benchmark.objects.B -> alias: [x, y], not alias: [b, a, m2]
    [junit] =========RESULTS FOR  basic.Method2========
    [junit] GT:2,[x, y]
    [junit] FN:0,[]
    [junit] FP:0,[]
    [junit] PTSGT:1
    [junit] REPORTED:1
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.0 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.0 seconds.
    [junit] [Spark] Solution found in 0.0 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("a", "{allocId:1, mayAlias:[a], notMayAlias:[i,b], mustAlias:[a], notMustAlias:[i,b]},{allocId:2, mayAlias:[a,b], notMayAlias:[i], mustAlias:[a], notMustAlias:[i,b]}") for variable a
    [junit] 	Allocation site $r1 = new benchmark.objects.A -> alias: [b, a], not alias: [i]
    [junit] 	Allocation site $r0 = new benchmark.objects.A -> alias: [a], not alias: [b, i]
    [junit] =========RESULTS FOR  basic.Branching1========
    [junit] GT:2,[b, a]
    [junit] FN:0,[]
    [junit] FP:0,[]
    [junit] PTSGT:2
    [junit] REPORTED:2
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.0 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.0 seconds.
    [junit] [Spark] Solution found in 0.0 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("n", "{allocId:1, mayAlias:[n], notMayAlias:[i,o,p,q], mustAlias:[n], notMustAlias:[i,o,p,q]}") for variable n
    [junit] 	Allocation site $r0 = new basic.Recursion1$N -> alias: [n], not alias: [o, q, p]
    [junit] =========RESULTS FOR  basic.Recursion1========
    [junit] GT:1,[n]
    [junit] FN:0,[]
    [junit] FP:0,[]
    [junit] PTSGT:1
    [junit] REPORTED:1
    [junit] Running tests.dart.CollectionsTest
    [junit] Tests run: 4, Failures: 2, Errors: 0, Skipped: 0, Time elapsed: 9,948 sec
    [junit] Output:
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.2 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.0 seconds.
    [junit] [Spark] Solution found in 0.0 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("c", "{allocId:1, mayAlias:[c,b], notMayAlias:[a,array], mustAlias:[c,b], notMustAlias:[a,array]}") for variable c
    [junit] 	Allocation site $r1 = new benchmark.objects.A -> alias: [c, b], not alias: [a, array]
    [junit] =========RESULTS FOR  collections.Array1========
    [junit] GT:2,[c, b]
    [junit] FN:0,[]
    [junit] FP:1,[a]
    [junit] PTSGT:1
    [junit] REPORTED:2
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.0 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.0 seconds.
    [junit] [Spark] Solution found in 0.0 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("slice", "{allocId:1, mayAlias:[slice], notMayAlias:[a,b,array], mustAlias:[slice], notMustAlias:[a,b,array]}") for variable slice
    [junit] 	Allocation site array = newarray (benchmark.objects.A[])[0] -> alias: [slice], not alias: [b, a, array]
    [junit] =========RESULTS FOR  collections.Array2========
    [junit] GT:1,[slice]
    [junit] FN:0,[]
    [junit] FP:0,[]
    [junit] PTSGT:1
    [junit] REPORTED:1
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.0 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 2.8 seconds.
    [junit] [Spark] Solution found in 2.8 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("c", "{allocId:1, mayAlias:[c,b], notMayAlias:[a,map], mustAlias:[c,b], notMustAlias:[a,map]}") for variable c
    [junit] 	Allocation site $r2 = new benchmark.objects.A -> alias: [b, c], not alias: [map, a]
    [junit] =========RESULTS FOR  collections.Map1========
    [junit] GT:2,[b, c]
    [junit] FN:2,[b, c]
    [junit] FP:0,[]
    [junit] PTSGT:1
    [junit] REPORTED:0
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.0 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.1 seconds.
    [junit] [Spark] Solution found in 0.1 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b", "{allocId:1, mayAlias:[c,b], notMayAlias:[a,list], mustAlias:[c,b], notMustAlias:[a,list]}") for variable b
    [junit] 	Allocation site $r2 = new benchmark.objects.A -> alias: [b, c], not alias: [list, a]
    [junit] =========RESULTS FOR  collections.List1========
    [junit] GT:2,[b, c]
    [junit] FN:0,[]
    [junit] FP:0,[]
    [junit] PTSGT:1
    [junit] REPORTED:1
    [junit] Test tests.dart.CollectionsTest FAILED
    [junit] Running tests.dart.CornerCasesTest
    [junit] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 7,364 sec
    [junit] Output:
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.1 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.0 seconds.
    [junit] [Spark] Solution found in 0.0 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b", "{allocId:1, mayAlias:[a,b], notMayAlias:[], mustAlias:[a,b], notMustAlias:[]},{allocId:2, mayAlias:[a], notMayAlias:[b], mustAlias:[a], notMustAlias:[b]}") for variable b
    [junit] 	Allocation site $r1 = new benchmark.objects.A -> alias: [a], not alias: [b]
    [junit] 	Allocation site $r0 = new benchmark.objects.A -> alias: [a, b], not alias: []
    [junit] =========RESULTS FOR  cornerCases.ContextSensitivity1========
    [junit] GT:2,[a, b]
    [junit] FN:0,[]
    [junit] FP:0,[]
    [junit] PTSGT:2
    [junit] REPORTED:2
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.0 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.0 seconds.
    [junit] [Spark] Solution found in 0.0 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b", "{allocId:1, mayAlias:[a,b], notMayAlias:[], mustAlias:[a,b], notMustAlias:[]},{allocId:2, mayAlias:[a], notMayAlias:[b], mustAlias:[a], notMustAlias:[b]}") for variable b
    [junit] 	Allocation site $r1 = new benchmark.objects.A -> alias: [a], not alias: [b]
    [junit] 	Allocation site $r0 = new benchmark.objects.A -> alias: [a, b], not alias: []
    [junit] =========RESULTS FOR  cornerCases.ContextSensitivity2========
    [junit] GT:2,[a, b]
    [junit] FN:0,[]
    [junit] FP:0,[]
    [junit] PTSGT:2
    [junit] REPORTED:2
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.0 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.0 seconds.
    [junit] [Spark] Solution found in 0.0 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b", "{allocId:1, mayAlias:[a,b], notMayAlias:[], mustAlias:[a,b], notMustAlias:[]},{allocId:2, mayAlias:[a], notMayAlias:[b], mustAlias:[a], notMustAlias:[b]}") for variable b
    [junit] 	Allocation site $r1 = new benchmark.objects.A -> alias: [a], not alias: [b]
    [junit] 	Allocation site $r0 = new benchmark.objects.A -> alias: [b, a], not alias: []
    [junit] =========RESULTS FOR  cornerCases.ContextSensitivity3========
    [junit] GT:2,[b, a]
    [junit] FN:0,[]
    [junit] FP:0,[]
    [junit] PTSGT:2
    [junit] REPORTED:2
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.0 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.0 seconds.
    [junit] [Spark] Solution found in 0.0 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b", "{allocId:1, mayAlias:[b], notMayAlias:[a], mustAlias:[b], notMustAlias:[a]}") for variable b
    [junit] 	Allocation site $r1 = new benchmark.objects.A -> alias: [b], not alias: [a]
    [junit] =========RESULTS FOR  cornerCases.FlowSensitivity1========
    [junit] GT:1,[b]
    [junit] FN:0,[]
    [junit] FP:0,[]
    [junit] PTSGT:1
    [junit] REPORTED:1
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.0 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.0 seconds.
    [junit] [Spark] Solution found in 0.0 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("x", "{allocId:1, mayAlias:[x,y], notMayAlias:[a,b], mustAlias:[x,y], notMustAlias:[a,b]}") for variable x
    [junit] 	Allocation site $r1 = new benchmark.objects.B -> alias: [y, x], not alias: [a, b]
    [junit] =========RESULTS FOR  cornerCases.StrongUpdate1========
    [junit] GT:2,[y, x]
    [junit] FN:0,[]
    [junit] FP:0,[]
    [junit] PTSGT:1
    [junit] REPORTED:1
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.0 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.0 seconds.
    [junit] [Spark] Solution found in 0.0 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("x", "{allocId:1, mayAlias:[x,y], notMayAlias:[a,b], mustAlias:[a.f,b.f], notMustAlias:[a,b]}") for variable x
    [junit] 	Allocation site $r0 = new benchmark.objects.A -> alias: [y, x], not alias: [b, a]
    [junit] =========RESULTS FOR  cornerCases.AccessPath1========
    [junit] GT:2,[x, y]
    [junit] FN:0,[]
    [junit] FP:0,[]
    [junit] PTSGT:1
    [junit] REPORTED:1
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.0 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.0 seconds.
    [junit] [Spark] Solution found in 0.0 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b4", "{allocId:1, mayAlias:[b4,b2], notMayAlias:[a1,a2,b1,b3], mustAlias:[b4,b2], notMustAlias:[a1,a2,b1,b3]}") for variable b4
    [junit] 	Allocation site $r1 = new benchmark.objects.B -> alias: [b2, b4], not alias: [a2, a1, b1, b3]
    [junit] =========RESULTS FOR  cornerCases.ObjectSensitivity1========
    [junit] GT:2,[b2, b4]
    [junit] FN:0,[]
    [junit] FP:0,[]
    [junit] PTSGT:1
    [junit] REPORTED:1
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.0 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.0 seconds.
    [junit] [Spark] Solution found in 0.0 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b4", "{allocId:1, mayAlias:[b4,b2], notMayAlias:[a,b1,b3], mustAlias:[b4,b2], notMustAlias:[a,b1,b3]}") for variable b4
    [junit] 	Allocation site $r1 = new benchmark.objects.B -> alias: [b4, b2], not alias: [b1, b3, a]
    [junit] =========RESULTS FOR  cornerCases.ObjectSensitivity2========
    [junit] GT:2,[b2, b4]
    [junit] FN:0,[]
    [junit] FP:0,[]
    [junit] PTSGT:1
    [junit] REPORTED:1
    [junit] Running tests.dart.GeneralJavaTest
    [junit] Tests run: 8, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 8,042 sec
    [junit] Output:
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.2 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.0 seconds.
    [junit] [Spark] Solution found in 0.0 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("c", "{allocId:1, mayAlias:[c,b], notMayAlias:[a,g,h], mustAlias:[c,b], notMustAlias:[a,g,h]}") for variable c
    [junit] 	Allocation site $r1 = new benchmark.objects.A -> alias: [c, b], not alias: [a, h, g]
    [junit] =========RESULTS FOR  generalJava.Interface1========
    [junit] GT:2,[c, b]
    [junit] FN:0,[]
    [junit] FP:0,[]
    [junit] PTSGT:1
    [junit] REPORTED:1
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.1 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.4 seconds.
    [junit] [Spark] Solution found in 0.4 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b", "{allocId:1, mayAlias:[a,b], notMayAlias:[], mustAlias:[a,b], notMustAlias:[]}") for variable b
    [junit] 	Allocation site $r0 = new benchmark.objects.A -> alias: [b, a], not alias: []
    [junit] =========RESULTS FOR  generalJava.Exception1========
    [junit] GT:2,[b, a]
    [junit] FN:0,[]
    [junit] FP:0,[]
    [junit] PTSGT:1
    [junit] REPORTED:1
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.0 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.0 seconds.
    [junit] [Spark] Solution found in 0.0 seconds.
    [junit] Query at stmt null for variable null
    [junit] 	Allocation site $r1 = new benchmark.objects.A -> alias: [], not alias: []
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.0 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.0 seconds.
    [junit] [Spark] Solution found in 0.0 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b", "{NULLALLOC, mayAlias:[], notMayAlias:[b,a], mustAlias:[b,a], notMustAlias:[i]}") for variable b
    [junit] 	Allocation site null -> alias: [], not alias: [a, b]
    [junit] =========RESULTS FOR  generalJava.Null1========
    [junit] GT:0,[]
    [junit] FN:0,[]
    [junit] FP:0,[]
    [junit] PTSGT:0
    [junit] REPORTED:0
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.0 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.0 seconds.
    [junit] [Spark] Solution found in 0.0 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("x", "{NULLALLOC, mayAlias:[], notMayAlias:[b,a], mustAlias:[b,a], notMustAlias:[i]}") for variable x
    [junit] 	Allocation site null -> alias: [], not alias: [a, b]
    [junit] =========RESULTS FOR  generalJava.Null2========
    [junit] GT:0,[]
    [junit] FN:0,[]
    [junit] FP:0,[]
    [junit] PTSGT:0
    [junit] REPORTED:0
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.0 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.0 seconds.
    [junit] [Spark] Solution found in 0.0 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b", "{allocId:1, mayAlias:[b,a], notMayAlias:[], mustAlias:[b,a], notMustAlias:[]}") for variable b
    [junit] 	Allocation site $r0 = new benchmark.objects.A -> alias: [b], not alias: []
    [junit] =========RESULTS FOR  generalJava.StaticVariables1========
    [junit] GT:1,[b]
    [junit] FN:0,[]
    [junit] FP:0,[]
    [junit] PTSGT:1
    [junit] REPORTED:1
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.0 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.0 seconds.
    [junit] [Spark] Solution found in 0.0 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("h", "{allocId:1, mayAlias:[b,b], notMayAlias:[i,a], mustAlias:[b,a], notMustAlias:[i]}") for variable h
    [junit] 	Allocation site $r0 = new benchmark.objects.A -> alias: [b], not alias: [a, i]
    [junit] =========RESULTS FOR  generalJava.OuterClass1========
    [junit] GT:1,[b]
    [junit] FN:0,[]
    [junit] FP:0,[]
    [junit] PTSGT:1
    [junit] REPORTED:1
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.0 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.0 seconds.
    [junit] [Spark] Solution found in 0.0 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("h", "{allocId:1, mayAlias:[b], notMayAlias:[a,p], mustAlias:[b,a], notMustAlias:[p]}") for variable h
    [junit] 	Allocation site $r0 = new benchmark.objects.A -> alias: [b], not alias: [p, a]
    [junit] =========RESULTS FOR  generalJava.SuperClass1========
    [junit] GT:1,[b]
    [junit] FN:0,[]
    [junit] FP:0,[]
    [junit] PTSGT:1
    [junit] REPORTED:1
    [junit] Test tests.dart.GeneralJavaTest FAILED
    [junit] Running tests.manu.BasicTest
    [junit] Tests run: 11, Failures: 3, Errors: 0, Skipped: 0, Time elapsed: 7,633 sec
    [junit] Output:
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.2 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.0 seconds.
    [junit] [Spark] Solution found in 0.0 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b", "{allocId:1, mayAlias:[a,b], notMayAlias:[], mustAlias:[a,b], notMustAlias:[]}") for variable b
    [junit] 	Allocation site $r0 = new benchmark.objects.A -> alias: [b, a], not alias: []
    [junit] =========RESULTS FOR  basic.SimpleAlias1========
    [junit] GT:2,[b, a]
    [junit] FN:0,[]
    [junit] FP:0,[]
    [junit] PTSGT:1
    [junit] REPORTED:1
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.0 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.0 seconds.
    [junit] [Spark] Solution found in 0.0 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("node", "{allocId:1, mayAlias:[node], notMayAlias:[i,o,p,q], mustAlias:[node], notMustAlias:[i,o,p,q]}") for variable node
    [junit] 	Allocation site $r0 = new basic.Loops1$N -> alias: [node], not alias: [p, o, i, q]
    [junit] =========RESULTS FOR  basic.Loops1========
    [junit] GT:1,[node]
    [junit] FN:0,[]
    [junit] FP:0,[]
    [junit] PTSGT:1
    [junit] REPORTED:1
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.0 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.0 seconds.
    [junit] [Spark] Solution found in 0.0 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b", "{allocId:1, mayAlias:[b,x], notMayAlias:[], mustAlias:[b,x], notMustAlias:[]}") for variable b
    [junit] 	Allocation site $r0 = new benchmark.objects.A -> alias: [x, b], not alias: []
    [junit] =========RESULTS FOR  basic.Parameter1========
    [junit] GT:2,[x, b]
    [junit] FN:0,[]
    [junit] FP:0,[]
    [junit] PTSGT:1
    [junit] REPORTED:1
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.0 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.0 seconds.
    [junit] [Spark] Solution found in 0.0 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b", "{allocId:1, mayAlias:[b,x], notMayAlias:[], mustAlias:[b,x], notMustAlias:[]}") for variable b
    [junit] 	Allocation site $r0 = new benchmark.objects.A -> alias: [b, x], not alias: []
    [junit] =========RESULTS FOR  basic.Parameter2========
    [junit] GT:2,[x, b]
    [junit] FN:0,[]
    [junit] FP:0,[]
    [junit] PTSGT:1
    [junit] REPORTED:1
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.0 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.0 seconds.
    [junit] [Spark] Solution found in 0.0 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b", "{allocId:1, mayAlias:[a,b], notMayAlias:[], mustAlias:[a,b], notMustAlias:[]}") for variable b
    [junit] 	Allocation site $r0 = new benchmark.objects.A -> alias: [b, a], not alias: []
    [junit] =========RESULTS FOR  basic.ReturnValue1========
    [junit] GT:2,[b, a]
    [junit] FN:0,[]
    [junit] FP:0,[]
    [junit] PTSGT:1
    [junit] REPORTED:1
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.0 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.0 seconds.
    [junit] [Spark] Solution found in 0.0 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b", "{allocId:1, mayAlias:[a,b], notMayAlias:[rv2], mustAlias:[a,b], notMustAlias:[rv2]}") for variable b
    [junit] 	Allocation site $r0 = new benchmark.objects.A -> alias: [a, b], not alias: [rv2]
    [junit] =========RESULTS FOR  basic.ReturnValue2========
    [junit] GT:2,[a, b]
    [junit] FN:0,[]
    [junit] FP:0,[]
    [junit] PTSGT:1
    [junit] REPORTED:1
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.0 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.0 seconds.
    [junit] [Spark] Solution found in 0.0 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("x", "{allocId:1, mayAlias:[x], notMayAlias:[a,b,y], mustAlias:[x], notMustAlias:[a,b,y]}") for variable x
    [junit] 	Allocation site $r1 = new benchmark.objects.B -> alias: [x], not alias: [y, b, a]
    [junit] =========RESULTS FOR  basic.ReturnValue3========
    [junit] GT:1,[x]
    [junit] FN:0,[]
    [junit] FP:0,[]
    [junit] PTSGT:1
    [junit] REPORTED:2
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.0 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.0 seconds.
    [junit] [Spark] Solution found in 0.0 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("x", "{allocId:1, mayAlias:[x,y], notMayAlias:[a,b], mustAlias:[x,y], notMustAlias:[a,b]}") for variable x
    [junit] 	Allocation site $r2 = new benchmark.objects.B -> alias: [y, x], not alias: [b, a]
    [junit] =========RESULTS FOR  basic.Method1========
    [junit] GT:2,[y, x]
    [junit] FN:0,[]
    [junit] FP:0,[]
    [junit] PTSGT:1
    [junit] REPORTED:3
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.0 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.0 seconds.
    [junit] [Spark] Solution found in 0.0 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("x", "{allocId:1, mayAlias:[x,y], notMayAlias:[a,b,m2], mustAlias:[x,y], notMustAlias:[a,b,m2]}") for variable x
    [junit] 	Allocation site $r2 = new benchmark.objects.B -> alias: [x, y], not alias: [m2, a, b]
    [junit] =========RESULTS FOR  basic.Method2========
    [junit] GT:2,[x, y]
    [junit] FN:0,[]
    [junit] FP:0,[]
    [junit] PTSGT:1
    [junit] REPORTED:3
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.0 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.0 seconds.
    [junit] [Spark] Solution found in 0.0 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("a", "{allocId:1, mayAlias:[a], notMayAlias:[i,b], mustAlias:[a], notMustAlias:[i,b]},{allocId:2, mayAlias:[a,b], notMayAlias:[i], mustAlias:[a], notMustAlias:[i,b]}") for variable a
    [junit] 	Allocation site $r1 = new benchmark.objects.A -> alias: [b, a], not alias: [i]
    [junit] 	Allocation site $r0 = new benchmark.objects.A -> alias: [a], not alias: [i, b]
    [junit] =========RESULTS FOR  basic.Branching1========
    [junit] GT:2,[b, a]
    [junit] FN:0,[]
    [junit] FP:0,[]
    [junit] PTSGT:2
    [junit] REPORTED:2
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.0 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.0 seconds.
    [junit] [Spark] Solution found in 0.0 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("n", "{allocId:1, mayAlias:[n], notMayAlias:[i,o,p,q], mustAlias:[n], notMustAlias:[i,o,p,q]}") for variable n
    [junit] 	Allocation site $r0 = new basic.Recursion1$N -> alias: [n], not alias: [o, p, q]
    [junit] =========RESULTS FOR  basic.Recursion1========
    [junit] GT:1,[n]
    [junit] FN:0,[]
    [junit] FP:0,[]
    [junit] PTSGT:1
    [junit] REPORTED:1
    [junit] Test tests.manu.BasicTest FAILED
    [junit] Running tests.manu.CollectionsTest
    [junit] Tests run: 4, Failures: 3, Errors: 0, Skipped: 0, Time elapsed: 13,305 sec
    [junit] Output:
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.2 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.0 seconds.
    [junit] [Spark] Solution found in 0.0 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("c", "{allocId:1, mayAlias:[c,b], notMayAlias:[a,array], mustAlias:[c,b], notMustAlias:[a,array]}") for variable c
    [junit] 	Allocation site $r1 = new benchmark.objects.A -> alias: [b, c], not alias: [a, array]
    [junit] =========RESULTS FOR  collections.Array1========
    [junit] GT:2,[b, c]
    [junit] FN:0,[]
    [junit] FP:1,[a]
    [junit] PTSGT:1
    [junit] REPORTED:2
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.0 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.0 seconds.
    [junit] [Spark] Solution found in 0.0 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("slice", "{allocId:1, mayAlias:[slice], notMayAlias:[a,b,array], mustAlias:[slice], notMustAlias:[a,b,array]}") for variable slice
    [junit] 	Allocation site array = newarray (benchmark.objects.A[])[0] -> alias: [slice], not alias: [array, a, b]
    [junit] =========RESULTS FOR  collections.Array2========
    [junit] GT:1,[slice]
    [junit] FN:1,[slice]
    [junit] FP:0,[]
    [junit] PTSGT:1
    [junit] REPORTED:0
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.0 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 3.0 seconds.
    [junit] [Spark] Solution found in 3.0 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("c", "{allocId:1, mayAlias:[c,b], notMayAlias:[a,map], mustAlias:[c,b], notMustAlias:[a,map]}") for variable c
    [junit] 	Allocation site $r2 = new benchmark.objects.A -> alias: [c, b], not alias: [a, map]
    [junit] =========RESULTS FOR  collections.Map1========
    [junit] GT:2,[c, b]
    [junit] FN:0,[]
    [junit] FP:1,[a]
    [junit] PTSGT:1
    [junit] REPORTED:2
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.0 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.1 seconds.
    [junit] [Spark] Solution found in 0.1 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b", "{allocId:1, mayAlias:[c,b], notMayAlias:[a,list], mustAlias:[c,b], notMustAlias:[a,list]}") for variable b
    [junit] 	Allocation site $r2 = new benchmark.objects.A -> alias: [c, b], not alias: [list, a]
    [junit] =========RESULTS FOR  collections.List1========
    [junit] GT:2,[c, b]
    [junit] FN:0,[]
    [junit] FP:0,[]
    [junit] PTSGT:1
    [junit] REPORTED:1
    [junit] Test tests.manu.CollectionsTest FAILED
    [junit] Running tests.manu.CornerCasesTest
    [junit] Tests run: 8, Failures: 4, Errors: 0, Skipped: 0, Time elapsed: 7,671 sec
    [junit] Output:
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.1 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.0 seconds.
    [junit] [Spark] Solution found in 0.0 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b", "{allocId:1, mayAlias:[a,b], notMayAlias:[], mustAlias:[a,b], notMustAlias:[]},{allocId:2, mayAlias:[a], notMayAlias:[b], mustAlias:[a], notMustAlias:[b]}") for variable b
    [junit] 	Allocation site $r1 = new benchmark.objects.A -> alias: [a], not alias: [b]
    [junit] 	Allocation site $r0 = new benchmark.objects.A -> alias: [b, a], not alias: []
    [junit] =========RESULTS FOR  cornerCases.ContextSensitivity1========
    [junit] GT:2,[b, a]
    [junit] FN:0,[]
    [junit] FP:0,[]
    [junit] PTSGT:2
    [junit] REPORTED:2
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.0 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.0 seconds.
    [junit] [Spark] Solution found in 0.0 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b", "{allocId:1, mayAlias:[a,b], notMayAlias:[], mustAlias:[a,b], notMustAlias:[]},{allocId:2, mayAlias:[a], notMayAlias:[b], mustAlias:[a], notMustAlias:[b]}") for variable b
    [junit] 	Allocation site $r1 = new benchmark.objects.A -> alias: [a], not alias: [b]
    [junit] 	Allocation site $r0 = new benchmark.objects.A -> alias: [b, a], not alias: []
    [junit] =========RESULTS FOR  cornerCases.ContextSensitivity2========
    [junit] GT:2,[b, a]
    [junit] FN:0,[]
    [junit] FP:0,[]
    [junit] PTSGT:2
    [junit] REPORTED:2
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.0 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.0 seconds.
    [junit] [Spark] Solution found in 0.0 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b", "{allocId:1, mayAlias:[a,b], notMayAlias:[], mustAlias:[a,b], notMustAlias:[]},{allocId:2, mayAlias:[a], notMayAlias:[b], mustAlias:[a], notMustAlias:[b]}") for variable b
    [junit] 	Allocation site $r1 = new benchmark.objects.A -> alias: [a], not alias: [b]
    [junit] 	Allocation site $r0 = new benchmark.objects.A -> alias: [b, a], not alias: []
    [junit] =========RESULTS FOR  cornerCases.ContextSensitivity3========
    [junit] GT:2,[b, a]
    [junit] FN:0,[]
    [junit] FP:0,[]
    [junit] PTSGT:2
    [junit] REPORTED:2
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.0 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.0 seconds.
    [junit] [Spark] Solution found in 0.0 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b", "{allocId:1, mayAlias:[b], notMayAlias:[a], mustAlias:[b], notMustAlias:[a]}") for variable b
    [junit] 	Allocation site $r1 = new benchmark.objects.A -> alias: [b], not alias: [a]
    [junit] =========RESULTS FOR  cornerCases.FlowSensitivity1========
    [junit] GT:1,[b]
    [junit] FN:0,[]
    [junit] FP:1,[a]
    [junit] PTSGT:1
    [junit] REPORTED:2
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.0 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.0 seconds.
    [junit] [Spark] Solution found in 0.0 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("x", "{allocId:1, mayAlias:[x,y], notMayAlias:[a,b], mustAlias:[x,y], notMustAlias:[a,b]}") for variable x
    [junit] 	Allocation site $r1 = new benchmark.objects.B -> alias: [x, y], not alias: [b, a]
    [junit] =========RESULTS FOR  cornerCases.StrongUpdate1========
    [junit] GT:2,[x, y]
    [junit] FN:0,[]
    [junit] FP:0,[]
    [junit] PTSGT:1
    [junit] REPORTED:2
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.0 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.0 seconds.
    [junit] [Spark] Solution found in 0.0 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("x", "{allocId:1, mayAlias:[x,y], notMayAlias:[a,b], mustAlias:[a.f,b.f], notMustAlias:[a,b]}") for variable x
    [junit] 	Allocation site $r0 = new benchmark.objects.A -> alias: [x, y], not alias: [a, b]
    [junit] =========RESULTS FOR  cornerCases.AccessPath1========
    [junit] GT:2,[x, y]
    [junit] FN:0,[]
    [junit] FP:0,[]
    [junit] PTSGT:1
    [junit] REPORTED:2
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.0 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.0 seconds.
    [junit] [Spark] Solution found in 0.0 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b4", "{allocId:1, mayAlias:[b4,b2], notMayAlias:[a1,a2,b1,b3], mustAlias:[b4,b2], notMustAlias:[a1,a2,b1,b3]}") for variable b4
    [junit] 	Allocation site $r1 = new benchmark.objects.B -> alias: [b2, b4], not alias: [a1, a2, b1, b3]
    [junit] =========RESULTS FOR  cornerCases.ObjectSensitivity1========
    [junit] GT:2,[b2, b4]
    [junit] FN:0,[]
    [junit] FP:0,[]
    [junit] PTSGT:1
    [junit] REPORTED:2
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.0 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.0 seconds.
    [junit] [Spark] Solution found in 0.0 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b4", "{allocId:1, mayAlias:[b4,b2], notMayAlias:[a,b1,b3], mustAlias:[b4,b2], notMustAlias:[a,b1,b3]}") for variable b4
    [junit] 	Allocation site $r1 = new benchmark.objects.B -> alias: [b4, b2], not alias: [a, b1, b3]
    [junit] =========RESULTS FOR  cornerCases.ObjectSensitivity2========
    [junit] GT:2,[b2, b4]
    [junit] FN:0,[]
    [junit] FP:0,[]
    [junit] PTSGT:1
    [junit] REPORTED:1
    [junit] Test tests.manu.CornerCasesTest FAILED
    [junit] Running tests.manu.GeneralJavaTest
    [junit] Tests run: 8, Failures: 3, Errors: 1, Skipped: 0, Time elapsed: 7,822 sec
    [junit] Output:
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.2 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.0 seconds.
    [junit] [Spark] Solution found in 0.0 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("c", "{allocId:1, mayAlias:[c,b], notMayAlias:[a,g,h], mustAlias:[c,b], notMustAlias:[a,g,h]}") for variable c
    [junit] 	Allocation site $r1 = new benchmark.objects.A -> alias: [c, b], not alias: [a, g, h]
    [junit] =========RESULTS FOR  generalJava.Interface1========
    [junit] GT:2,[c, b]
    [junit] FN:0,[]
    [junit] FP:0,[]
    [junit] PTSGT:1
    [junit] REPORTED:1
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.0 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.4 seconds.
    [junit] [Spark] Solution found in 0.4 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b", "{allocId:1, mayAlias:[a,b], notMayAlias:[], mustAlias:[a,b], notMustAlias:[]}") for variable b
    [junit] 	Allocation site $r0 = new benchmark.objects.A -> alias: [a, b], not alias: []
    [junit] =========RESULTS FOR  generalJava.Exception1========
    [junit] GT:2,[a, b]
    [junit] FN:0,[]
    [junit] FP:0,[]
    [junit] PTSGT:1
    [junit] REPORTED:2
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.0 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.0 seconds.
    [junit] [Spark] Solution found in 0.0 seconds.
    [junit] Query at stmt null for variable null
    [junit] 	Allocation site $r1 = new benchmark.objects.A -> alias: [], not alias: []
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.0 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.0 seconds.
    [junit] [Spark] Solution found in 0.0 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b", "{NULLALLOC, mayAlias:[], notMayAlias:[b,a], mustAlias:[b,a], notMustAlias:[i]}") for variable b
    [junit] 	Allocation site null -> alias: [], not alias: [a, b]
    [junit] =========RESULTS FOR  generalJava.Null1========
    [junit] GT:0,[]
    [junit] FN:0,[]
    [junit] FP:0,[]
    [junit] PTSGT:0
    [junit] REPORTED:0
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.0 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.0 seconds.
    [junit] [Spark] Solution found in 0.0 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("x", "{NULLALLOC, mayAlias:[], notMayAlias:[b,a], mustAlias:[b,a], notMustAlias:[i]}") for variable x
    [junit] 	Allocation site null -> alias: [], not alias: [a, b]
    [junit] =========RESULTS FOR  generalJava.Null2========
    [junit] GT:0,[]
    [junit] FN:0,[]
    [junit] FP:0,[]
    [junit] PTSGT:0
    [junit] REPORTED:0
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.0 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.0 seconds.
    [junit] [Spark] Solution found in 0.0 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b", "{allocId:1, mayAlias:[b,a], notMayAlias:[], mustAlias:[b,a], notMustAlias:[]}") for variable b
    [junit] 	Allocation site $r0 = new benchmark.objects.A -> alias: [b], not alias: []
    [junit] =========RESULTS FOR  generalJava.StaticVariables1========
    [junit] GT:1,[b]
    [junit] FN:0,[]
    [junit] FP:0,[]
    [junit] PTSGT:1
    [junit] REPORTED:1
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.0 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.0 seconds.
    [junit] [Spark] Solution found in 0.0 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("h", "{allocId:1, mayAlias:[b,b], notMayAlias:[i,a], mustAlias:[b,a], notMustAlias:[i]}") for variable h
    [junit] 	Allocation site $r0 = new benchmark.objects.A -> alias: [b], not alias: [i, a]
    [junit] =========RESULTS FOR  generalJava.OuterClass1========
    [junit] GT:1,[b]
    [junit] FN:0,[]
    [junit] FP:1,[a]
    [junit] PTSGT:1
    [junit] REPORTED:2
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.0 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.0 seconds.
    [junit] [Spark] Solution found in 0.0 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("h", "{allocId:1, mayAlias:[b], notMayAlias:[a,p], mustAlias:[b,a], notMustAlias:[p]}") for variable h
    [junit] 	Allocation site $r0 = new benchmark.objects.A -> alias: [b], not alias: [a, p]
    [junit] =========RESULTS FOR  generalJava.SuperClass1========
    [junit] GT:1,[b]
    [junit] FN:0,[]
    [junit] FP:1,[a]
    [junit] PTSGT:1
    [junit] REPORTED:2
    [junit] Test tests.manu.GeneralJavaTest FAILED
    [junit] Running tests.yan.BasicTest
    [junit] Tests run: 11, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 10,898 sec
    [junit] Output:
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.2 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.0 seconds.
    [junit] [Spark] Solution found in 0.0 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b", "{allocId:1, mayAlias:[a,b], notMayAlias:[], mustAlias:[a,b], notMustAlias:[]}") for variable b
    [junit] 	Allocation site $r0 = new benchmark.objects.A -> alias: [b, a], not alias: []
    [junit] [PARAMETER] SPA_BUDGET_NODES: 75000, SUMM_RATIO: 3, TIME_BUDGET: 2
    [junit] THRESHOLD: 3
    [junit] [DEBUG] average number of incoming CG edges: 1
    [junit] THRESHOLD: 3
    [junit] [DEBUG] average number of incoming CG edges: 1
    [junit] =========RESULTS FOR  basic.SimpleAlias1========
    [junit] GT:2,[b, a]
    [junit] FN:0,[]
    [junit] FP:0,[]
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.0 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.0 seconds.
    [junit] [Spark] Solution found in 0.0 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("node", "{allocId:1, mayAlias:[node], notMayAlias:[i,o,p,q], mustAlias:[node], notMustAlias:[i,o,p,q]}") for variable node
    [junit] 	Allocation site $r0 = new basic.Loops1$N -> alias: [node], not alias: [q, i, o, p]
    [junit] THRESHOLD: 0
    [junit] [DEBUG] average number of incoming CG edges: 0
    [junit] THRESHOLD: 0
    [junit] [DEBUG] average number of incoming CG edges: 0
    [junit] THRESHOLD: 0
    [junit] [DEBUG] average number of incoming CG edges: 0
    [junit] THRESHOLD: 0
    [junit] [DEBUG] average number of incoming CG edges: 0
    [junit] THRESHOLD: 0
    [junit] [DEBUG] average number of incoming CG edges: 0
    [junit] =========RESULTS FOR  basic.Loops1========
    [junit] GT:1,[node]
    [junit] FN:0,[]
    [junit] FP:0,[]
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.0 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.0 seconds.
    [junit] [Spark] Solution found in 0.0 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b", "{allocId:1, mayAlias:[b,x], notMayAlias:[], mustAlias:[b,x], notMustAlias:[]}") for variable b
    [junit] 	Allocation site $r0 = new benchmark.objects.A -> alias: [x, b], not alias: []
    [junit] THRESHOLD: 0
    [junit] [DEBUG] average number of incoming CG edges: 0
    [junit] THRESHOLD: 0
    [junit] [DEBUG] average number of incoming CG edges: 0
    [junit] =========RESULTS FOR  basic.Parameter1========
    [junit] GT:2,[x, b]
    [junit] FN:0,[]
    [junit] FP:0,[]
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.0 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.0 seconds.
    [junit] [Spark] Solution found in 0.0 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b", "{allocId:1, mayAlias:[b,x], notMayAlias:[], mustAlias:[b,x], notMustAlias:[]}") for variable b
    [junit] 	Allocation site $r0 = new benchmark.objects.A -> alias: [b, x], not alias: []
    [junit] THRESHOLD: 0
    [junit] [DEBUG] average number of incoming CG edges: 0
    [junit] THRESHOLD: 0
    [junit] [DEBUG] average number of incoming CG edges: 0
    [junit] =========RESULTS FOR  basic.Parameter2========
    [junit] GT:2,[x, b]
    [junit] FN:0,[]
    [junit] FP:0,[]
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.0 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.0 seconds.
    [junit] [Spark] Solution found in 0.0 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b", "{allocId:1, mayAlias:[a,b], notMayAlias:[], mustAlias:[a,b], notMustAlias:[]}") for variable b
    [junit] 	Allocation site $r0 = new benchmark.objects.A -> alias: [b, a], not alias: []
    [junit] THRESHOLD: 0
    [junit] [DEBUG] average number of incoming CG edges: 0
    [junit] THRESHOLD: 0
    [junit] [DEBUG] average number of incoming CG edges: 0
    [junit] [summary.pass] <benchmark.objects.A: void <init>()>
    [junit] [summary.pass] <benchmark.objects.A: void <init>()>
    [junit] [summary.pass] <benchmark.objects.A: void <init>()>
    [junit] =========RESULTS FOR  basic.ReturnValue1========
    [junit] GT:2,[b, a]
    [junit] FN:0,[]
    [junit] FP:0,[]
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.0 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.0 seconds.
    [junit] [Spark] Solution found in 0.0 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b", "{allocId:1, mayAlias:[a,b], notMayAlias:[rv2], mustAlias:[a,b], notMustAlias:[rv2]}") for variable b
    [junit] 	Allocation site $r0 = new benchmark.objects.A -> alias: [a, b], not alias: [rv2]
    [junit] THRESHOLD: 0
    [junit] [DEBUG] average number of incoming CG edges: 0
    [junit] THRESHOLD: 0
    [junit] [DEBUG] average number of incoming CG edges: 0
    [junit] THRESHOLD: 0
    [junit] [DEBUG] average number of incoming CG edges: 0
    [junit] =========RESULTS FOR  basic.ReturnValue2========
    [junit] GT:2,[a, b]
    [junit] FN:0,[]
    [junit] FP:0,[]
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.0 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.0 seconds.
    [junit] [Spark] Solution found in 0.0 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("x", "{allocId:1, mayAlias:[x], notMayAlias:[a,b,y], mustAlias:[x], notMustAlias:[a,b,y]}") for variable x
    [junit] 	Allocation site $r1 = new benchmark.objects.B -> alias: [x], not alias: [b, a, y]
    [junit] THRESHOLD: 0
    [junit] [DEBUG] average number of incoming CG edges: 0
    [junit] THRESHOLD: 0
    [junit] [DEBUG] average number of incoming CG edges: 0
    [junit] THRESHOLD: 0
    [junit] [DEBUG] average number of incoming CG edges: 0
    [junit] THRESHOLD: 0
    [junit] [DEBUG] average number of incoming CG edges: 0
    [junit] [summary.fail] <benchmark.objects.A: void <init>()>
    [junit] =========RESULTS FOR  basic.ReturnValue3========
    [junit] GT:1,[x]
    [junit] FN:0,[]
    [junit] FP:1,[y]
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.0 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.0 seconds.
    [junit] [Spark] Solution found in 0.0 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("x", "{allocId:1, mayAlias:[x,y], notMayAlias:[a,b], mustAlias:[x,y], notMustAlias:[a,b]}") for variable x
    [junit] 	Allocation site $r2 = new benchmark.objects.B -> alias: [y, x], not alias: [b, a]
    [junit] THRESHOLD: 0
    [junit] [DEBUG] average number of incoming CG edges: 0
    [junit] THRESHOLD: 0
    [junit] [DEBUG] average number of incoming CG edges: 0
    [junit] THRESHOLD: 0
    [junit] [DEBUG] average number of incoming CG edges: 0
    [junit] THRESHOLD: 0
    [junit] [DEBUG] average number of incoming CG edges: 0
    [junit] =========RESULTS FOR  basic.Method1========
    [junit] GT:2,[y, x]
    [junit] FN:0,[]
    [junit] FP:0,[]
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.0 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.0 seconds.
    [junit] [Spark] Solution found in 0.0 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("x", "{allocId:1, mayAlias:[x,y], notMayAlias:[a,b,m2], mustAlias:[x,y], notMustAlias:[a,b,m2]}") for variable x
    [junit] 	Allocation site $r2 = new benchmark.objects.B -> alias: [x, y], not alias: [a, m2, b]
    [junit] THRESHOLD: 0
    [junit] [DEBUG] average number of incoming CG edges: 0
    [junit] THRESHOLD: 0
    [junit] [DEBUG] average number of incoming CG edges: 0
    [junit] [summary.pass] <benchmark.objects.B: void <init>()>
    [junit] [summary.pass] <benchmark.objects.B: void <init>()>
    [junit] [summary.pass] <benchmark.objects.B: void <init>()>
    [junit] [summary.pass] <benchmark.objects.A: void <init>()>
    [junit] [summary.pass] <benchmark.objects.A: void <init>()>
    [junit] [summary.pass] <benchmark.objects.A: void <init>()>
    [junit] [summary.pass] <benchmark.objects.A: void <init>()>
    [junit] [summary.pass] <benchmark.objects.A: void <init>()>
    [junit] [summary.pass] <benchmark.objects.A: void <init>()>
    [junit] [summary.pass] <benchmark.objects.A: void <init>()>
    [junit] [summary.pass] <benchmark.objects.B: void <init>()>
    [junit] [summary.pass] <benchmark.objects.B: void <init>()>
    [junit] [summary.pass] <benchmark.objects.B: void <init>()>
    [junit] [summary.pass] <benchmark.objects.B: void <init>()>
    [junit] [summary.pass] <benchmark.objects.A: void <init>()>
    [junit] [summary.pass] <benchmark.objects.A: void <init>()>
    [junit] [summary.pass] <benchmark.objects.A: void <init>()>
    [junit] [summary.pass] <benchmark.objects.A: void <init>()>
    [junit] [summary.pass] <benchmark.objects.A: void <init>()>
    [junit] [summary.pass] <benchmark.objects.A: void <init>()>
    [junit] [summary.pass] <benchmark.objects.A: void <init>()>
    [junit] [summary.pass] <benchmark.objects.A: void <init>()>
    [junit] [summary.pass] <benchmark.objects.A: void <init>()>
    [junit] [summary.pass] <benchmark.objects.A: void <init>()>
    [junit] [summary.pass] <benchmark.objects.A: void <init>()>
    [junit] THRESHOLD: 0
    [junit] [DEBUG] average number of incoming CG edges: 0
    [junit] THRESHOLD: 0
    [junit] [DEBUG] average number of incoming CG edges: 0
    [junit] THRESHOLD: 0
    [junit] [DEBUG] average number of incoming CG edges: 0
    [junit] =========RESULTS FOR  basic.Method2========
    [junit] GT:2,[x, y]
    [junit] FN:0,[]
    [junit] FP:0,[]
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.0 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.0 seconds.
    [junit] [Spark] Solution found in 0.0 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("a", "{allocId:1, mayAlias:[a], notMayAlias:[i,b], mustAlias:[a], notMustAlias:[i,b]},{allocId:2, mayAlias:[a,b], notMayAlias:[i], mustAlias:[a], notMustAlias:[i,b]}") for variable a
    [junit] 	Allocation site $r1 = new benchmark.objects.A -> alias: [b, a], not alias: [i]
    [junit] 	Allocation site $r0 = new benchmark.objects.A -> alias: [a], not alias: [b, i]
    [junit] THRESHOLD: 0
    [junit] [DEBUG] average number of incoming CG edges: 0
    [junit] THRESHOLD: 0
    [junit] [DEBUG] average number of incoming CG edges: 0
    [junit] THRESHOLD: 0
    [junit] [DEBUG] average number of incoming CG edges: 0
    [junit] THRESHOLD: 0
    [junit] [DEBUG] average number of incoming CG edges: 0
    [junit] =========RESULTS FOR  basic.Branching1========
    [junit] GT:2,[b, a]
    [junit] FN:0,[]
    [junit] FP:0,[]
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.0 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.0 seconds.
    [junit] [Spark] Solution found in 0.0 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("n", "{allocId:1, mayAlias:[n], notMayAlias:[i,o,p,q], mustAlias:[n], notMustAlias:[i,o,p,q]}") for variable n
    [junit] 	Allocation site $r0 = new basic.Recursion1$N -> alias: [n], not alias: [q, o, p]
    [junit] THRESHOLD: 0
    [junit] [DEBUG] average number of incoming CG edges: 0
    [junit] THRESHOLD: 0
    [junit] [DEBUG] average number of incoming CG edges: 0
    [junit] THRESHOLD: 0
    [junit] [DEBUG] average number of incoming CG edges: 0
    [junit] THRESHOLD: 0
    [junit] [DEBUG] average number of incoming CG edges: 0
    [junit] =========RESULTS FOR  basic.Recursion1========
    [junit] GT:1,[n]
    [junit] FN:0,[]
    [junit] FP:0,[]
    [junit] Test tests.yan.BasicTest FAILED
    [junit] Running tests.yan.CollectionsTest
    [junit] Tests run: 4, Failures: 2, Errors: 0, Skipped: 0, Time elapsed: 17,99 sec
    [junit] Output:
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.2 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.0 seconds.
    [junit] [Spark] Solution found in 0.0 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("c", "{allocId:1, mayAlias:[c,b], notMayAlias:[a,array], mustAlias:[c,b], notMustAlias:[a,array]}") for variable c
    [junit] 	Allocation site $r1 = new benchmark.objects.A -> alias: [b, c], not alias: [array, a]
    [junit] [PARAMETER] SPA_BUDGET_NODES: 75000, SUMM_RATIO: 3, TIME_BUDGET: 2
    [junit] THRESHOLD: 6
    [junit] [DEBUG] average number of incoming CG edges: 2
    [junit] THRESHOLD: 6
    [junit] [DEBUG] average number of incoming CG edges: 2
    [junit] THRESHOLD: 6
    [junit] [DEBUG] average number of incoming CG edges: 2
    [junit] THRESHOLD: 6
    [junit] [DEBUG] average number of incoming CG edges: 2
    [junit] =========RESULTS FOR  collections.Array1========
    [junit] GT:2,[b, c]
    [junit] FN:0,[]
    [junit] FP:1,[a]
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.0 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.0 seconds.
    [junit] [Spark] Solution found in 0.0 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("slice", "{allocId:1, mayAlias:[slice], notMayAlias:[a,b,array], mustAlias:[slice], notMustAlias:[a,b,array]}") for variable slice
    [junit] 	Allocation site array = newarray (benchmark.objects.A[])[0] -> alias: [slice], not alias: [b, a, array]
    [junit] THRESHOLD: 3
    [junit] [DEBUG] average number of incoming CG edges: 1
    [junit] THRESHOLD: 3
    [junit] [DEBUG] average number of incoming CG edges: 1
    [junit] THRESHOLD: 3
    [junit] [DEBUG] average number of incoming CG edges: 1
    [junit] THRESHOLD: 3
    [junit] [DEBUG] average number of incoming CG edges: 1
    [junit] =========RESULTS FOR  collections.Array2========
    [junit] GT:1,[slice]
    [junit] FN:0,[]
    [junit] FP:0,[]
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.0 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 3.0 seconds.
    [junit] [Spark] Solution found in 3.0 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("c", "{allocId:1, mayAlias:[c,b], notMayAlias:[a,map], mustAlias:[c,b], notMustAlias:[a,map]}") for variable c
    [junit] 	Allocation site $r2 = new benchmark.objects.A -> alias: [b, c], not alias: [map, a]
    [junit] THRESHOLD: 15
    [junit] [DEBUG] average number of incoming CG edges: 5
    [junit] THRESHOLD: 15
    [junit] [DEBUG] average number of incoming CG edges: 5
    [junit] THRESHOLD: 15
    [junit] [DEBUG] average number of incoming CG edges: 5
    [junit] THRESHOLD: 15
    [junit] [DEBUG] average number of incoming CG edges: 5
    [junit] =========RESULTS FOR  collections.Map1========
    [junit] GT:2,[b, c]
    [junit] FN:0,[]
    [junit] FP:1,[a]
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.0 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.3 seconds.
    [junit] [Spark] Solution found in 0.3 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b", "{allocId:1, mayAlias:[c,b], notMayAlias:[a,list], mustAlias:[c,b], notMustAlias:[a,list]}") for variable b
    [junit] 	Allocation site $r2 = new benchmark.objects.A -> alias: [b, c], not alias: [list, a]
    [junit] THRESHOLD: 0
    [junit] [DEBUG] average number of incoming CG edges: 0
    [junit] THRESHOLD: 0
    [junit] [DEBUG] average number of incoming CG edges: 0
    [junit] THRESHOLD: 0
    [junit] [DEBUG] average number of incoming CG edges: 0
    [junit] THRESHOLD: 0
    [junit] [DEBUG] average number of incoming CG edges: 0
    [junit] =========RESULTS FOR  collections.List1========
    [junit] GT:2,[b, c]
    [junit] FN:0,[]
    [junit] FP:0,[]
    [junit] Test tests.yan.CollectionsTest FAILED
    [junit] Running tests.yan.CornerCasesTest
    [junit] Tests run: 8, Failures: 3, Errors: 0, Skipped: 0, Time elapsed: 10,332 sec
    [junit] Output:
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.2 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.0 seconds.
    [junit] [Spark] Solution found in 0.0 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b", "{allocId:1, mayAlias:[a,b], notMayAlias:[], mustAlias:[a,b], notMustAlias:[]},{allocId:2, mayAlias:[a], notMayAlias:[b], mustAlias:[a], notMustAlias:[b]}") for variable b
    [junit] 	Allocation site $r1 = new benchmark.objects.A -> alias: [a], not alias: [b]
    [junit] 	Allocation site $r0 = new benchmark.objects.A -> alias: [b, a], not alias: []
    [junit] [PARAMETER] SPA_BUDGET_NODES: 75000, SUMM_RATIO: 3, TIME_BUDGET: 2
    [junit] THRESHOLD: 6
    [junit] [DEBUG] average number of incoming CG edges: 2
    [junit] THRESHOLD: 6
    [junit] [DEBUG] average number of incoming CG edges: 2
    [junit] THRESHOLD: 6
    [junit] [DEBUG] average number of incoming CG edges: 2
    [junit] [summary.fail] <benchmark.objects.A: void <init>()>
    [junit] =========RESULTS FOR  cornerCases.ContextSensitivity1========
    [junit] GT:2,[b, a]
    [junit] FN:0,[]
    [junit] FP:0,[]
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.0 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.0 seconds.
    [junit] [Spark] Solution found in 0.0 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b", "{allocId:1, mayAlias:[a,b], notMayAlias:[], mustAlias:[a,b], notMustAlias:[]},{allocId:2, mayAlias:[a], notMayAlias:[b], mustAlias:[a], notMustAlias:[b]}") for variable b
    [junit] 	Allocation site $r1 = new benchmark.objects.A -> alias: [a], not alias: [b]
    [junit] 	Allocation site $r0 = new benchmark.objects.A -> alias: [a, b], not alias: []
    [junit] THRESHOLD: 3
    [junit] [DEBUG] average number of incoming CG edges: 1
    [junit] THRESHOLD: 3
    [junit] [DEBUG] average number of incoming CG edges: 1
    [junit] THRESHOLD: 3
    [junit] [DEBUG] average number of incoming CG edges: 1
    [junit] =========RESULTS FOR  cornerCases.ContextSensitivity2========
    [junit] GT:2,[a, b]
    [junit] FN:0,[]
    [junit] FP:0,[]
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.0 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.0 seconds.
    [junit] [Spark] Solution found in 0.0 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b", "{allocId:1, mayAlias:[a,b], notMayAlias:[], mustAlias:[a,b], notMustAlias:[]},{allocId:2, mayAlias:[a], notMayAlias:[b], mustAlias:[a], notMustAlias:[b]}") for variable b
    [junit] 	Allocation site $r1 = new benchmark.objects.A -> alias: [a], not alias: [b]
    [junit] 	Allocation site $r0 = new benchmark.objects.A -> alias: [a, b], not alias: []
    [junit] THRESHOLD: 0
    [junit] [DEBUG] average number of incoming CG edges: 0
    [junit] THRESHOLD: 0
    [junit] [DEBUG] average number of incoming CG edges: 0
    [junit] THRESHOLD: 0
    [junit] [DEBUG] average number of incoming CG edges: 0
    [junit] =========RESULTS FOR  cornerCases.ContextSensitivity3========
    [junit] GT:2,[a, b]
    [junit] FN:0,[]
    [junit] FP:0,[]
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.1 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.0 seconds.
    [junit] [Spark] Solution found in 0.0 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b", "{allocId:1, mayAlias:[b], notMayAlias:[a], mustAlias:[b], notMustAlias:[a]}") for variable b
    [junit] 	Allocation site $r1 = new benchmark.objects.A -> alias: [b], not alias: [a]
    [junit] THRESHOLD: 0
    [junit] [DEBUG] average number of incoming CG edges: 0
    [junit] THRESHOLD: 0
    [junit] [DEBUG] average number of incoming CG edges: 0
    [junit] =========RESULTS FOR  cornerCases.FlowSensitivity1========
    [junit] GT:1,[b]
    [junit] FN:0,[]
    [junit] FP:1,[a]
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.0 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.0 seconds.
    [junit] [Spark] Solution found in 0.0 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("x", "{allocId:1, mayAlias:[x,y], notMayAlias:[a,b], mustAlias:[x,y], notMustAlias:[a,b]}") for variable x
    [junit] 	Allocation site $r1 = new benchmark.objects.B -> alias: [y, x], not alias: [a, b]
    [junit] THRESHOLD: 0
    [junit] [DEBUG] average number of incoming CG edges: 0
    [junit] THRESHOLD: 0
    [junit] [DEBUG] average number of incoming CG edges: 0
    [junit] THRESHOLD: 0
    [junit] [DEBUG] average number of incoming CG edges: 0
    [junit] THRESHOLD: 0
    [junit] [DEBUG] average number of incoming CG edges: 0
    [junit] =========RESULTS FOR  cornerCases.StrongUpdate1========
    [junit] GT:2,[y, x]
    [junit] FN:0,[]
    [junit] FP:0,[]
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.0 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.0 seconds.
    [junit] [Spark] Solution found in 0.0 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("x", "{allocId:1, mayAlias:[x,y], notMayAlias:[a,b], mustAlias:[a.f,b.f], notMustAlias:[a,b]}") for variable x
    [junit] 	Allocation site $r0 = new benchmark.objects.A -> alias: [y, x], not alias: [a, b]
    [junit] THRESHOLD: 0
    [junit] [DEBUG] average number of incoming CG edges: 0
    [junit] THRESHOLD: 0
    [junit] [DEBUG] average number of incoming CG edges: 0
    [junit] THRESHOLD: 0
    [junit] [DEBUG] average number of incoming CG edges: 0
    [junit] THRESHOLD: 0
    [junit] [DEBUG] average number of incoming CG edges: 0
    [junit] =========RESULTS FOR  cornerCases.AccessPath1========
    [junit] GT:2,[y, x]
    [junit] FN:0,[]
    [junit] FP:0,[]
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.0 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.0 seconds.
    [junit] [Spark] Solution found in 0.0 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b4", "{allocId:1, mayAlias:[b4,b2], notMayAlias:[a1,a2,b1,b3], mustAlias:[b4,b2], notMustAlias:[a1,a2,b1,b3]}") for variable b4
    [junit] 	Allocation site $r1 = new benchmark.objects.B -> alias: [b2, b4], not alias: [b1, a1, b3, a2]
    [junit] THRESHOLD: 0
    [junit] [DEBUG] average number of incoming CG edges: 0
    [junit] [summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
    [junit] [summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
    [junit] THRESHOLD: 0
    [junit] [DEBUG] average number of incoming CG edges: 0
    [junit] THRESHOLD: 0
    [junit] [DEBUG] average number of incoming CG edges: 0
 
    [junit] THRESHOLD: 0
    [junit] [DEBUG] average number of incoming CG edges: 0
    [junit] =========RESULTS FOR  cornerCases.ObjectSensitivity1========
    [junit] GT:2,[b2, b4]
    [junit] FN:0,[]
    [junit] FP:2,[b1, b3]
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.0 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.0 seconds.
    [junit] [Spark] Solution found in 0.0 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b4", "{allocId:1, mayAlias:[b4,b2], notMayAlias:[a,b1,b3], mustAlias:[b4,b2], notMustAlias:[a,b1,b3]}") for variable b4
    [junit] 	Allocation site $r1 = new benchmark.objects.B -> alias: [b2, b4], not alias: [b3, b1, a]
    [junit] THRESHOLD: 0
    [junit] [DEBUG] average number of incoming CG edges: 0
    [junit] [summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
    [junit] THRESHOLD: 0
    [junit] [DEBUG] average number of incoming CG edges: 0
    [junit] THRESHOLD: 0
    [junit] [DEBUG] average number of incoming CG edges: 0
    
    [junit] THRESHOLD: 0
    [junit] [DEBUG] average number of incoming CG edges: 0
    [junit] =========RESULTS FOR  cornerCases.ObjectSensitivity2========
    [junit] GT:2,[b2, b4]
    [junit] FN:1,[b2]
    [junit] FP:0,[]
    [junit] Test tests.yan.CornerCasesTest FAILED
    [junit] Running tests.yan.GeneralJavaTest
    [junit] Tests run: 8, Failures: 3, Errors: 1, Skipped: 0, Time elapsed: 11,373 sec
    [junit] Output:
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.2 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.0 seconds.
    [junit] [Spark] Solution found in 0.0 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("c", "{allocId:1, mayAlias:[c,b], notMayAlias:[a,g,h], mustAlias:[c,b], notMustAlias:[a,g,h]}") for variable c
    [junit] 	Allocation site $r1 = new benchmark.objects.A -> alias: [c, b], not alias: [g, a, h]
    [junit] [PARAMETER] SPA_BUDGET_NODES: 75000, SUMM_RATIO: 3, TIME_BUDGET: 2
    [junit] THRESHOLD: 6
    [junit] [DEBUG] average number of incoming CG edges: 2
    [junit] THRESHOLD: 6
    [junit] [DEBUG] average number of incoming CG edges: 2
    [junit] [summary.pass] <benchmark.objects.A: void <init>()>
    [junit] [summary.pass] <benchmark.objects.A: void <init>()>
    [junit] [summary.pass] <benchmark.objects.A: void <init>()>
    [junit] [summary.pass] <benchmark.objects.H: benchmark.objects.A foo(benchmark.objects.A)>
    [junit] [summary.pass] <benchmark.objects.H: benchmark.objects.A foo(benchmark.objects.A)>
    [junit] [summary.pass] <benchmark.objects.H: benchmark.objects.A foo(benchmark.objects.A)>
    [junit] [summary.pass] <benchmark.objects.H: benchmark.objects.A foo(benchmark.objects.A)>
    [junit] THRESHOLD: 6
    [junit] [DEBUG] average number of incoming CG edges: 2
    [junit] THRESHOLD: 6
    [junit] [DEBUG] average number of incoming CG edges: 2
    [junit] THRESHOLD: 6
    [junit] [DEBUG] average number of incoming CG edges: 2
    [junit] =========RESULTS FOR  generalJava.Interface1========
    [junit] GT:2,[c, b]
    [junit] FN:0,[]
    [junit] FP:0,[]
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.0 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.4 seconds.
    [junit] [Spark] Solution found in 0.4 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b", "{allocId:1, mayAlias:[a,b], notMayAlias:[], mustAlias:[a,b], notMustAlias:[]}") for variable b
    [junit] 	Allocation site $r0 = new benchmark.objects.A -> alias: [a, b], not alias: []
    [junit] THRESHOLD: 9
    [junit] [DEBUG] average number of incoming CG edges: 3
    [junit] THRESHOLD: 9
    [junit] [DEBUG] average number of incoming CG edges: 3
    [junit] =========RESULTS FOR  generalJava.Exception1========
    [junit] GT:2,[a, b]
    [junit] FN:0,[]
    [junit] FP:0,[]
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.0 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.0 seconds.
    [junit] [Spark] Solution found in 0.0 seconds.
    [junit] Query at stmt null for variable null
    [junit] 	Allocation site $r1 = new benchmark.objects.A -> alias: [], not alias: []
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.0 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.0 seconds.
    [junit] [Spark] Solution found in 0.0 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b", "{NULLALLOC, mayAlias:[], notMayAlias:[b,a], mustAlias:[b,a], notMustAlias:[i]}") for variable b
    [junit] 	Allocation site null -> alias: [], not alias: [a, b]
    [junit] THRESHOLD: 0
    [junit] [DEBUG] average number of incoming CG edges: 0
    [junit] THRESHOLD: 0
    [junit] [DEBUG] average number of incoming CG edges: 0
    [junit] =========RESULTS FOR  generalJava.Null1========
    [junit] GT:0,[]
    [junit] FN:0,[]
    [junit] FP:1,[b]
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.0 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.0 seconds.
    [junit] [Spark] Solution found in 0.0 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("x", "{NULLALLOC, mayAlias:[], notMayAlias:[b,a], mustAlias:[b,a], notMustAlias:[i]}") for variable x
    [junit] 	Allocation site null -> alias: [], not alias: [a, b]
    [junit] THRESHOLD: 0
    [junit] [DEBUG] average number of incoming CG edges: 0
    [junit] THRESHOLD: 0
    [junit] [DEBUG] average number of incoming CG edges: 0
    [junit] =========RESULTS FOR  generalJava.Null2========
    [junit] GT:0,[]
    [junit] FN:0,[]
    [junit] FP:0,[]
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.0 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.0 seconds.
    [junit] [Spark] Solution found in 0.0 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b", "{allocId:1, mayAlias:[b,a], notMayAlias:[], mustAlias:[b,a], notMustAlias:[]}") for variable b
    [junit] 	Allocation site $r0 = new benchmark.objects.A -> alias: [b], not alias: []
    [junit] THRESHOLD: 0
    [junit] [DEBUG] average number of incoming CG edges: 0
    [junit] =========RESULTS FOR  generalJava.StaticVariables1========
    [junit] GT:1,[b]
    [junit] FN:0,[]
    [junit] FP:0,[]
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.0 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.0 seconds.
    [junit] [Spark] Solution found in 0.0 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("h", "{allocId:1, mayAlias:[b,b], notMayAlias:[i,a], mustAlias:[b,a], notMustAlias:[i]}") for variable h
    [junit] 	Allocation site $r0 = new benchmark.objects.A -> alias: [b], not alias: [a, i]
    [junit] THRESHOLD: 0
    [junit] [DEBUG] average number of incoming CG edges: 0
    [junit] [summary.pass] <generalJava.OuterClass1$InnerClass: void alias(benchmark.objects.A)>
    [junit] [summary.pass] <generalJava.OuterClass1$InnerClass: void <init>(generalJava.OuterClass1,benchmark.objects.A)>
    [junit] [summary.pass] <generalJava.OuterClass1$InnerClass: void alias(benchmark.objects.A)>
    [junit] [summary.pass] <generalJava.OuterClass1$InnerClass: benchmark.objects.A access$000(generalJava.OuterClass1$InnerClass)>
    [junit] THRESHOLD: 0
    [junit] [DEBUG] average number of incoming CG edges: 0
    [junit] [summary.pass] <generalJava.OuterClass1$InnerClass: void <init>(generalJava.OuterClass1,benchmark.objects.A)>
    [junit] [summary.pass] <generalJava.OuterClass1$InnerClass: void <init>(generalJava.OuterClass1,benchmark.objects.A)>
    [junit] [summary.pass] <generalJava.OuterClass1$InnerClass: void <init>(generalJava.OuterClass1,benchmark.objects.A)>
    [junit] [summary.pass] <generalJava.OuterClass1$InnerClass: void <init>(generalJava.OuterClass1,benchmark.objects.A)>
    [junit] [summary.pass] <generalJava.OuterClass1$InnerClass: void alias(benchmark.objects.A)>
    [junit] [summary.pass] <generalJava.OuterClass1$InnerClass: benchmark.objects.A access$000(generalJava.OuterClass1$InnerClass)>
    [junit] THRESHOLD: 0
    [junit] [DEBUG] average number of incoming CG edges: 0
    [junit] =========RESULTS FOR  generalJava.OuterClass1========
    [junit] GT:1,[b]
    [junit] FN:0,[]
    [junit] FP:1,[a]
    [junit] Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
    [junit] [Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
    [junit] [Spark] Pointer Assignment Graph in 0.0 seconds.
    [junit] [Spark] Type masks in 0.0 seconds.
    [junit] [Spark] Pointer Graph simplified in 0.0 seconds.
    [junit] [Spark] Propagation in 0.0 seconds.
    [junit] [Spark] Solution found in 0.0 seconds.
    [junit] Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("h", "{allocId:1, mayAlias:[b], notMayAlias:[a,p], mustAlias:[b,a], notMustAlias:[p]}") for variable h
    [junit] 	Allocation site $r0 = new benchmark.objects.A -> alias: [b], not alias: [p, a]
    [junit] THRESHOLD: 0
    [junit] [DEBUG] average number of incoming CG edges: 0
    [junit] [summary.pass] <benchmark.objects.Q: void alias(benchmark.objects.A)>
    [junit] [summary.pass] <benchmark.objects.Q: benchmark.objects.A getA()>
    [junit] THRESHOLD: 0
    [junit] [DEBUG] average number of incoming CG edges: 0
    [junit] THRESHOLD: 0
    [junit] [DEBUG] average number of incoming CG edges: 0
    [junit] [summary.fail] <benchmark.objects.P: void <init>(benchmark.objects.A)>
    [junit] =========RESULTS FOR  generalJava.SuperClass1========
    [junit] GT:1,[b]
    [junit] FN:0,[]
    [junit] FP:1,[a]
    [junit] Test tests.yan.GeneralJavaTest FAILED
reporttests:
[junitreport] Processing /Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/reports/TESTS-TestSuites.xml to /var/folders/61/20qsh7_j6_ncnywwtd50d_qm0000gp/T/null1807310647
[junitreport] Loading stylesheet jar:file:/Applications/eclipse-luna/plugins/org.apache.ant_1.9.2.v201404171502/lib/ant-junit.jar!/org/apache/tools/ant/taskdefs/optional/junit/xsl/junit-frames.xsl
[junitreport] Transform time: 1003ms
[junitreport] Deleting: /var/folders/61/20qsh7_j6_ncnywwtd50d_qm0000gp/T/null1807310647
BUILD SUCCESSFUL
Total time: 2 minutes 19 seconds