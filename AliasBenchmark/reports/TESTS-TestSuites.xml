<?xml version="1.0" encoding="UTF-8" ?>
<testsuites>
  <testsuite errors="0" failures="0" hostname="mac-spaeth.sit.fraunhofer.de" id="0" name="BasicTest" package="tests.dart" skipped="0" tests="11" time="9.195" timestamp="2015-06-16T11:56:53">
      <properties>
          <property name="java.vendor" value="Oracle Corporation" />

          <property name="sun.java.launcher" value="SUN_STANDARD" />

          <property name="eclipse.pdebuild.templates" value="/Applications/eclipse-luna/plugins/org.eclipse.pde.build_3.9.0.v20140415-2029/templates//" />

          <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers" />

          <property name="os.name" value="Mac OS X" />

          <property name="sun.boot.class.path" value="/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/resources.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/rt.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/sunrsasign.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/jsse.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/jce.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/charsets.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/jfr.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/classes" />

          <property name="java.vm.specification.vendor" value="Oracle Corporation" />

          <property name="ant.home" value="/Applications/eclipse-luna/plugins/org.apache.ant_1.9.2.v201404171502" />

          <property name="java.runtime.version" value="1.7.0_51-b13" />

          <property name="user.name" value="spaeth" />

          <property name="user.language" value="de" />

          <property name="sun.boot.library.path" value="/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib" />

          <property name="ant.project.default-target" value="compile" />

          <property name="ant.project.name" value="soot-infoflow" />

          <property name="java.version" value="1.7.0_51" />

          <property name="user.timezone" value="" />

          <property name="sun.arch.data.model" value="64" />

          <property name="http.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16" />

          <property name="java.endorsed.dirs" value="/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/endorsed" />

          <property name="sun.cpu.isalist" value="" />

          <property name="sun.jnu.encoding" value="UTF-8" />

          <property name="file.encoding.pkg" value="sun.io" />

          <property name="file.separator" value="/" />

          <property name="java.specification.name" value="Java Platform API Specification" />

          <property name="java.class.version" value="51.0" />

          <property name="user.country" value="DE" />

          <property name="java.home" value="/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre" />

          <property name="java.vm.info" value="mixed mode" />

          <property name="ant.file" value="/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/experiments.xml" />

          <property name="os.version" value="10.10.3" />

          <property name="path.separator" value=":" />

          <property name="java.vm.version" value="24.51-b03" />

          <property name="ant.file.soot-infoflow" value="/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/experiments.xml" />

          <property name="ant.library.dir" value="/Applications/eclipse-luna/plugins/org.apache.ant_1.9.2.v201404171502/lib" />

          <property name="java.awt.printerjob" value="sun.lwawt.macosx.CPrinterJob" />

          <property name="sun.io.unicode.encoding" value="UnicodeBig" />

          <property name="awt.toolkit" value="sun.lwawt.macosx.LWCToolkit" />

          <property name="socksNonProxyHosts" value="local|*.local|169.254/16|*.169.254/16" />

          <property name="ftp.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16" />

          <property name="eclipse.pdebuild.scripts" value="/Applications/eclipse-luna/plugins/org.eclipse.pde.build_3.9.0.v20140415-2029/scripts//" />

          <property name="user.home" value="/Users/spaeth" />

          <property name="java.specification.vendor" value="Oracle Corporation" />

          <property name="java.library.path" value="/Users/spaeth/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:." />

          <property name="java.vendor.url" value="http://java.oracle.com/" />

          <property name="java.vm.vendor" value="Oracle Corporation" />

          <property name="gopherProxySet" value="false" />

          <property name="java.runtime.name" value="Java(TM) SE Runtime Environment" />

          <property name="sun.java.command" value="org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner tests.dart.BasicTest filtertrace=true haltOnError=false haltOnFailure=false formatter=org.apache.tools.ant.taskdefs.optional.junit.OutErrSummaryJUnitResultFormatter showoutput=false outputtoformatters=true logfailedtests=true logtestlistenerevents=false formatter=org.apache.tools.ant.taskdefs.optional.junit.XMLJUnitResultFormatter,/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/reports/TEST-tests.dart.BasicTest.xml crashfile=/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/junitvmwatcher1639412353981498185.properties propsfile=/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/junit3730028026178025209.properties" />

          <property name="java.class.path" value="/Users/spaeth/Documents/workspace/builds/soot-trunk.jar:/Users/spaeth/Documents/workspace/builds/dart.jar:/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/bin:/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/lib/junit.jar:/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/lib/org.hamcrest.core_1.3.0.jar:/Applications/eclipse-luna/plugins/org.apache.ant_1.9.2.v201404171502/lib/ant-launcher.jar:/Applications/eclipse-luna/plugins/org.apache.ant_1.9.2.v201404171502/lib/ant.jar:/Applications/eclipse-luna/plugins/org.apache.ant_1.9.2.v201404171502/lib/ant-junit.jar:/Applications/eclipse-luna/plugins/org.apache.ant_1.9.2.v201404171502/lib/ant-junit4.jar" />

          <property name="ant.version" value="Apache Ant(TM) version 1.9.2 compiled on July 8 2013" />

          <property name="ant.file.type.soot-infoflow" value="file" />

          <property name="java.vm.specification.name" value="Java Virtual Machine Specification" />

          <property name="java.vm.specification.version" value="1.7" />

          <property name="sun.cpu.endian" value="little" />

          <property name="sun.os.patch.level" value="unknown" />

          <property name="eclipse.pdebuild.home" value="/Applications/eclipse-luna/plugins/org.eclipse.pde.build_3.9.0.v20140415-2029/.//" />

          <property name="java.io.tmpdir" value="/var/folders/61/20qsh7_j6_ncnywwtd50d_qm0000gp/T/" />

          <property name="java.vendor.url.bug" value="http://bugreport.sun.com/bugreport/" />

          <property name="os.arch" value="x86_64" />

          <property name="java.awt.graphicsenv" value="sun.awt.CGraphicsEnvironment" />

          <property name="java.ext.dirs" value="/Users/spaeth/Library/Java/Extensions:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/ext:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java" />

          <property name="user.dir" value="/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark" />

          <property name="dart.jar" value="/Users/spaeth/Documents/workspace/builds/dart.jar" />

          <property name="line.separator" value="&#xa;" />

          <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM" />

          <property name="soot.jar" value="/Users/spaeth/Documents/workspace/builds/soot-trunk.jar" />

          <property name="basedir" value="/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark" />

          <property name="ant.java.version" value="1.7" />

          <property name="ant.core.lib" value="/Applications/eclipse-luna/plugins/org.apache.ant_1.9.2.v201404171502/lib/ant.jar" />

          <property name="file.encoding" value="US-ASCII" />

          <property name="java.specification.version" value="1.7" />

          <property name="ant.project.invoked-targets" value="reporttests" />

      </properties>

      <testcase classname="tests.dart.BasicTest" name="simpleAlias1" time="2.884" />

      <testcase classname="tests.dart.BasicTest" name="loops1" time="2.58" />

      <testcase classname="tests.dart.BasicTest" name="parameter1" time="0.684" />

      <testcase classname="tests.dart.BasicTest" name="parameter2" time="0.419" />

      <testcase classname="tests.dart.BasicTest" name="returnValue1" time="0.349" />

      <testcase classname="tests.dart.BasicTest" name="returnValue2" time="0.398" />

      <testcase classname="tests.dart.BasicTest" name="returnValue3" time="0.358" />

      <testcase classname="tests.dart.BasicTest" name="method1" time="0.372" />

      <testcase classname="tests.dart.BasicTest" name="method2" time="0.373" />

      <testcase classname="tests.dart.BasicTest" name="branching1" time="0.27" />

      <testcase classname="tests.dart.BasicTest" name="recursion1" time="0.43" />

      <system-out><![CDATA[Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.1 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.0 seconds.
[Spark] Solution found in 0.0 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b", "{allocId:1, mayAlias:[a,b], notMayAlias:[], mustAlias:[a,b], notMustAlias:[]}") for variable b
	Allocation site $r0 = new benchmark.objects.A -> alias: [a, b], not alias: []

=========RESULTS FOR  basic.SimpleAlias1========
GT:2,[a, b]
FN:0,[]
FP:0,[]
PTSGT:1
REPORTED:1
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.0 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.0 seconds.
[Spark] Solution found in 0.0 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("node", "{allocId:1, mayAlias:[node], notMayAlias:[i,o,p,q], mustAlias:[node], notMustAlias:[i,o,p,q]}") for variable node
	Allocation site $r0 = new basic.Loops1$N -> alias: [node], not alias: [o, p, q, i]

=========RESULTS FOR  basic.Loops1========
GT:1,[node]
FN:0,[]
FP:0,[]
PTSGT:1
REPORTED:1
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.0 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.0 seconds.
[Spark] Solution found in 0.0 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b", "{allocId:1, mayAlias:[b,x], notMayAlias:[], mustAlias:[b,x], notMustAlias:[]}") for variable b
	Allocation site $r0 = new benchmark.objects.A -> alias: [b, x], not alias: []

=========RESULTS FOR  basic.Parameter1========
GT:2,[b, x]
FN:0,[]
FP:0,[]
PTSGT:1
REPORTED:1
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.0 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.0 seconds.
[Spark] Solution found in 0.0 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b", "{allocId:1, mayAlias:[b,x], notMayAlias:[], mustAlias:[b,x], notMustAlias:[]}") for variable b
	Allocation site $r0 = new benchmark.objects.A -> alias: [x, b], not alias: []

=========RESULTS FOR  basic.Parameter2========
GT:2,[x, b]
FN:0,[]
FP:0,[]
PTSGT:1
REPORTED:1
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.0 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.0 seconds.
[Spark] Solution found in 0.0 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b", "{allocId:1, mayAlias:[a,b], notMayAlias:[], mustAlias:[a,b], notMustAlias:[]}") for variable b
	Allocation site $r0 = new benchmark.objects.A -> alias: [a, b], not alias: []

=========RESULTS FOR  basic.ReturnValue1========
GT:2,[a, b]
FN:0,[]
FP:0,[]
PTSGT:1
REPORTED:1
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.0 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.0 seconds.
[Spark] Solution found in 0.0 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b", "{allocId:1, mayAlias:[a,b], notMayAlias:[rv2], mustAlias:[a,b], notMustAlias:[rv2]}") for variable b
	Allocation site $r0 = new benchmark.objects.A -> alias: [b, a], not alias: [rv2]

=========RESULTS FOR  basic.ReturnValue2========
GT:2,[a, b]
FN:0,[]
FP:0,[]
PTSGT:1
REPORTED:1
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.0 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.0 seconds.
[Spark] Solution found in 0.0 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("x", "{allocId:1, mayAlias:[x], notMayAlias:[a,b,y], mustAlias:[x], notMustAlias:[a,b,y]}") for variable x
	Allocation site $r1 = new benchmark.objects.B -> alias: [x], not alias: [y, b, a]

=========RESULTS FOR  basic.ReturnValue3========
GT:1,[x]
FN:0,[]
FP:0,[]
PTSGT:1
REPORTED:1
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.0 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.0 seconds.
[Spark] Solution found in 0.0 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("x", "{allocId:1, mayAlias:[x,y], notMayAlias:[a,b], mustAlias:[x,y], notMustAlias:[a,b]}") for variable x
	Allocation site $r2 = new benchmark.objects.B -> alias: [y, x], not alias: [a, b]

=========RESULTS FOR  basic.Method1========
GT:2,[x, y]
FN:0,[]
FP:0,[]
PTSGT:1
REPORTED:1
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.0 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.0 seconds.
[Spark] Solution found in 0.0 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("x", "{allocId:1, mayAlias:[x,y], notMayAlias:[a,b,m2], mustAlias:[x,y], notMustAlias:[a,b,m2]}") for variable x
	Allocation site $r2 = new benchmark.objects.B -> alias: [x, y], not alias: [b, a, m2]

=========RESULTS FOR  basic.Method2========
GT:2,[x, y]
FN:0,[]
FP:0,[]
PTSGT:1
REPORTED:1
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.0 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.0 seconds.
[Spark] Solution found in 0.0 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("a", "{allocId:1, mayAlias:[a], notMayAlias:[i,b], mustAlias:[a], notMustAlias:[i,b]},{allocId:2, mayAlias:[a,b], notMayAlias:[i], mustAlias:[a], notMustAlias:[i,b]}") for variable a
	Allocation site $r1 = new benchmark.objects.A -> alias: [b, a], not alias: [i]
	Allocation site $r0 = new benchmark.objects.A -> alias: [a], not alias: [b, i]

=========RESULTS FOR  basic.Branching1========
GT:2,[b, a]
FN:0,[]
FP:0,[]
PTSGT:2
REPORTED:2
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.0 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.0 seconds.
[Spark] Solution found in 0.0 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("n", "{allocId:1, mayAlias:[n], notMayAlias:[i,o,p,q], mustAlias:[n], notMustAlias:[i,o,p,q]}") for variable n
	Allocation site $r0 = new basic.Recursion1$N -> alias: [n], not alias: [o, q, p]

=========RESULTS FOR  basic.Recursion1========
GT:1,[n]
FN:0,[]
FP:0,[]
PTSGT:1
REPORTED:1
]]></system-out>

      <system-err><![CDATA[]]></system-err>

  </testsuite>
  <testsuite errors="0" failures="2" hostname="mac-spaeth.sit.fraunhofer.de" id="1" name="CollectionsTest" package="tests.dart" skipped="0" tests="4" time="9.948" timestamp="2015-06-16T11:57:03">
      <properties>
          <property name="java.vendor" value="Oracle Corporation" />

          <property name="sun.java.launcher" value="SUN_STANDARD" />

          <property name="eclipse.pdebuild.templates" value="/Applications/eclipse-luna/plugins/org.eclipse.pde.build_3.9.0.v20140415-2029/templates//" />

          <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers" />

          <property name="os.name" value="Mac OS X" />

          <property name="sun.boot.class.path" value="/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/resources.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/rt.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/sunrsasign.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/jsse.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/jce.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/charsets.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/jfr.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/classes" />

          <property name="java.vm.specification.vendor" value="Oracle Corporation" />

          <property name="ant.home" value="/Applications/eclipse-luna/plugins/org.apache.ant_1.9.2.v201404171502" />

          <property name="java.runtime.version" value="1.7.0_51-b13" />

          <property name="user.name" value="spaeth" />

          <property name="user.language" value="de" />

          <property name="sun.boot.library.path" value="/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib" />

          <property name="ant.project.default-target" value="compile" />

          <property name="ant.project.name" value="soot-infoflow" />

          <property name="java.version" value="1.7.0_51" />

          <property name="user.timezone" value="" />

          <property name="sun.arch.data.model" value="64" />

          <property name="http.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16" />

          <property name="java.endorsed.dirs" value="/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/endorsed" />

          <property name="sun.cpu.isalist" value="" />

          <property name="sun.jnu.encoding" value="UTF-8" />

          <property name="file.encoding.pkg" value="sun.io" />

          <property name="file.separator" value="/" />

          <property name="java.specification.name" value="Java Platform API Specification" />

          <property name="java.class.version" value="51.0" />

          <property name="user.country" value="DE" />

          <property name="java.home" value="/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre" />

          <property name="java.vm.info" value="mixed mode" />

          <property name="ant.file" value="/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/experiments.xml" />

          <property name="os.version" value="10.10.3" />

          <property name="path.separator" value=":" />

          <property name="java.vm.version" value="24.51-b03" />

          <property name="ant.file.soot-infoflow" value="/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/experiments.xml" />

          <property name="ant.library.dir" value="/Applications/eclipse-luna/plugins/org.apache.ant_1.9.2.v201404171502/lib" />

          <property name="java.awt.printerjob" value="sun.lwawt.macosx.CPrinterJob" />

          <property name="sun.io.unicode.encoding" value="UnicodeBig" />

          <property name="awt.toolkit" value="sun.lwawt.macosx.LWCToolkit" />

          <property name="socksNonProxyHosts" value="local|*.local|169.254/16|*.169.254/16" />

          <property name="ftp.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16" />

          <property name="eclipse.pdebuild.scripts" value="/Applications/eclipse-luna/plugins/org.eclipse.pde.build_3.9.0.v20140415-2029/scripts//" />

          <property name="user.home" value="/Users/spaeth" />

          <property name="java.specification.vendor" value="Oracle Corporation" />

          <property name="java.library.path" value="/Users/spaeth/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:." />

          <property name="java.vendor.url" value="http://java.oracle.com/" />

          <property name="java.vm.vendor" value="Oracle Corporation" />

          <property name="gopherProxySet" value="false" />

          <property name="java.runtime.name" value="Java(TM) SE Runtime Environment" />

          <property name="sun.java.command" value="org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner tests.dart.CollectionsTest filtertrace=true haltOnError=false haltOnFailure=false formatter=org.apache.tools.ant.taskdefs.optional.junit.OutErrSummaryJUnitResultFormatter showoutput=false outputtoformatters=true logfailedtests=true logtestlistenerevents=false formatter=org.apache.tools.ant.taskdefs.optional.junit.XMLJUnitResultFormatter,/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/reports/TEST-tests.dart.CollectionsTest.xml crashfile=/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/junitvmwatcher3474562818458283891.properties propsfile=/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/junit4248110137760603340.properties" />

          <property name="java.class.path" value="/Users/spaeth/Documents/workspace/builds/soot-trunk.jar:/Users/spaeth/Documents/workspace/builds/dart.jar:/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/bin:/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/lib/junit.jar:/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/lib/org.hamcrest.core_1.3.0.jar:/Applications/eclipse-luna/plugins/org.apache.ant_1.9.2.v201404171502/lib/ant-launcher.jar:/Applications/eclipse-luna/plugins/org.apache.ant_1.9.2.v201404171502/lib/ant.jar:/Applications/eclipse-luna/plugins/org.apache.ant_1.9.2.v201404171502/lib/ant-junit.jar:/Applications/eclipse-luna/plugins/org.apache.ant_1.9.2.v201404171502/lib/ant-junit4.jar" />

          <property name="ant.version" value="Apache Ant(TM) version 1.9.2 compiled on July 8 2013" />

          <property name="ant.file.type.soot-infoflow" value="file" />

          <property name="java.vm.specification.name" value="Java Virtual Machine Specification" />

          <property name="java.vm.specification.version" value="1.7" />

          <property name="sun.cpu.endian" value="little" />

          <property name="sun.os.patch.level" value="unknown" />

          <property name="eclipse.pdebuild.home" value="/Applications/eclipse-luna/plugins/org.eclipse.pde.build_3.9.0.v20140415-2029/.//" />

          <property name="java.io.tmpdir" value="/var/folders/61/20qsh7_j6_ncnywwtd50d_qm0000gp/T/" />

          <property name="java.vendor.url.bug" value="http://bugreport.sun.com/bugreport/" />

          <property name="os.arch" value="x86_64" />

          <property name="java.awt.graphicsenv" value="sun.awt.CGraphicsEnvironment" />

          <property name="java.ext.dirs" value="/Users/spaeth/Library/Java/Extensions:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/ext:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java" />

          <property name="user.dir" value="/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark" />

          <property name="dart.jar" value="/Users/spaeth/Documents/workspace/builds/dart.jar" />

          <property name="line.separator" value="&#xa;" />

          <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM" />

          <property name="soot.jar" value="/Users/spaeth/Documents/workspace/builds/soot-trunk.jar" />

          <property name="basedir" value="/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark" />

          <property name="ant.java.version" value="1.7" />

          <property name="ant.core.lib" value="/Applications/eclipse-luna/plugins/org.apache.ant_1.9.2.v201404171502/lib/ant.jar" />

          <property name="file.encoding" value="US-ASCII" />

          <property name="java.specification.version" value="1.7" />

          <property name="ant.project.invoked-targets" value="reporttests" />

      </properties>

      <testcase classname="tests.dart.CollectionsTest" name="array1" time="2.538">
          <failure message=" FP:[a] Reported number of allocation site: 2, expected: 1" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError:  FP:[a] Reported number of allocation site: 2, expected: 1
	at benchmark.internal.Evaluator.evaluateAlias(Evaluator.java:79)
	at tests.dart.DartExecutor.evaluate(DartExecutor.java:35)
	at benchmark.internal.Test$1.internalTransform(Test.java:45)
	at soot.SceneTransformer.transform(SceneTransformer.java:39)
	at soot.Transform.apply(Transform.java:90)
	at soot.ScenePack.internalApply(ScenePack.java:40)
	at soot.Pack.apply(Pack.java:116)
	at benchmark.internal.Test.getQueryForTest(Test.java:57)
	at benchmark.internal.Test.&lt;init&gt;(Test.java:30)
	at tests.dart.DartExecutor.&lt;init&gt;(DartExecutor.java:29)
	at tests.dart.CollectionsTest.array1(CollectionsTest.java:8)
</failure>

      </testcase>

      <testcase classname="tests.dart.CollectionsTest" name="array2" time="2.097" />

      <testcase classname="tests.dart.CollectionsTest" name="map1" time="4.331">
          <failure message="FN: [b, c]  Reported number of allocation site: 0, expected: 1" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: FN: [b, c]  Reported number of allocation site: 0, expected: 1
	at benchmark.internal.Evaluator.evaluateAlias(Evaluator.java:79)
	at tests.dart.DartExecutor.evaluate(DartExecutor.java:35)
	at benchmark.internal.Test$1.internalTransform(Test.java:45)
	at soot.SceneTransformer.transform(SceneTransformer.java:39)
	at soot.Transform.apply(Transform.java:90)
	at soot.ScenePack.internalApply(ScenePack.java:40)
	at soot.Pack.apply(Pack.java:116)
	at benchmark.internal.Test.getQueryForTest(Test.java:57)
	at benchmark.internal.Test.&lt;init&gt;(Test.java:30)
	at tests.dart.DartExecutor.&lt;init&gt;(DartExecutor.java:29)
	at tests.dart.CollectionsTest.map1(CollectionsTest.java:23)
</failure>

      </testcase>

      <testcase classname="tests.dart.CollectionsTest" name="list1" time="0.929" />

      <system-out><![CDATA[Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.2 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.0 seconds.
[Spark] Solution found in 0.0 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("c", "{allocId:1, mayAlias:[c,b], notMayAlias:[a,array], mustAlias:[c,b], notMustAlias:[a,array]}") for variable c
	Allocation site $r1 = new benchmark.objects.A -> alias: [c, b], not alias: [a, array]

=========RESULTS FOR  collections.Array1========
GT:2,[c, b]
FN:0,[]
FP:1,[a]
PTSGT:1
REPORTED:2
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.0 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.0 seconds.
[Spark] Solution found in 0.0 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("slice", "{allocId:1, mayAlias:[slice], notMayAlias:[a,b,array], mustAlias:[slice], notMustAlias:[a,b,array]}") for variable slice
	Allocation site array = newarray (benchmark.objects.A[])[0] -> alias: [slice], not alias: [b, a, array]

=========RESULTS FOR  collections.Array2========
GT:1,[slice]
FN:0,[]
FP:0,[]
PTSGT:1
REPORTED:1
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.0 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 2.8 seconds.
[Spark] Solution found in 2.8 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("c", "{allocId:1, mayAlias:[c,b], notMayAlias:[a,map], mustAlias:[c,b], notMustAlias:[a,map]}") for variable c
	Allocation site $r2 = new benchmark.objects.A -> alias: [b, c], not alias: [map, a]

=========RESULTS FOR  collections.Map1========
GT:2,[b, c]
FN:2,[b, c]
FP:0,[]
PTSGT:1
REPORTED:0
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.0 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.1 seconds.
[Spark] Solution found in 0.1 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b", "{allocId:1, mayAlias:[c,b], notMayAlias:[a,list], mustAlias:[c,b], notMustAlias:[a,list]}") for variable b
	Allocation site $r2 = new benchmark.objects.A -> alias: [b, c], not alias: [list, a]

=========RESULTS FOR  collections.List1========
GT:2,[b, c]
FN:0,[]
FP:0,[]
PTSGT:1
REPORTED:1
]]></system-out>

      <system-err><![CDATA[]]></system-err>

  </testsuite>
  <testsuite errors="0" failures="0" hostname="mac-spaeth.sit.fraunhofer.de" id="2" name="CornerCasesTest" package="tests.dart" skipped="0" tests="8" time="7.364" timestamp="2015-06-16T11:57:14">
      <properties>
          <property name="java.vendor" value="Oracle Corporation" />

          <property name="sun.java.launcher" value="SUN_STANDARD" />

          <property name="eclipse.pdebuild.templates" value="/Applications/eclipse-luna/plugins/org.eclipse.pde.build_3.9.0.v20140415-2029/templates//" />

          <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers" />

          <property name="os.name" value="Mac OS X" />

          <property name="sun.boot.class.path" value="/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/resources.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/rt.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/sunrsasign.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/jsse.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/jce.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/charsets.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/jfr.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/classes" />

          <property name="java.vm.specification.vendor" value="Oracle Corporation" />

          <property name="ant.home" value="/Applications/eclipse-luna/plugins/org.apache.ant_1.9.2.v201404171502" />

          <property name="java.runtime.version" value="1.7.0_51-b13" />

          <property name="user.name" value="spaeth" />

          <property name="user.language" value="de" />

          <property name="sun.boot.library.path" value="/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib" />

          <property name="ant.project.default-target" value="compile" />

          <property name="ant.project.name" value="soot-infoflow" />

          <property name="java.version" value="1.7.0_51" />

          <property name="user.timezone" value="" />

          <property name="sun.arch.data.model" value="64" />

          <property name="http.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16" />

          <property name="java.endorsed.dirs" value="/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/endorsed" />

          <property name="sun.cpu.isalist" value="" />

          <property name="sun.jnu.encoding" value="UTF-8" />

          <property name="file.encoding.pkg" value="sun.io" />

          <property name="file.separator" value="/" />

          <property name="java.specification.name" value="Java Platform API Specification" />

          <property name="java.class.version" value="51.0" />

          <property name="user.country" value="DE" />

          <property name="java.home" value="/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre" />

          <property name="java.vm.info" value="mixed mode" />

          <property name="ant.file" value="/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/experiments.xml" />

          <property name="os.version" value="10.10.3" />

          <property name="path.separator" value=":" />

          <property name="java.vm.version" value="24.51-b03" />

          <property name="ant.file.soot-infoflow" value="/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/experiments.xml" />

          <property name="ant.library.dir" value="/Applications/eclipse-luna/plugins/org.apache.ant_1.9.2.v201404171502/lib" />

          <property name="java.awt.printerjob" value="sun.lwawt.macosx.CPrinterJob" />

          <property name="sun.io.unicode.encoding" value="UnicodeBig" />

          <property name="awt.toolkit" value="sun.lwawt.macosx.LWCToolkit" />

          <property name="socksNonProxyHosts" value="local|*.local|169.254/16|*.169.254/16" />

          <property name="ftp.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16" />

          <property name="eclipse.pdebuild.scripts" value="/Applications/eclipse-luna/plugins/org.eclipse.pde.build_3.9.0.v20140415-2029/scripts//" />

          <property name="user.home" value="/Users/spaeth" />

          <property name="java.specification.vendor" value="Oracle Corporation" />

          <property name="java.library.path" value="/Users/spaeth/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:." />

          <property name="java.vendor.url" value="http://java.oracle.com/" />

          <property name="java.vm.vendor" value="Oracle Corporation" />

          <property name="gopherProxySet" value="false" />

          <property name="java.runtime.name" value="Java(TM) SE Runtime Environment" />

          <property name="sun.java.command" value="org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner tests.dart.CornerCasesTest filtertrace=true haltOnError=false haltOnFailure=false formatter=org.apache.tools.ant.taskdefs.optional.junit.OutErrSummaryJUnitResultFormatter showoutput=false outputtoformatters=true logfailedtests=true logtestlistenerevents=false formatter=org.apache.tools.ant.taskdefs.optional.junit.XMLJUnitResultFormatter,/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/reports/TEST-tests.dart.CornerCasesTest.xml crashfile=/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/junitvmwatcher4196434732650970322.properties propsfile=/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/junit5081372271426393068.properties" />

          <property name="java.class.path" value="/Users/spaeth/Documents/workspace/builds/soot-trunk.jar:/Users/spaeth/Documents/workspace/builds/dart.jar:/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/bin:/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/lib/junit.jar:/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/lib/org.hamcrest.core_1.3.0.jar:/Applications/eclipse-luna/plugins/org.apache.ant_1.9.2.v201404171502/lib/ant-launcher.jar:/Applications/eclipse-luna/plugins/org.apache.ant_1.9.2.v201404171502/lib/ant.jar:/Applications/eclipse-luna/plugins/org.apache.ant_1.9.2.v201404171502/lib/ant-junit.jar:/Applications/eclipse-luna/plugins/org.apache.ant_1.9.2.v201404171502/lib/ant-junit4.jar" />

          <property name="ant.version" value="Apache Ant(TM) version 1.9.2 compiled on July 8 2013" />

          <property name="ant.file.type.soot-infoflow" value="file" />

          <property name="java.vm.specification.name" value="Java Virtual Machine Specification" />

          <property name="java.vm.specification.version" value="1.7" />

          <property name="sun.cpu.endian" value="little" />

          <property name="sun.os.patch.level" value="unknown" />

          <property name="eclipse.pdebuild.home" value="/Applications/eclipse-luna/plugins/org.eclipse.pde.build_3.9.0.v20140415-2029/.//" />

          <property name="java.io.tmpdir" value="/var/folders/61/20qsh7_j6_ncnywwtd50d_qm0000gp/T/" />

          <property name="java.vendor.url.bug" value="http://bugreport.sun.com/bugreport/" />

          <property name="os.arch" value="x86_64" />

          <property name="java.awt.graphicsenv" value="sun.awt.CGraphicsEnvironment" />

          <property name="java.ext.dirs" value="/Users/spaeth/Library/Java/Extensions:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/ext:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java" />

          <property name="user.dir" value="/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark" />

          <property name="dart.jar" value="/Users/spaeth/Documents/workspace/builds/dart.jar" />

          <property name="line.separator" value="&#xa;" />

          <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM" />

          <property name="soot.jar" value="/Users/spaeth/Documents/workspace/builds/soot-trunk.jar" />

          <property name="basedir" value="/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark" />

          <property name="ant.java.version" value="1.7" />

          <property name="ant.core.lib" value="/Applications/eclipse-luna/plugins/org.apache.ant_1.9.2.v201404171502/lib/ant.jar" />

          <property name="file.encoding" value="US-ASCII" />

          <property name="java.specification.version" value="1.7" />

          <property name="ant.project.invoked-targets" value="reporttests" />

      </properties>

      <testcase classname="tests.dart.CornerCasesTest" name="contextSensitivty1" time="2.458" />

      <testcase classname="tests.dart.CornerCasesTest" name="contextSensitivty2" time="2.169" />

      <testcase classname="tests.dart.CornerCasesTest" name="contextSensitivty3" time="0.759" />

      <testcase classname="tests.dart.CornerCasesTest" name="flowSensitivty1" time="0.436" />

      <testcase classname="tests.dart.CornerCasesTest" name="strongUpdate1" time="0.352" />

      <testcase classname="tests.dart.CornerCasesTest" name="accessPath1" time="0.398" />

      <testcase classname="tests.dart.CornerCasesTest" name="objectSensitivty1" time="0.378" />

      <testcase classname="tests.dart.CornerCasesTest" name="objectSensitivty2" time="0.354" />

      <system-out><![CDATA[Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.1 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.0 seconds.
[Spark] Solution found in 0.0 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b", "{allocId:1, mayAlias:[a,b], notMayAlias:[], mustAlias:[a,b], notMustAlias:[]},{allocId:2, mayAlias:[a], notMayAlias:[b], mustAlias:[a], notMustAlias:[b]}") for variable b
	Allocation site $r1 = new benchmark.objects.A -> alias: [a], not alias: [b]
	Allocation site $r0 = new benchmark.objects.A -> alias: [a, b], not alias: []

=========RESULTS FOR  cornerCases.ContextSensitivity1========
GT:2,[a, b]
FN:0,[]
FP:0,[]
PTSGT:2
REPORTED:2
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.0 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.0 seconds.
[Spark] Solution found in 0.0 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b", "{allocId:1, mayAlias:[a,b], notMayAlias:[], mustAlias:[a,b], notMustAlias:[]},{allocId:2, mayAlias:[a], notMayAlias:[b], mustAlias:[a], notMustAlias:[b]}") for variable b
	Allocation site $r1 = new benchmark.objects.A -> alias: [a], not alias: [b]
	Allocation site $r0 = new benchmark.objects.A -> alias: [a, b], not alias: []

=========RESULTS FOR  cornerCases.ContextSensitivity2========
GT:2,[a, b]
FN:0,[]
FP:0,[]
PTSGT:2
REPORTED:2
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.0 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.0 seconds.
[Spark] Solution found in 0.0 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b", "{allocId:1, mayAlias:[a,b], notMayAlias:[], mustAlias:[a,b], notMustAlias:[]},{allocId:2, mayAlias:[a], notMayAlias:[b], mustAlias:[a], notMustAlias:[b]}") for variable b
	Allocation site $r1 = new benchmark.objects.A -> alias: [a], not alias: [b]
	Allocation site $r0 = new benchmark.objects.A -> alias: [b, a], not alias: []

=========RESULTS FOR  cornerCases.ContextSensitivity3========
GT:2,[b, a]
FN:0,[]
FP:0,[]
PTSGT:2
REPORTED:2
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.0 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.0 seconds.
[Spark] Solution found in 0.0 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b", "{allocId:1, mayAlias:[b], notMayAlias:[a], mustAlias:[b], notMustAlias:[a]}") for variable b
	Allocation site $r1 = new benchmark.objects.A -> alias: [b], not alias: [a]

=========RESULTS FOR  cornerCases.FlowSensitivity1========
GT:1,[b]
FN:0,[]
FP:0,[]
PTSGT:1
REPORTED:1
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.0 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.0 seconds.
[Spark] Solution found in 0.0 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("x", "{allocId:1, mayAlias:[x,y], notMayAlias:[a,b], mustAlias:[x,y], notMustAlias:[a,b]}") for variable x
	Allocation site $r1 = new benchmark.objects.B -> alias: [y, x], not alias: [a, b]

=========RESULTS FOR  cornerCases.StrongUpdate1========
GT:2,[y, x]
FN:0,[]
FP:0,[]
PTSGT:1
REPORTED:1
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.0 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.0 seconds.
[Spark] Solution found in 0.0 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("x", "{allocId:1, mayAlias:[x,y], notMayAlias:[a,b], mustAlias:[a.f,b.f], notMustAlias:[a,b]}") for variable x
	Allocation site $r0 = new benchmark.objects.A -> alias: [y, x], not alias: [b, a]

=========RESULTS FOR  cornerCases.AccessPath1========
GT:2,[x, y]
FN:0,[]
FP:0,[]
PTSGT:1
REPORTED:1
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.0 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.0 seconds.
[Spark] Solution found in 0.0 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b4", "{allocId:1, mayAlias:[b4,b2], notMayAlias:[a1,a2,b1,b3], mustAlias:[b4,b2], notMustAlias:[a1,a2,b1,b3]}") for variable b4
	Allocation site $r1 = new benchmark.objects.B -> alias: [b2, b4], not alias: [a2, a1, b1, b3]

=========RESULTS FOR  cornerCases.ObjectSensitivity1========
GT:2,[b2, b4]
FN:0,[]
FP:0,[]
PTSGT:1
REPORTED:1
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.0 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.0 seconds.
[Spark] Solution found in 0.0 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b4", "{allocId:1, mayAlias:[b4,b2], notMayAlias:[a,b1,b3], mustAlias:[b4,b2], notMustAlias:[a,b1,b3]}") for variable b4
	Allocation site $r1 = new benchmark.objects.B -> alias: [b4, b2], not alias: [b1, b3, a]

=========RESULTS FOR  cornerCases.ObjectSensitivity2========
GT:2,[b2, b4]
FN:0,[]
FP:0,[]
PTSGT:1
REPORTED:1
]]></system-out>

      <system-err><![CDATA[]]></system-err>

  </testsuite>
  <testsuite errors="0" failures="1" hostname="mac-spaeth.sit.fraunhofer.de" id="3" name="GeneralJavaTest" package="tests.dart" skipped="0" tests="8" time="8.042" timestamp="2015-06-16T11:57:22">
      <properties>
          <property name="java.vendor" value="Oracle Corporation" />

          <property name="sun.java.launcher" value="SUN_STANDARD" />

          <property name="eclipse.pdebuild.templates" value="/Applications/eclipse-luna/plugins/org.eclipse.pde.build_3.9.0.v20140415-2029/templates//" />

          <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers" />

          <property name="os.name" value="Mac OS X" />

          <property name="sun.boot.class.path" value="/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/resources.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/rt.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/sunrsasign.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/jsse.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/jce.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/charsets.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/jfr.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/classes" />

          <property name="java.vm.specification.vendor" value="Oracle Corporation" />

          <property name="ant.home" value="/Applications/eclipse-luna/plugins/org.apache.ant_1.9.2.v201404171502" />

          <property name="java.runtime.version" value="1.7.0_51-b13" />

          <property name="user.name" value="spaeth" />

          <property name="user.language" value="de" />

          <property name="sun.boot.library.path" value="/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib" />

          <property name="ant.project.default-target" value="compile" />

          <property name="ant.project.name" value="soot-infoflow" />

          <property name="java.version" value="1.7.0_51" />

          <property name="user.timezone" value="" />

          <property name="sun.arch.data.model" value="64" />

          <property name="http.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16" />

          <property name="java.endorsed.dirs" value="/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/endorsed" />

          <property name="sun.cpu.isalist" value="" />

          <property name="sun.jnu.encoding" value="UTF-8" />

          <property name="file.encoding.pkg" value="sun.io" />

          <property name="file.separator" value="/" />

          <property name="java.specification.name" value="Java Platform API Specification" />

          <property name="java.class.version" value="51.0" />

          <property name="user.country" value="DE" />

          <property name="java.home" value="/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre" />

          <property name="java.vm.info" value="mixed mode" />

          <property name="ant.file" value="/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/experiments.xml" />

          <property name="os.version" value="10.10.3" />

          <property name="path.separator" value=":" />

          <property name="java.vm.version" value="24.51-b03" />

          <property name="ant.file.soot-infoflow" value="/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/experiments.xml" />

          <property name="ant.library.dir" value="/Applications/eclipse-luna/plugins/org.apache.ant_1.9.2.v201404171502/lib" />

          <property name="java.awt.printerjob" value="sun.lwawt.macosx.CPrinterJob" />

          <property name="sun.io.unicode.encoding" value="UnicodeBig" />

          <property name="awt.toolkit" value="sun.lwawt.macosx.LWCToolkit" />

          <property name="socksNonProxyHosts" value="local|*.local|169.254/16|*.169.254/16" />

          <property name="ftp.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16" />

          <property name="eclipse.pdebuild.scripts" value="/Applications/eclipse-luna/plugins/org.eclipse.pde.build_3.9.0.v20140415-2029/scripts//" />

          <property name="user.home" value="/Users/spaeth" />

          <property name="java.specification.vendor" value="Oracle Corporation" />

          <property name="java.library.path" value="/Users/spaeth/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:." />

          <property name="java.vendor.url" value="http://java.oracle.com/" />

          <property name="java.vm.vendor" value="Oracle Corporation" />

          <property name="gopherProxySet" value="false" />

          <property name="java.runtime.name" value="Java(TM) SE Runtime Environment" />

          <property name="sun.java.command" value="org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner tests.dart.GeneralJavaTest filtertrace=true haltOnError=false haltOnFailure=false formatter=org.apache.tools.ant.taskdefs.optional.junit.OutErrSummaryJUnitResultFormatter showoutput=false outputtoformatters=true logfailedtests=true logtestlistenerevents=false formatter=org.apache.tools.ant.taskdefs.optional.junit.XMLJUnitResultFormatter,/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/reports/TEST-tests.dart.GeneralJavaTest.xml crashfile=/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/junitvmwatcher8172982197180840255.properties propsfile=/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/junit1876427877669950951.properties" />

          <property name="java.class.path" value="/Users/spaeth/Documents/workspace/builds/soot-trunk.jar:/Users/spaeth/Documents/workspace/builds/dart.jar:/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/bin:/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/lib/junit.jar:/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/lib/org.hamcrest.core_1.3.0.jar:/Applications/eclipse-luna/plugins/org.apache.ant_1.9.2.v201404171502/lib/ant-launcher.jar:/Applications/eclipse-luna/plugins/org.apache.ant_1.9.2.v201404171502/lib/ant.jar:/Applications/eclipse-luna/plugins/org.apache.ant_1.9.2.v201404171502/lib/ant-junit.jar:/Applications/eclipse-luna/plugins/org.apache.ant_1.9.2.v201404171502/lib/ant-junit4.jar" />

          <property name="ant.version" value="Apache Ant(TM) version 1.9.2 compiled on July 8 2013" />

          <property name="ant.file.type.soot-infoflow" value="file" />

          <property name="java.vm.specification.name" value="Java Virtual Machine Specification" />

          <property name="java.vm.specification.version" value="1.7" />

          <property name="sun.cpu.endian" value="little" />

          <property name="sun.os.patch.level" value="unknown" />

          <property name="eclipse.pdebuild.home" value="/Applications/eclipse-luna/plugins/org.eclipse.pde.build_3.9.0.v20140415-2029/.//" />

          <property name="java.io.tmpdir" value="/var/folders/61/20qsh7_j6_ncnywwtd50d_qm0000gp/T/" />

          <property name="java.vendor.url.bug" value="http://bugreport.sun.com/bugreport/" />

          <property name="os.arch" value="x86_64" />

          <property name="java.awt.graphicsenv" value="sun.awt.CGraphicsEnvironment" />

          <property name="java.ext.dirs" value="/Users/spaeth/Library/Java/Extensions:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/ext:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java" />

          <property name="user.dir" value="/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark" />

          <property name="dart.jar" value="/Users/spaeth/Documents/workspace/builds/dart.jar" />

          <property name="line.separator" value="&#xa;" />

          <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM" />

          <property name="soot.jar" value="/Users/spaeth/Documents/workspace/builds/soot-trunk.jar" />

          <property name="basedir" value="/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark" />

          <property name="ant.java.version" value="1.7" />

          <property name="ant.core.lib" value="/Applications/eclipse-luna/plugins/org.apache.ant_1.9.2.v201404171502/lib/ant.jar" />

          <property name="file.encoding" value="US-ASCII" />

          <property name="java.specification.version" value="1.7" />

          <property name="ant.project.invoked-targets" value="reporttests" />

      </properties>

      <testcase classname="tests.dart.GeneralJavaTest" name="interface1" time="2.65" />

      <testcase classname="tests.dart.GeneralJavaTest" name="exception1" time="2.661" />

      <testcase classname="tests.dart.GeneralJavaTest" name="exception2" time="0.634">
          <failure message="Statement null not in unit-to-owner mapping" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: Statement null not in unit-to-owner mapping
	at soot.jimple.toolkits.ide.icfg.AbstractJimpleBasedICFG.getMethodOf(AbstractJimpleBasedICFG.java:68)
	at soot.jimple.toolkits.ide.icfg.AbstractJimpleBasedICFG.getMethodOf(AbstractJimpleBasedICFG.java:29)
	at soot.jimple.infoflow.solver.cfg.InfoflowCFG.getMethodOf(InfoflowCFG.java:127)
	at soot.jimple.infoflow.solver.cfg.InfoflowCFG.getMethodOf(InfoflowCFG.java:1)
	at soot.jimple.toolkits.ide.icfg.BackwardsInterproceduralCFG.getMethodOf(BackwardsInterproceduralCFG.java:106)
	at soot.jimple.toolkits.ide.icfg.BackwardsInterproceduralCFG.getMethodOf(BackwardsInterproceduralCFG.java:35)
	at soot.jimple.infoflow.solver.cfg.InfoflowCFG.getMethodOf(InfoflowCFG.java:127)
	at soot.jimple.infoflow.solver.cfg.InfoflowCFG.getMethodOf(InfoflowCFG.java:1)
	at dart.AliasFinder.validateInput(AliasFinder.java:179)
	at dart.AliasFinder.findAliasAtStmt(AliasFinder.java:79)
	at dart.AliasFinder.findAliasAtStmt(AliasFinder.java:75)
	at tests.dart.DartEvaluator.getPointsToSize(DartEvaluator.java:60)
	at benchmark.internal.Evaluator.evaluateAlias(Evaluator.java:69)
	at tests.dart.DartExecutor.evaluate(DartExecutor.java:35)
	at benchmark.internal.Test$1.internalTransform(Test.java:45)
	at soot.SceneTransformer.transform(SceneTransformer.java:39)
	at soot.Transform.apply(Transform.java:90)
	at soot.ScenePack.internalApply(ScenePack.java:40)
	at soot.Pack.apply(Pack.java:116)
	at benchmark.internal.Test.getQueryForTest(Test.java:57)
	at benchmark.internal.Test.&lt;init&gt;(Test.java:30)
	at tests.dart.DartExecutor.&lt;init&gt;(DartExecutor.java:29)
	at tests.dart.GeneralJavaTest.exception2(GeneralJavaTest.java:12)
</failure>

      </testcase>

      <testcase classname="tests.dart.GeneralJavaTest" name="null1" time="0.463" />

      <testcase classname="tests.dart.GeneralJavaTest" name="null2" time="0.37" />

      <testcase classname="tests.dart.GeneralJavaTest" name="staticVariables1" time="0.406" />

      <testcase classname="tests.dart.GeneralJavaTest" name="outerClass1" time="0.402" />

      <testcase classname="tests.dart.GeneralJavaTest" name="superClass1" time="0.408" />

      <system-out><![CDATA[Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.2 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.0 seconds.
[Spark] Solution found in 0.0 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("c", "{allocId:1, mayAlias:[c,b], notMayAlias:[a,g,h], mustAlias:[c,b], notMustAlias:[a,g,h]}") for variable c
	Allocation site $r1 = new benchmark.objects.A -> alias: [c, b], not alias: [a, h, g]

=========RESULTS FOR  generalJava.Interface1========
GT:2,[c, b]
FN:0,[]
FP:0,[]
PTSGT:1
REPORTED:1
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.1 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.4 seconds.
[Spark] Solution found in 0.4 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b", "{allocId:1, mayAlias:[a,b], notMayAlias:[], mustAlias:[a,b], notMustAlias:[]}") for variable b
	Allocation site $r0 = new benchmark.objects.A -> alias: [b, a], not alias: []

=========RESULTS FOR  generalJava.Exception1========
GT:2,[b, a]
FN:0,[]
FP:0,[]
PTSGT:1
REPORTED:1
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.0 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.0 seconds.
[Spark] Solution found in 0.0 seconds.
Query at stmt null for variable null
	Allocation site $r1 = new benchmark.objects.A -> alias: [], not alias: []

Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.0 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.0 seconds.
[Spark] Solution found in 0.0 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b", "{NULLALLOC, mayAlias:[], notMayAlias:[b,a], mustAlias:[b,a], notMustAlias:[i]}") for variable b
	Allocation site null -> alias: [], not alias: [a, b]

=========RESULTS FOR  generalJava.Null1========
GT:0,[]
FN:0,[]
FP:0,[]
PTSGT:0
REPORTED:0
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.0 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.0 seconds.
[Spark] Solution found in 0.0 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("x", "{NULLALLOC, mayAlias:[], notMayAlias:[b,a], mustAlias:[b,a], notMustAlias:[i]}") for variable x
	Allocation site null -> alias: [], not alias: [a, b]

=========RESULTS FOR  generalJava.Null2========
GT:0,[]
FN:0,[]
FP:0,[]
PTSGT:0
REPORTED:0
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.0 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.0 seconds.
[Spark] Solution found in 0.0 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b", "{allocId:1, mayAlias:[b,a], notMayAlias:[], mustAlias:[b,a], notMustAlias:[]}") for variable b
	Allocation site $r0 = new benchmark.objects.A -> alias: [b], not alias: []

=========RESULTS FOR  generalJava.StaticVariables1========
GT:1,[b]
FN:0,[]
FP:0,[]
PTSGT:1
REPORTED:1
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.0 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.0 seconds.
[Spark] Solution found in 0.0 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("h", "{allocId:1, mayAlias:[b,b], notMayAlias:[i,a], mustAlias:[b,a], notMustAlias:[i]}") for variable h
	Allocation site $r0 = new benchmark.objects.A -> alias: [b], not alias: [a, i]

=========RESULTS FOR  generalJava.OuterClass1========
GT:1,[b]
FN:0,[]
FP:0,[]
PTSGT:1
REPORTED:1
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.0 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.0 seconds.
[Spark] Solution found in 0.0 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("h", "{allocId:1, mayAlias:[b], notMayAlias:[a,p], mustAlias:[b,a], notMustAlias:[p]}") for variable h
	Allocation site $r0 = new benchmark.objects.A -> alias: [b], not alias: [p, a]

=========RESULTS FOR  generalJava.SuperClass1========
GT:1,[b]
FN:0,[]
FP:0,[]
PTSGT:1
REPORTED:1
]]></system-out>

      <system-err><![CDATA[]]></system-err>

  </testsuite>
  <testsuite errors="0" failures="3" hostname="mac-spaeth.sit.fraunhofer.de" id="4" name="BasicTest" package="tests.manu" skipped="0" tests="11" time="7.633" timestamp="2015-06-16T11:57:31">
      <properties>
          <property name="java.vendor" value="Oracle Corporation" />

          <property name="sun.java.launcher" value="SUN_STANDARD" />

          <property name="eclipse.pdebuild.templates" value="/Applications/eclipse-luna/plugins/org.eclipse.pde.build_3.9.0.v20140415-2029/templates//" />

          <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers" />

          <property name="os.name" value="Mac OS X" />

          <property name="sun.boot.class.path" value="/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/resources.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/rt.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/sunrsasign.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/jsse.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/jce.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/charsets.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/jfr.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/classes" />

          <property name="java.vm.specification.vendor" value="Oracle Corporation" />

          <property name="ant.home" value="/Applications/eclipse-luna/plugins/org.apache.ant_1.9.2.v201404171502" />

          <property name="java.runtime.version" value="1.7.0_51-b13" />

          <property name="user.name" value="spaeth" />

          <property name="user.language" value="de" />

          <property name="sun.boot.library.path" value="/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib" />

          <property name="ant.project.default-target" value="compile" />

          <property name="ant.project.name" value="soot-infoflow" />

          <property name="java.version" value="1.7.0_51" />

          <property name="user.timezone" value="" />

          <property name="sun.arch.data.model" value="64" />

          <property name="http.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16" />

          <property name="java.endorsed.dirs" value="/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/endorsed" />

          <property name="sun.cpu.isalist" value="" />

          <property name="sun.jnu.encoding" value="UTF-8" />

          <property name="file.encoding.pkg" value="sun.io" />

          <property name="file.separator" value="/" />

          <property name="java.specification.name" value="Java Platform API Specification" />

          <property name="java.class.version" value="51.0" />

          <property name="user.country" value="DE" />

          <property name="java.home" value="/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre" />

          <property name="java.vm.info" value="mixed mode" />

          <property name="ant.file" value="/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/experiments.xml" />

          <property name="os.version" value="10.10.3" />

          <property name="path.separator" value=":" />

          <property name="java.vm.version" value="24.51-b03" />

          <property name="ant.file.soot-infoflow" value="/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/experiments.xml" />

          <property name="ant.library.dir" value="/Applications/eclipse-luna/plugins/org.apache.ant_1.9.2.v201404171502/lib" />

          <property name="java.awt.printerjob" value="sun.lwawt.macosx.CPrinterJob" />

          <property name="sun.io.unicode.encoding" value="UnicodeBig" />

          <property name="awt.toolkit" value="sun.lwawt.macosx.LWCToolkit" />

          <property name="socksNonProxyHosts" value="local|*.local|169.254/16|*.169.254/16" />

          <property name="ftp.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16" />

          <property name="eclipse.pdebuild.scripts" value="/Applications/eclipse-luna/plugins/org.eclipse.pde.build_3.9.0.v20140415-2029/scripts//" />

          <property name="user.home" value="/Users/spaeth" />

          <property name="java.specification.vendor" value="Oracle Corporation" />

          <property name="java.library.path" value="/Users/spaeth/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:." />

          <property name="java.vendor.url" value="http://java.oracle.com/" />

          <property name="java.vm.vendor" value="Oracle Corporation" />

          <property name="gopherProxySet" value="false" />

          <property name="java.runtime.name" value="Java(TM) SE Runtime Environment" />

          <property name="sun.java.command" value="org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner tests.manu.BasicTest filtertrace=true haltOnError=false haltOnFailure=false formatter=org.apache.tools.ant.taskdefs.optional.junit.OutErrSummaryJUnitResultFormatter showoutput=false outputtoformatters=true logfailedtests=true logtestlistenerevents=false formatter=org.apache.tools.ant.taskdefs.optional.junit.XMLJUnitResultFormatter,/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/reports/TEST-tests.manu.BasicTest.xml crashfile=/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/junitvmwatcher5829777335262434681.properties propsfile=/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/junit1272343484873580941.properties" />

          <property name="java.class.path" value="/Users/spaeth/Documents/workspace/builds/soot-trunk.jar:/Users/spaeth/Documents/workspace/builds/dart.jar:/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/bin:/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/lib/junit.jar:/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/lib/org.hamcrest.core_1.3.0.jar:/Applications/eclipse-luna/plugins/org.apache.ant_1.9.2.v201404171502/lib/ant-launcher.jar:/Applications/eclipse-luna/plugins/org.apache.ant_1.9.2.v201404171502/lib/ant.jar:/Applications/eclipse-luna/plugins/org.apache.ant_1.9.2.v201404171502/lib/ant-junit.jar:/Applications/eclipse-luna/plugins/org.apache.ant_1.9.2.v201404171502/lib/ant-junit4.jar" />

          <property name="ant.version" value="Apache Ant(TM) version 1.9.2 compiled on July 8 2013" />

          <property name="ant.file.type.soot-infoflow" value="file" />

          <property name="java.vm.specification.name" value="Java Virtual Machine Specification" />

          <property name="java.vm.specification.version" value="1.7" />

          <property name="sun.cpu.endian" value="little" />

          <property name="sun.os.patch.level" value="unknown" />

          <property name="eclipse.pdebuild.home" value="/Applications/eclipse-luna/plugins/org.eclipse.pde.build_3.9.0.v20140415-2029/.//" />

          <property name="java.io.tmpdir" value="/var/folders/61/20qsh7_j6_ncnywwtd50d_qm0000gp/T/" />

          <property name="java.vendor.url.bug" value="http://bugreport.sun.com/bugreport/" />

          <property name="os.arch" value="x86_64" />

          <property name="java.awt.graphicsenv" value="sun.awt.CGraphicsEnvironment" />

          <property name="java.ext.dirs" value="/Users/spaeth/Library/Java/Extensions:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/ext:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java" />

          <property name="user.dir" value="/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark" />

          <property name="dart.jar" value="/Users/spaeth/Documents/workspace/builds/dart.jar" />

          <property name="line.separator" value="&#xa;" />

          <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM" />

          <property name="soot.jar" value="/Users/spaeth/Documents/workspace/builds/soot-trunk.jar" />

          <property name="basedir" value="/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark" />

          <property name="ant.java.version" value="1.7" />

          <property name="ant.core.lib" value="/Applications/eclipse-luna/plugins/org.apache.ant_1.9.2.v201404171502/lib/ant.jar" />

          <property name="file.encoding" value="US-ASCII" />

          <property name="java.specification.version" value="1.7" />

          <property name="ant.project.invoked-targets" value="reporttests" />

      </properties>

      <testcase classname="tests.manu.BasicTest" name="simpleAlias1" time="2.415" />

      <testcase classname="tests.manu.BasicTest" name="loops1" time="1.949" />

      <testcase classname="tests.manu.BasicTest" name="parameter1" time="0.503" />

      <testcase classname="tests.manu.BasicTest" name="parameter2" time="0.36" />

      <testcase classname="tests.manu.BasicTest" name="returnValue1" time="0.358" />

      <testcase classname="tests.manu.BasicTest" name="returnValue2" time="0.391" />

      <testcase classname="tests.manu.BasicTest" name="returnValue3" time="0.36">
          <failure message="  Reported number of allocation site: 2, expected: 1" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError:   Reported number of allocation site: 2, expected: 1
	at benchmark.internal.Evaluator.evaluateAlias(Evaluator.java:79)
	at tests.manu.ManuExecutor.evaluate(ManuExecutor.java:36)
	at benchmark.internal.Test$1.internalTransform(Test.java:45)
	at soot.SceneTransformer.transform(SceneTransformer.java:39)
	at soot.Transform.apply(Transform.java:90)
	at soot.ScenePack.internalApply(ScenePack.java:40)
	at soot.Pack.apply(Pack.java:116)
	at benchmark.internal.Test.getQueryForTest(Test.java:57)
	at benchmark.internal.Test.&lt;init&gt;(Test.java:30)
	at tests.manu.ManuExecutor.&lt;init&gt;(ManuExecutor.java:30)
	at tests.manu.BasicTest.returnValue3(BasicTest.java:45)
</failure>

      </testcase>

      <testcase classname="tests.manu.BasicTest" name="method1" time="0.352">
          <failure message="  Reported number of allocation site: 3, expected: 1" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError:   Reported number of allocation site: 3, expected: 1
	at benchmark.internal.Evaluator.evaluateAlias(Evaluator.java:79)
	at tests.manu.ManuExecutor.evaluate(ManuExecutor.java:36)
	at benchmark.internal.Test$1.internalTransform(Test.java:45)
	at soot.SceneTransformer.transform(SceneTransformer.java:39)
	at soot.Transform.apply(Transform.java:90)
	at soot.ScenePack.internalApply(ScenePack.java:40)
	at soot.Pack.apply(Pack.java:116)
	at benchmark.internal.Test.getQueryForTest(Test.java:57)
	at benchmark.internal.Test.&lt;init&gt;(Test.java:30)
	at tests.manu.ManuExecutor.&lt;init&gt;(ManuExecutor.java:30)
	at tests.manu.BasicTest.method1(BasicTest.java:17)
</failure>

      </testcase>

      <testcase classname="tests.manu.BasicTest" name="method2" time="0.305">
          <failure message="  Reported number of allocation site: 3, expected: 1" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError:   Reported number of allocation site: 3, expected: 1
	at benchmark.internal.Evaluator.evaluateAlias(Evaluator.java:79)
	at tests.manu.ManuExecutor.evaluate(ManuExecutor.java:36)
	at benchmark.internal.Test$1.internalTransform(Test.java:45)
	at soot.SceneTransformer.transform(SceneTransformer.java:39)
	at soot.Transform.apply(Transform.java:90)
	at soot.ScenePack.internalApply(ScenePack.java:40)
	at soot.Pack.apply(Pack.java:116)
	at benchmark.internal.Test.getQueryForTest(Test.java:57)
	at benchmark.internal.Test.&lt;init&gt;(Test.java:30)
	at tests.manu.ManuExecutor.&lt;init&gt;(ManuExecutor.java:30)
	at tests.manu.BasicTest.method2(BasicTest.java:21)
</failure>

      </testcase>

      <testcase classname="tests.manu.BasicTest" name="branching1" time="0.298" />

      <testcase classname="tests.manu.BasicTest" name="recursion1" time="0.271" />

      <system-out><![CDATA[Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.2 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.0 seconds.
[Spark] Solution found in 0.0 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b", "{allocId:1, mayAlias:[a,b], notMayAlias:[], mustAlias:[a,b], notMustAlias:[]}") for variable b
	Allocation site $r0 = new benchmark.objects.A -> alias: [b, a], not alias: []

=========RESULTS FOR  basic.SimpleAlias1========
GT:2,[b, a]
FN:0,[]
FP:0,[]
PTSGT:1
REPORTED:1
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.0 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.0 seconds.
[Spark] Solution found in 0.0 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("node", "{allocId:1, mayAlias:[node], notMayAlias:[i,o,p,q], mustAlias:[node], notMustAlias:[i,o,p,q]}") for variable node
	Allocation site $r0 = new basic.Loops1$N -> alias: [node], not alias: [p, o, i, q]

=========RESULTS FOR  basic.Loops1========
GT:1,[node]
FN:0,[]
FP:0,[]
PTSGT:1
REPORTED:1
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.0 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.0 seconds.
[Spark] Solution found in 0.0 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b", "{allocId:1, mayAlias:[b,x], notMayAlias:[], mustAlias:[b,x], notMustAlias:[]}") for variable b
	Allocation site $r0 = new benchmark.objects.A -> alias: [x, b], not alias: []

=========RESULTS FOR  basic.Parameter1========
GT:2,[x, b]
FN:0,[]
FP:0,[]
PTSGT:1
REPORTED:1
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.0 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.0 seconds.
[Spark] Solution found in 0.0 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b", "{allocId:1, mayAlias:[b,x], notMayAlias:[], mustAlias:[b,x], notMustAlias:[]}") for variable b
	Allocation site $r0 = new benchmark.objects.A -> alias: [b, x], not alias: []

=========RESULTS FOR  basic.Parameter2========
GT:2,[x, b]
FN:0,[]
FP:0,[]
PTSGT:1
REPORTED:1
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.0 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.0 seconds.
[Spark] Solution found in 0.0 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b", "{allocId:1, mayAlias:[a,b], notMayAlias:[], mustAlias:[a,b], notMustAlias:[]}") for variable b
	Allocation site $r0 = new benchmark.objects.A -> alias: [b, a], not alias: []

=========RESULTS FOR  basic.ReturnValue1========
GT:2,[b, a]
FN:0,[]
FP:0,[]
PTSGT:1
REPORTED:1
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.0 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.0 seconds.
[Spark] Solution found in 0.0 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b", "{allocId:1, mayAlias:[a,b], notMayAlias:[rv2], mustAlias:[a,b], notMustAlias:[rv2]}") for variable b
	Allocation site $r0 = new benchmark.objects.A -> alias: [a, b], not alias: [rv2]

=========RESULTS FOR  basic.ReturnValue2========
GT:2,[a, b]
FN:0,[]
FP:0,[]
PTSGT:1
REPORTED:1
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.0 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.0 seconds.
[Spark] Solution found in 0.0 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("x", "{allocId:1, mayAlias:[x], notMayAlias:[a,b,y], mustAlias:[x], notMustAlias:[a,b,y]}") for variable x
	Allocation site $r1 = new benchmark.objects.B -> alias: [x], not alias: [y, b, a]

=========RESULTS FOR  basic.ReturnValue3========
GT:1,[x]
FN:0,[]
FP:0,[]
PTSGT:1
REPORTED:2
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.0 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.0 seconds.
[Spark] Solution found in 0.0 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("x", "{allocId:1, mayAlias:[x,y], notMayAlias:[a,b], mustAlias:[x,y], notMustAlias:[a,b]}") for variable x
	Allocation site $r2 = new benchmark.objects.B -> alias: [y, x], not alias: [b, a]

=========RESULTS FOR  basic.Method1========
GT:2,[y, x]
FN:0,[]
FP:0,[]
PTSGT:1
REPORTED:3
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.0 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.0 seconds.
[Spark] Solution found in 0.0 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("x", "{allocId:1, mayAlias:[x,y], notMayAlias:[a,b,m2], mustAlias:[x,y], notMustAlias:[a,b,m2]}") for variable x
	Allocation site $r2 = new benchmark.objects.B -> alias: [x, y], not alias: [m2, a, b]

=========RESULTS FOR  basic.Method2========
GT:2,[x, y]
FN:0,[]
FP:0,[]
PTSGT:1
REPORTED:3
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.0 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.0 seconds.
[Spark] Solution found in 0.0 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("a", "{allocId:1, mayAlias:[a], notMayAlias:[i,b], mustAlias:[a], notMustAlias:[i,b]},{allocId:2, mayAlias:[a,b], notMayAlias:[i], mustAlias:[a], notMustAlias:[i,b]}") for variable a
	Allocation site $r1 = new benchmark.objects.A -> alias: [b, a], not alias: [i]
	Allocation site $r0 = new benchmark.objects.A -> alias: [a], not alias: [i, b]

=========RESULTS FOR  basic.Branching1========
GT:2,[b, a]
FN:0,[]
FP:0,[]
PTSGT:2
REPORTED:2
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.0 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.0 seconds.
[Spark] Solution found in 0.0 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("n", "{allocId:1, mayAlias:[n], notMayAlias:[i,o,p,q], mustAlias:[n], notMustAlias:[i,o,p,q]}") for variable n
	Allocation site $r0 = new basic.Recursion1$N -> alias: [n], not alias: [o, p, q]

=========RESULTS FOR  basic.Recursion1========
GT:1,[n]
FN:0,[]
FP:0,[]
PTSGT:1
REPORTED:1
]]></system-out>

      <system-err><![CDATA[]]></system-err>

  </testsuite>
  <testsuite errors="0" failures="3" hostname="mac-spaeth.sit.fraunhofer.de" id="5" name="CollectionsTest" package="tests.manu" skipped="0" tests="4" time="13.305" timestamp="2015-06-16T11:57:39">
      <properties>
          <property name="java.vendor" value="Oracle Corporation" />

          <property name="sun.java.launcher" value="SUN_STANDARD" />

          <property name="eclipse.pdebuild.templates" value="/Applications/eclipse-luna/plugins/org.eclipse.pde.build_3.9.0.v20140415-2029/templates//" />

          <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers" />

          <property name="os.name" value="Mac OS X" />

          <property name="sun.boot.class.path" value="/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/resources.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/rt.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/sunrsasign.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/jsse.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/jce.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/charsets.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/jfr.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/classes" />

          <property name="java.vm.specification.vendor" value="Oracle Corporation" />

          <property name="ant.home" value="/Applications/eclipse-luna/plugins/org.apache.ant_1.9.2.v201404171502" />

          <property name="java.runtime.version" value="1.7.0_51-b13" />

          <property name="user.name" value="spaeth" />

          <property name="user.language" value="de" />

          <property name="sun.boot.library.path" value="/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib" />

          <property name="ant.project.default-target" value="compile" />

          <property name="ant.project.name" value="soot-infoflow" />

          <property name="java.version" value="1.7.0_51" />

          <property name="user.timezone" value="" />

          <property name="sun.arch.data.model" value="64" />

          <property name="http.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16" />

          <property name="java.endorsed.dirs" value="/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/endorsed" />

          <property name="sun.cpu.isalist" value="" />

          <property name="sun.jnu.encoding" value="UTF-8" />

          <property name="file.encoding.pkg" value="sun.io" />

          <property name="file.separator" value="/" />

          <property name="java.specification.name" value="Java Platform API Specification" />

          <property name="java.class.version" value="51.0" />

          <property name="user.country" value="DE" />

          <property name="java.home" value="/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre" />

          <property name="java.vm.info" value="mixed mode" />

          <property name="ant.file" value="/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/experiments.xml" />

          <property name="os.version" value="10.10.3" />

          <property name="path.separator" value=":" />

          <property name="java.vm.version" value="24.51-b03" />

          <property name="ant.file.soot-infoflow" value="/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/experiments.xml" />

          <property name="ant.library.dir" value="/Applications/eclipse-luna/plugins/org.apache.ant_1.9.2.v201404171502/lib" />

          <property name="java.awt.printerjob" value="sun.lwawt.macosx.CPrinterJob" />

          <property name="sun.io.unicode.encoding" value="UnicodeBig" />

          <property name="awt.toolkit" value="sun.lwawt.macosx.LWCToolkit" />

          <property name="socksNonProxyHosts" value="local|*.local|169.254/16|*.169.254/16" />

          <property name="ftp.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16" />

          <property name="eclipse.pdebuild.scripts" value="/Applications/eclipse-luna/plugins/org.eclipse.pde.build_3.9.0.v20140415-2029/scripts//" />

          <property name="user.home" value="/Users/spaeth" />

          <property name="java.specification.vendor" value="Oracle Corporation" />

          <property name="java.library.path" value="/Users/spaeth/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:." />

          <property name="java.vendor.url" value="http://java.oracle.com/" />

          <property name="java.vm.vendor" value="Oracle Corporation" />

          <property name="gopherProxySet" value="false" />

          <property name="java.runtime.name" value="Java(TM) SE Runtime Environment" />

          <property name="sun.java.command" value="org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner tests.manu.CollectionsTest filtertrace=true haltOnError=false haltOnFailure=false formatter=org.apache.tools.ant.taskdefs.optional.junit.OutErrSummaryJUnitResultFormatter showoutput=false outputtoformatters=true logfailedtests=true logtestlistenerevents=false formatter=org.apache.tools.ant.taskdefs.optional.junit.XMLJUnitResultFormatter,/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/reports/TEST-tests.manu.CollectionsTest.xml crashfile=/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/junitvmwatcher2988466009442847683.properties propsfile=/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/junit6804328976379114330.properties" />

          <property name="java.class.path" value="/Users/spaeth/Documents/workspace/builds/soot-trunk.jar:/Users/spaeth/Documents/workspace/builds/dart.jar:/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/bin:/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/lib/junit.jar:/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/lib/org.hamcrest.core_1.3.0.jar:/Applications/eclipse-luna/plugins/org.apache.ant_1.9.2.v201404171502/lib/ant-launcher.jar:/Applications/eclipse-luna/plugins/org.apache.ant_1.9.2.v201404171502/lib/ant.jar:/Applications/eclipse-luna/plugins/org.apache.ant_1.9.2.v201404171502/lib/ant-junit.jar:/Applications/eclipse-luna/plugins/org.apache.ant_1.9.2.v201404171502/lib/ant-junit4.jar" />

          <property name="ant.version" value="Apache Ant(TM) version 1.9.2 compiled on July 8 2013" />

          <property name="ant.file.type.soot-infoflow" value="file" />

          <property name="java.vm.specification.name" value="Java Virtual Machine Specification" />

          <property name="java.vm.specification.version" value="1.7" />

          <property name="sun.cpu.endian" value="little" />

          <property name="sun.os.patch.level" value="unknown" />

          <property name="eclipse.pdebuild.home" value="/Applications/eclipse-luna/plugins/org.eclipse.pde.build_3.9.0.v20140415-2029/.//" />

          <property name="java.io.tmpdir" value="/var/folders/61/20qsh7_j6_ncnywwtd50d_qm0000gp/T/" />

          <property name="java.vendor.url.bug" value="http://bugreport.sun.com/bugreport/" />

          <property name="os.arch" value="x86_64" />

          <property name="java.awt.graphicsenv" value="sun.awt.CGraphicsEnvironment" />

          <property name="java.ext.dirs" value="/Users/spaeth/Library/Java/Extensions:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/ext:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java" />

          <property name="user.dir" value="/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark" />

          <property name="dart.jar" value="/Users/spaeth/Documents/workspace/builds/dart.jar" />

          <property name="line.separator" value="&#xa;" />

          <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM" />

          <property name="soot.jar" value="/Users/spaeth/Documents/workspace/builds/soot-trunk.jar" />

          <property name="basedir" value="/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark" />

          <property name="ant.java.version" value="1.7" />

          <property name="ant.core.lib" value="/Applications/eclipse-luna/plugins/org.apache.ant_1.9.2.v201404171502/lib/ant.jar" />

          <property name="file.encoding" value="US-ASCII" />

          <property name="java.specification.version" value="1.7" />

          <property name="ant.project.invoked-targets" value="reporttests" />

      </properties>

      <testcase classname="tests.manu.CollectionsTest" name="array1" time="2.487">
          <failure message=" FP:[a] Reported number of allocation site: 2, expected: 1" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError:  FP:[a] Reported number of allocation site: 2, expected: 1
	at benchmark.internal.Evaluator.evaluateAlias(Evaluator.java:79)
	at tests.manu.ManuExecutor.evaluate(ManuExecutor.java:36)
	at benchmark.internal.Test$1.internalTransform(Test.java:45)
	at soot.SceneTransformer.transform(SceneTransformer.java:39)
	at soot.Transform.apply(Transform.java:90)
	at soot.ScenePack.internalApply(ScenePack.java:40)
	at soot.Pack.apply(Pack.java:116)
	at benchmark.internal.Test.getQueryForTest(Test.java:57)
	at benchmark.internal.Test.&lt;init&gt;(Test.java:30)
	at tests.manu.ManuExecutor.&lt;init&gt;(ManuExecutor.java:30)
	at tests.manu.CollectionsTest.array1(CollectionsTest.java:8)
</failure>

      </testcase>

      <testcase classname="tests.manu.CollectionsTest" name="array2" time="1.974">
          <failure message="FN: [slice]  Reported number of allocation site: 0, expected: 1" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: FN: [slice]  Reported number of allocation site: 0, expected: 1
	at benchmark.internal.Evaluator.evaluateAlias(Evaluator.java:79)
	at tests.manu.ManuExecutor.evaluate(ManuExecutor.java:36)
	at benchmark.internal.Test$1.internalTransform(Test.java:45)
	at soot.SceneTransformer.transform(SceneTransformer.java:39)
	at soot.Transform.apply(Transform.java:90)
	at soot.ScenePack.internalApply(ScenePack.java:40)
	at soot.Pack.apply(Pack.java:116)
	at benchmark.internal.Test.getQueryForTest(Test.java:57)
	at benchmark.internal.Test.&lt;init&gt;(Test.java:30)
	at tests.manu.ManuExecutor.&lt;init&gt;(ManuExecutor.java:30)
	at tests.manu.CollectionsTest.array2(CollectionsTest.java:13)
</failure>

      </testcase>

      <testcase classname="tests.manu.CollectionsTest" name="map1" time="8.095">
          <failure message=" FP:[a] Reported number of allocation site: 2, expected: 1" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError:  FP:[a] Reported number of allocation site: 2, expected: 1
	at benchmark.internal.Evaluator.evaluateAlias(Evaluator.java:79)
	at tests.manu.ManuExecutor.evaluate(ManuExecutor.java:36)
	at benchmark.internal.Test$1.internalTransform(Test.java:45)
	at soot.SceneTransformer.transform(SceneTransformer.java:39)
	at soot.Transform.apply(Transform.java:90)
	at soot.ScenePack.internalApply(ScenePack.java:40)
	at soot.Pack.apply(Pack.java:116)
	at benchmark.internal.Test.getQueryForTest(Test.java:57)
	at benchmark.internal.Test.&lt;init&gt;(Test.java:30)
	at tests.manu.ManuExecutor.&lt;init&gt;(ManuExecutor.java:30)
	at tests.manu.CollectionsTest.map1(CollectionsTest.java:23)
</failure>

      </testcase>

      <testcase classname="tests.manu.CollectionsTest" name="list1" time="0.686" />

      <system-out><![CDATA[Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.2 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.0 seconds.
[Spark] Solution found in 0.0 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("c", "{allocId:1, mayAlias:[c,b], notMayAlias:[a,array], mustAlias:[c,b], notMustAlias:[a,array]}") for variable c
	Allocation site $r1 = new benchmark.objects.A -> alias: [b, c], not alias: [a, array]

=========RESULTS FOR  collections.Array1========
GT:2,[b, c]
FN:0,[]
FP:1,[a]
PTSGT:1
REPORTED:2
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.0 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.0 seconds.
[Spark] Solution found in 0.0 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("slice", "{allocId:1, mayAlias:[slice], notMayAlias:[a,b,array], mustAlias:[slice], notMustAlias:[a,b,array]}") for variable slice
	Allocation site array = newarray (benchmark.objects.A[])[0] -> alias: [slice], not alias: [array, a, b]

=========RESULTS FOR  collections.Array2========
GT:1,[slice]
FN:1,[slice]
FP:0,[]
PTSGT:1
REPORTED:0
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.0 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 3.0 seconds.
[Spark] Solution found in 3.0 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("c", "{allocId:1, mayAlias:[c,b], notMayAlias:[a,map], mustAlias:[c,b], notMustAlias:[a,map]}") for variable c
	Allocation site $r2 = new benchmark.objects.A -> alias: [c, b], not alias: [a, map]

=========RESULTS FOR  collections.Map1========
GT:2,[c, b]
FN:0,[]
FP:1,[a]
PTSGT:1
REPORTED:2
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.0 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.1 seconds.
[Spark] Solution found in 0.1 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b", "{allocId:1, mayAlias:[c,b], notMayAlias:[a,list], mustAlias:[c,b], notMustAlias:[a,list]}") for variable b
	Allocation site $r2 = new benchmark.objects.A -> alias: [c, b], not alias: [list, a]

=========RESULTS FOR  collections.List1========
GT:2,[c, b]
FN:0,[]
FP:0,[]
PTSGT:1
REPORTED:1
]]></system-out>

      <system-err><![CDATA[]]></system-err>

  </testsuite>
  <testsuite errors="0" failures="4" hostname="mac-spaeth.sit.fraunhofer.de" id="6" name="CornerCasesTest" package="tests.manu" skipped="0" tests="8" time="7.671" timestamp="2015-06-16T11:57:53">
      <properties>
          <property name="java.vendor" value="Oracle Corporation" />

          <property name="sun.java.launcher" value="SUN_STANDARD" />

          <property name="eclipse.pdebuild.templates" value="/Applications/eclipse-luna/plugins/org.eclipse.pde.build_3.9.0.v20140415-2029/templates//" />

          <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers" />

          <property name="os.name" value="Mac OS X" />

          <property name="sun.boot.class.path" value="/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/resources.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/rt.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/sunrsasign.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/jsse.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/jce.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/charsets.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/jfr.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/classes" />

          <property name="java.vm.specification.vendor" value="Oracle Corporation" />

          <property name="ant.home" value="/Applications/eclipse-luna/plugins/org.apache.ant_1.9.2.v201404171502" />

          <property name="java.runtime.version" value="1.7.0_51-b13" />

          <property name="user.name" value="spaeth" />

          <property name="user.language" value="de" />

          <property name="sun.boot.library.path" value="/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib" />

          <property name="ant.project.default-target" value="compile" />

          <property name="ant.project.name" value="soot-infoflow" />

          <property name="java.version" value="1.7.0_51" />

          <property name="user.timezone" value="" />

          <property name="sun.arch.data.model" value="64" />

          <property name="http.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16" />

          <property name="java.endorsed.dirs" value="/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/endorsed" />

          <property name="sun.cpu.isalist" value="" />

          <property name="sun.jnu.encoding" value="UTF-8" />

          <property name="file.encoding.pkg" value="sun.io" />

          <property name="file.separator" value="/" />

          <property name="java.specification.name" value="Java Platform API Specification" />

          <property name="java.class.version" value="51.0" />

          <property name="user.country" value="DE" />

          <property name="java.home" value="/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre" />

          <property name="java.vm.info" value="mixed mode" />

          <property name="ant.file" value="/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/experiments.xml" />

          <property name="os.version" value="10.10.3" />

          <property name="path.separator" value=":" />

          <property name="java.vm.version" value="24.51-b03" />

          <property name="ant.file.soot-infoflow" value="/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/experiments.xml" />

          <property name="ant.library.dir" value="/Applications/eclipse-luna/plugins/org.apache.ant_1.9.2.v201404171502/lib" />

          <property name="java.awt.printerjob" value="sun.lwawt.macosx.CPrinterJob" />

          <property name="sun.io.unicode.encoding" value="UnicodeBig" />

          <property name="awt.toolkit" value="sun.lwawt.macosx.LWCToolkit" />

          <property name="socksNonProxyHosts" value="local|*.local|169.254/16|*.169.254/16" />

          <property name="ftp.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16" />

          <property name="eclipse.pdebuild.scripts" value="/Applications/eclipse-luna/plugins/org.eclipse.pde.build_3.9.0.v20140415-2029/scripts//" />

          <property name="user.home" value="/Users/spaeth" />

          <property name="java.specification.vendor" value="Oracle Corporation" />

          <property name="java.library.path" value="/Users/spaeth/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:." />

          <property name="java.vendor.url" value="http://java.oracle.com/" />

          <property name="java.vm.vendor" value="Oracle Corporation" />

          <property name="gopherProxySet" value="false" />

          <property name="java.runtime.name" value="Java(TM) SE Runtime Environment" />

          <property name="sun.java.command" value="org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner tests.manu.CornerCasesTest filtertrace=true haltOnError=false haltOnFailure=false formatter=org.apache.tools.ant.taskdefs.optional.junit.OutErrSummaryJUnitResultFormatter showoutput=false outputtoformatters=true logfailedtests=true logtestlistenerevents=false formatter=org.apache.tools.ant.taskdefs.optional.junit.XMLJUnitResultFormatter,/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/reports/TEST-tests.manu.CornerCasesTest.xml crashfile=/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/junitvmwatcher5839545273438513412.properties propsfile=/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/junit4408246656838031092.properties" />

          <property name="java.class.path" value="/Users/spaeth/Documents/workspace/builds/soot-trunk.jar:/Users/spaeth/Documents/workspace/builds/dart.jar:/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/bin:/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/lib/junit.jar:/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/lib/org.hamcrest.core_1.3.0.jar:/Applications/eclipse-luna/plugins/org.apache.ant_1.9.2.v201404171502/lib/ant-launcher.jar:/Applications/eclipse-luna/plugins/org.apache.ant_1.9.2.v201404171502/lib/ant.jar:/Applications/eclipse-luna/plugins/org.apache.ant_1.9.2.v201404171502/lib/ant-junit.jar:/Applications/eclipse-luna/plugins/org.apache.ant_1.9.2.v201404171502/lib/ant-junit4.jar" />

          <property name="ant.version" value="Apache Ant(TM) version 1.9.2 compiled on July 8 2013" />

          <property name="ant.file.type.soot-infoflow" value="file" />

          <property name="java.vm.specification.name" value="Java Virtual Machine Specification" />

          <property name="java.vm.specification.version" value="1.7" />

          <property name="sun.cpu.endian" value="little" />

          <property name="sun.os.patch.level" value="unknown" />

          <property name="eclipse.pdebuild.home" value="/Applications/eclipse-luna/plugins/org.eclipse.pde.build_3.9.0.v20140415-2029/.//" />

          <property name="java.io.tmpdir" value="/var/folders/61/20qsh7_j6_ncnywwtd50d_qm0000gp/T/" />

          <property name="java.vendor.url.bug" value="http://bugreport.sun.com/bugreport/" />

          <property name="os.arch" value="x86_64" />

          <property name="java.awt.graphicsenv" value="sun.awt.CGraphicsEnvironment" />

          <property name="java.ext.dirs" value="/Users/spaeth/Library/Java/Extensions:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/ext:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java" />

          <property name="user.dir" value="/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark" />

          <property name="dart.jar" value="/Users/spaeth/Documents/workspace/builds/dart.jar" />

          <property name="line.separator" value="&#xa;" />

          <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM" />

          <property name="soot.jar" value="/Users/spaeth/Documents/workspace/builds/soot-trunk.jar" />

          <property name="basedir" value="/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark" />

          <property name="ant.java.version" value="1.7" />

          <property name="ant.core.lib" value="/Applications/eclipse-luna/plugins/org.apache.ant_1.9.2.v201404171502/lib/ant.jar" />

          <property name="file.encoding" value="US-ASCII" />

          <property name="java.specification.version" value="1.7" />

          <property name="ant.project.invoked-targets" value="reporttests" />

      </properties>

      <testcase classname="tests.manu.CornerCasesTest" name="contextSensitivty1" time="2.54" />

      <testcase classname="tests.manu.CornerCasesTest" name="contextSensitivty2" time="2.381" />

      <testcase classname="tests.manu.CornerCasesTest" name="contextSensitivty3" time="0.777" />

      <testcase classname="tests.manu.CornerCasesTest" name="flowSensitivty1" time="0.449">
          <failure message=" FP:[a] Reported number of allocation site: 2, expected: 1" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError:  FP:[a] Reported number of allocation site: 2, expected: 1
	at benchmark.internal.Evaluator.evaluateAlias(Evaluator.java:79)
	at tests.manu.ManuExecutor.evaluate(ManuExecutor.java:36)
	at benchmark.internal.Test$1.internalTransform(Test.java:45)
	at soot.SceneTransformer.transform(SceneTransformer.java:39)
	at soot.Transform.apply(Transform.java:90)
	at soot.ScenePack.internalApply(ScenePack.java:40)
	at soot.Pack.apply(Pack.java:116)
	at benchmark.internal.Test.getQueryForTest(Test.java:57)
	at benchmark.internal.Test.&lt;init&gt;(Test.java:30)
	at tests.manu.ManuExecutor.&lt;init&gt;(ManuExecutor.java:30)
	at tests.manu.CornerCasesTest.flowSensitivty1(CornerCasesTest.java:28)
</failure>

      </testcase>

      <testcase classname="tests.manu.CornerCasesTest" name="strongUpdate1" time="0.376">
          <failure message="  Reported number of allocation site: 2, expected: 1" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError:   Reported number of allocation site: 2, expected: 1
	at benchmark.internal.Evaluator.evaluateAlias(Evaluator.java:79)
	at tests.manu.ManuExecutor.evaluate(ManuExecutor.java:36)
	at benchmark.internal.Test$1.internalTransform(Test.java:45)
	at soot.SceneTransformer.transform(SceneTransformer.java:39)
	at soot.Transform.apply(Transform.java:90)
	at soot.ScenePack.internalApply(ScenePack.java:40)
	at soot.Pack.apply(Pack.java:116)
	at benchmark.internal.Test.getQueryForTest(Test.java:57)
	at benchmark.internal.Test.&lt;init&gt;(Test.java:30)
	at tests.manu.ManuExecutor.&lt;init&gt;(ManuExecutor.java:30)
	at tests.manu.CornerCasesTest.strongUpdate1(CornerCasesTest.java:43)
</failure>

      </testcase>

      <testcase classname="tests.manu.CornerCasesTest" name="accessPath1" time="0.393">
          <failure message="  Reported number of allocation site: 2, expected: 1" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError:   Reported number of allocation site: 2, expected: 1
	at benchmark.internal.Evaluator.evaluateAlias(Evaluator.java:79)
	at tests.manu.ManuExecutor.evaluate(ManuExecutor.java:36)
	at benchmark.internal.Test$1.internalTransform(Test.java:45)
	at soot.SceneTransformer.transform(SceneTransformer.java:39)
	at soot.Transform.apply(Transform.java:90)
	at soot.ScenePack.internalApply(ScenePack.java:40)
	at soot.Pack.apply(Pack.java:116)
	at benchmark.internal.Test.getQueryForTest(Test.java:57)
	at benchmark.internal.Test.&lt;init&gt;(Test.java:30)
	at tests.manu.ManuExecutor.&lt;init&gt;(ManuExecutor.java:30)
	at tests.manu.CornerCasesTest.accessPath1(CornerCasesTest.java:8)
</failure>

      </testcase>

      <testcase classname="tests.manu.CornerCasesTest" name="objectSensitivty1" time="0.373">
          <failure message="  Reported number of allocation site: 2, expected: 1" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError:   Reported number of allocation site: 2, expected: 1
	at benchmark.internal.Evaluator.evaluateAlias(Evaluator.java:79)
	at tests.manu.ManuExecutor.evaluate(ManuExecutor.java:36)
	at benchmark.internal.Test$1.internalTransform(Test.java:45)
	at soot.SceneTransformer.transform(SceneTransformer.java:39)
	at soot.Transform.apply(Transform.java:90)
	at soot.ScenePack.internalApply(ScenePack.java:40)
	at soot.Pack.apply(Pack.java:116)
	at benchmark.internal.Test.getQueryForTest(Test.java:57)
	at benchmark.internal.Test.&lt;init&gt;(Test.java:30)
	at tests.manu.ManuExecutor.&lt;init&gt;(ManuExecutor.java:30)
	at tests.manu.CornerCasesTest.objectSensitivty1(CornerCasesTest.java:33)
</failure>

      </testcase>

      <testcase classname="tests.manu.CornerCasesTest" name="objectSensitivty2" time="0.327" />

      <system-out><![CDATA[Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.1 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.0 seconds.
[Spark] Solution found in 0.0 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b", "{allocId:1, mayAlias:[a,b], notMayAlias:[], mustAlias:[a,b], notMustAlias:[]},{allocId:2, mayAlias:[a], notMayAlias:[b], mustAlias:[a], notMustAlias:[b]}") for variable b
	Allocation site $r1 = new benchmark.objects.A -> alias: [a], not alias: [b]
	Allocation site $r0 = new benchmark.objects.A -> alias: [b, a], not alias: []

=========RESULTS FOR  cornerCases.ContextSensitivity1========
GT:2,[b, a]
FN:0,[]
FP:0,[]
PTSGT:2
REPORTED:2
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.0 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.0 seconds.
[Spark] Solution found in 0.0 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b", "{allocId:1, mayAlias:[a,b], notMayAlias:[], mustAlias:[a,b], notMustAlias:[]},{allocId:2, mayAlias:[a], notMayAlias:[b], mustAlias:[a], notMustAlias:[b]}") for variable b
	Allocation site $r1 = new benchmark.objects.A -> alias: [a], not alias: [b]
	Allocation site $r0 = new benchmark.objects.A -> alias: [b, a], not alias: []

=========RESULTS FOR  cornerCases.ContextSensitivity2========
GT:2,[b, a]
FN:0,[]
FP:0,[]
PTSGT:2
REPORTED:2
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.0 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.0 seconds.
[Spark] Solution found in 0.0 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b", "{allocId:1, mayAlias:[a,b], notMayAlias:[], mustAlias:[a,b], notMustAlias:[]},{allocId:2, mayAlias:[a], notMayAlias:[b], mustAlias:[a], notMustAlias:[b]}") for variable b
	Allocation site $r1 = new benchmark.objects.A -> alias: [a], not alias: [b]
	Allocation site $r0 = new benchmark.objects.A -> alias: [b, a], not alias: []

=========RESULTS FOR  cornerCases.ContextSensitivity3========
GT:2,[b, a]
FN:0,[]
FP:0,[]
PTSGT:2
REPORTED:2
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.0 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.0 seconds.
[Spark] Solution found in 0.0 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b", "{allocId:1, mayAlias:[b], notMayAlias:[a], mustAlias:[b], notMustAlias:[a]}") for variable b
	Allocation site $r1 = new benchmark.objects.A -> alias: [b], not alias: [a]

=========RESULTS FOR  cornerCases.FlowSensitivity1========
GT:1,[b]
FN:0,[]
FP:1,[a]
PTSGT:1
REPORTED:2
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.0 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.0 seconds.
[Spark] Solution found in 0.0 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("x", "{allocId:1, mayAlias:[x,y], notMayAlias:[a,b], mustAlias:[x,y], notMustAlias:[a,b]}") for variable x
	Allocation site $r1 = new benchmark.objects.B -> alias: [x, y], not alias: [b, a]

=========RESULTS FOR  cornerCases.StrongUpdate1========
GT:2,[x, y]
FN:0,[]
FP:0,[]
PTSGT:1
REPORTED:2
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.0 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.0 seconds.
[Spark] Solution found in 0.0 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("x", "{allocId:1, mayAlias:[x,y], notMayAlias:[a,b], mustAlias:[a.f,b.f], notMustAlias:[a,b]}") for variable x
	Allocation site $r0 = new benchmark.objects.A -> alias: [x, y], not alias: [a, b]

=========RESULTS FOR  cornerCases.AccessPath1========
GT:2,[x, y]
FN:0,[]
FP:0,[]
PTSGT:1
REPORTED:2
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.0 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.0 seconds.
[Spark] Solution found in 0.0 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b4", "{allocId:1, mayAlias:[b4,b2], notMayAlias:[a1,a2,b1,b3], mustAlias:[b4,b2], notMustAlias:[a1,a2,b1,b3]}") for variable b4
	Allocation site $r1 = new benchmark.objects.B -> alias: [b2, b4], not alias: [a1, a2, b1, b3]

=========RESULTS FOR  cornerCases.ObjectSensitivity1========
GT:2,[b2, b4]
FN:0,[]
FP:0,[]
PTSGT:1
REPORTED:2
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.0 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.0 seconds.
[Spark] Solution found in 0.0 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b4", "{allocId:1, mayAlias:[b4,b2], notMayAlias:[a,b1,b3], mustAlias:[b4,b2], notMustAlias:[a,b1,b3]}") for variable b4
	Allocation site $r1 = new benchmark.objects.B -> alias: [b4, b2], not alias: [a, b1, b3]

=========RESULTS FOR  cornerCases.ObjectSensitivity2========
GT:2,[b2, b4]
FN:0,[]
FP:0,[]
PTSGT:1
REPORTED:1
]]></system-out>

      <system-err><![CDATA[]]></system-err>

  </testsuite>
  <testsuite errors="1" failures="3" hostname="mac-spaeth.sit.fraunhofer.de" id="7" name="GeneralJavaTest" package="tests.manu" skipped="0" tests="8" time="7.822" timestamp="2015-06-16T11:58:02">
      <properties>
          <property name="java.vendor" value="Oracle Corporation" />

          <property name="sun.java.launcher" value="SUN_STANDARD" />

          <property name="eclipse.pdebuild.templates" value="/Applications/eclipse-luna/plugins/org.eclipse.pde.build_3.9.0.v20140415-2029/templates//" />

          <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers" />

          <property name="os.name" value="Mac OS X" />

          <property name="sun.boot.class.path" value="/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/resources.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/rt.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/sunrsasign.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/jsse.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/jce.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/charsets.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/jfr.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/classes" />

          <property name="java.vm.specification.vendor" value="Oracle Corporation" />

          <property name="ant.home" value="/Applications/eclipse-luna/plugins/org.apache.ant_1.9.2.v201404171502" />

          <property name="java.runtime.version" value="1.7.0_51-b13" />

          <property name="user.name" value="spaeth" />

          <property name="user.language" value="de" />

          <property name="sun.boot.library.path" value="/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib" />

          <property name="ant.project.default-target" value="compile" />

          <property name="ant.project.name" value="soot-infoflow" />

          <property name="java.version" value="1.7.0_51" />

          <property name="user.timezone" value="" />

          <property name="sun.arch.data.model" value="64" />

          <property name="http.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16" />

          <property name="java.endorsed.dirs" value="/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/endorsed" />

          <property name="sun.cpu.isalist" value="" />

          <property name="sun.jnu.encoding" value="UTF-8" />

          <property name="file.encoding.pkg" value="sun.io" />

          <property name="file.separator" value="/" />

          <property name="java.specification.name" value="Java Platform API Specification" />

          <property name="java.class.version" value="51.0" />

          <property name="user.country" value="DE" />

          <property name="java.home" value="/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre" />

          <property name="java.vm.info" value="mixed mode" />

          <property name="ant.file" value="/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/experiments.xml" />

          <property name="os.version" value="10.10.3" />

          <property name="path.separator" value=":" />

          <property name="java.vm.version" value="24.51-b03" />

          <property name="ant.file.soot-infoflow" value="/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/experiments.xml" />

          <property name="ant.library.dir" value="/Applications/eclipse-luna/plugins/org.apache.ant_1.9.2.v201404171502/lib" />

          <property name="java.awt.printerjob" value="sun.lwawt.macosx.CPrinterJob" />

          <property name="sun.io.unicode.encoding" value="UnicodeBig" />

          <property name="awt.toolkit" value="sun.lwawt.macosx.LWCToolkit" />

          <property name="socksNonProxyHosts" value="local|*.local|169.254/16|*.169.254/16" />

          <property name="ftp.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16" />

          <property name="eclipse.pdebuild.scripts" value="/Applications/eclipse-luna/plugins/org.eclipse.pde.build_3.9.0.v20140415-2029/scripts//" />

          <property name="user.home" value="/Users/spaeth" />

          <property name="java.specification.vendor" value="Oracle Corporation" />

          <property name="java.library.path" value="/Users/spaeth/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:." />

          <property name="java.vendor.url" value="http://java.oracle.com/" />

          <property name="java.vm.vendor" value="Oracle Corporation" />

          <property name="gopherProxySet" value="false" />

          <property name="java.runtime.name" value="Java(TM) SE Runtime Environment" />

          <property name="sun.java.command" value="org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner tests.manu.GeneralJavaTest filtertrace=true haltOnError=false haltOnFailure=false formatter=org.apache.tools.ant.taskdefs.optional.junit.OutErrSummaryJUnitResultFormatter showoutput=false outputtoformatters=true logfailedtests=true logtestlistenerevents=false formatter=org.apache.tools.ant.taskdefs.optional.junit.XMLJUnitResultFormatter,/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/reports/TEST-tests.manu.GeneralJavaTest.xml crashfile=/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/junitvmwatcher4752291187736184010.properties propsfile=/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/junit5665896308721212461.properties" />

          <property name="java.class.path" value="/Users/spaeth/Documents/workspace/builds/soot-trunk.jar:/Users/spaeth/Documents/workspace/builds/dart.jar:/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/bin:/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/lib/junit.jar:/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/lib/org.hamcrest.core_1.3.0.jar:/Applications/eclipse-luna/plugins/org.apache.ant_1.9.2.v201404171502/lib/ant-launcher.jar:/Applications/eclipse-luna/plugins/org.apache.ant_1.9.2.v201404171502/lib/ant.jar:/Applications/eclipse-luna/plugins/org.apache.ant_1.9.2.v201404171502/lib/ant-junit.jar:/Applications/eclipse-luna/plugins/org.apache.ant_1.9.2.v201404171502/lib/ant-junit4.jar" />

          <property name="ant.version" value="Apache Ant(TM) version 1.9.2 compiled on July 8 2013" />

          <property name="ant.file.type.soot-infoflow" value="file" />

          <property name="java.vm.specification.name" value="Java Virtual Machine Specification" />

          <property name="java.vm.specification.version" value="1.7" />

          <property name="sun.cpu.endian" value="little" />

          <property name="sun.os.patch.level" value="unknown" />

          <property name="eclipse.pdebuild.home" value="/Applications/eclipse-luna/plugins/org.eclipse.pde.build_3.9.0.v20140415-2029/.//" />

          <property name="java.io.tmpdir" value="/var/folders/61/20qsh7_j6_ncnywwtd50d_qm0000gp/T/" />

          <property name="java.vendor.url.bug" value="http://bugreport.sun.com/bugreport/" />

          <property name="os.arch" value="x86_64" />

          <property name="java.awt.graphicsenv" value="sun.awt.CGraphicsEnvironment" />

          <property name="java.ext.dirs" value="/Users/spaeth/Library/Java/Extensions:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/ext:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java" />

          <property name="user.dir" value="/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark" />

          <property name="dart.jar" value="/Users/spaeth/Documents/workspace/builds/dart.jar" />

          <property name="line.separator" value="&#xa;" />

          <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM" />

          <property name="soot.jar" value="/Users/spaeth/Documents/workspace/builds/soot-trunk.jar" />

          <property name="basedir" value="/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark" />

          <property name="ant.java.version" value="1.7" />

          <property name="ant.core.lib" value="/Applications/eclipse-luna/plugins/org.apache.ant_1.9.2.v201404171502/lib/ant.jar" />

          <property name="file.encoding" value="US-ASCII" />

          <property name="java.specification.version" value="1.7" />

          <property name="ant.project.invoked-targets" value="reporttests" />

      </properties>

      <testcase classname="tests.manu.GeneralJavaTest" name="interface1" time="2.509" />

      <testcase classname="tests.manu.GeneralJavaTest" name="exception1" time="2.803">
          <failure message="  Reported number of allocation site: 2, expected: 1" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError:   Reported number of allocation site: 2, expected: 1
	at benchmark.internal.Evaluator.evaluateAlias(Evaluator.java:79)
	at tests.manu.ManuExecutor.evaluate(ManuExecutor.java:36)
	at benchmark.internal.Test$1.internalTransform(Test.java:45)
	at soot.SceneTransformer.transform(SceneTransformer.java:39)
	at soot.Transform.apply(Transform.java:90)
	at soot.ScenePack.internalApply(ScenePack.java:40)
	at soot.Pack.apply(Pack.java:116)
	at benchmark.internal.Test.getQueryForTest(Test.java:57)
	at benchmark.internal.Test.&lt;init&gt;(Test.java:30)
	at tests.manu.ManuExecutor.&lt;init&gt;(ManuExecutor.java:30)
	at tests.manu.GeneralJavaTest.exception1(GeneralJavaTest.java:8)
</failure>

      </testcase>

      <testcase classname="tests.manu.GeneralJavaTest" name="exception2" time="0.569">
          <error type="java.lang.NullPointerException">java.lang.NullPointerException
	at benchmark.internal.Evaluator.evaluateAlias(Evaluator.java:71)
	at tests.manu.ManuExecutor.evaluate(ManuExecutor.java:36)
	at benchmark.internal.Test$1.internalTransform(Test.java:45)
	at soot.SceneTransformer.transform(SceneTransformer.java:39)
	at soot.Transform.apply(Transform.java:90)
	at soot.ScenePack.internalApply(ScenePack.java:40)
	at soot.Pack.apply(Pack.java:116)
	at benchmark.internal.Test.getQueryForTest(Test.java:57)
	at benchmark.internal.Test.&lt;init&gt;(Test.java:30)
	at tests.manu.ManuExecutor.&lt;init&gt;(ManuExecutor.java:30)
	at tests.manu.GeneralJavaTest.exception2(GeneralJavaTest.java:12)
</error>

      </testcase>

      <testcase classname="tests.manu.GeneralJavaTest" name="null1" time="0.434" />

      <testcase classname="tests.manu.GeneralJavaTest" name="null2" time="0.355" />

      <testcase classname="tests.manu.GeneralJavaTest" name="staticVariables1" time="0.398" />

      <testcase classname="tests.manu.GeneralJavaTest" name="outerClass1" time="0.329">
          <failure message=" FP:[a] Reported number of allocation site: 2, expected: 1" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError:  FP:[a] Reported number of allocation site: 2, expected: 1
	at benchmark.internal.Evaluator.evaluateAlias(Evaluator.java:79)
	at tests.manu.ManuExecutor.evaluate(ManuExecutor.java:36)
	at benchmark.internal.Test$1.internalTransform(Test.java:45)
	at soot.SceneTransformer.transform(SceneTransformer.java:39)
	at soot.Transform.apply(Transform.java:90)
	at soot.ScenePack.internalApply(ScenePack.java:40)
	at soot.Pack.apply(Pack.java:116)
	at benchmark.internal.Test.getQueryForTest(Test.java:57)
	at benchmark.internal.Test.&lt;init&gt;(Test.java:30)
	at tests.manu.ManuExecutor.&lt;init&gt;(ManuExecutor.java:30)
	at tests.manu.GeneralJavaTest.outerClass1(GeneralJavaTest.java:31)
</failure>

      </testcase>

      <testcase classname="tests.manu.GeneralJavaTest" name="superClass1" time="0.355">
          <failure message=" FP:[a] Reported number of allocation site: 2, expected: 1" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError:  FP:[a] Reported number of allocation site: 2, expected: 1
	at benchmark.internal.Evaluator.evaluateAlias(Evaluator.java:79)
	at tests.manu.ManuExecutor.evaluate(ManuExecutor.java:36)
	at benchmark.internal.Test$1.internalTransform(Test.java:45)
	at soot.SceneTransformer.transform(SceneTransformer.java:39)
	at soot.Transform.apply(Transform.java:90)
	at soot.ScenePack.internalApply(ScenePack.java:40)
	at soot.Pack.apply(Pack.java:116)
	at benchmark.internal.Test.getQueryForTest(Test.java:57)
	at benchmark.internal.Test.&lt;init&gt;(Test.java:30)
	at tests.manu.ManuExecutor.&lt;init&gt;(ManuExecutor.java:30)
	at tests.manu.GeneralJavaTest.superClass1(GeneralJavaTest.java:40)
</failure>

      </testcase>

      <system-out><![CDATA[Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.2 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.0 seconds.
[Spark] Solution found in 0.0 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("c", "{allocId:1, mayAlias:[c,b], notMayAlias:[a,g,h], mustAlias:[c,b], notMustAlias:[a,g,h]}") for variable c
	Allocation site $r1 = new benchmark.objects.A -> alias: [c, b], not alias: [a, g, h]

=========RESULTS FOR  generalJava.Interface1========
GT:2,[c, b]
FN:0,[]
FP:0,[]
PTSGT:1
REPORTED:1
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.0 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.4 seconds.
[Spark] Solution found in 0.4 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b", "{allocId:1, mayAlias:[a,b], notMayAlias:[], mustAlias:[a,b], notMustAlias:[]}") for variable b
	Allocation site $r0 = new benchmark.objects.A -> alias: [a, b], not alias: []

=========RESULTS FOR  generalJava.Exception1========
GT:2,[a, b]
FN:0,[]
FP:0,[]
PTSGT:1
REPORTED:2
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.0 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.0 seconds.
[Spark] Solution found in 0.0 seconds.
Query at stmt null for variable null
	Allocation site $r1 = new benchmark.objects.A -> alias: [], not alias: []

Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.0 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.0 seconds.
[Spark] Solution found in 0.0 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b", "{NULLALLOC, mayAlias:[], notMayAlias:[b,a], mustAlias:[b,a], notMustAlias:[i]}") for variable b
	Allocation site null -> alias: [], not alias: [a, b]

=========RESULTS FOR  generalJava.Null1========
GT:0,[]
FN:0,[]
FP:0,[]
PTSGT:0
REPORTED:0
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.0 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.0 seconds.
[Spark] Solution found in 0.0 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("x", "{NULLALLOC, mayAlias:[], notMayAlias:[b,a], mustAlias:[b,a], notMustAlias:[i]}") for variable x
	Allocation site null -> alias: [], not alias: [a, b]

=========RESULTS FOR  generalJava.Null2========
GT:0,[]
FN:0,[]
FP:0,[]
PTSGT:0
REPORTED:0
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.0 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.0 seconds.
[Spark] Solution found in 0.0 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b", "{allocId:1, mayAlias:[b,a], notMayAlias:[], mustAlias:[b,a], notMustAlias:[]}") for variable b
	Allocation site $r0 = new benchmark.objects.A -> alias: [b], not alias: []

=========RESULTS FOR  generalJava.StaticVariables1========
GT:1,[b]
FN:0,[]
FP:0,[]
PTSGT:1
REPORTED:1
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.0 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.0 seconds.
[Spark] Solution found in 0.0 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("h", "{allocId:1, mayAlias:[b,b], notMayAlias:[i,a], mustAlias:[b,a], notMustAlias:[i]}") for variable h
	Allocation site $r0 = new benchmark.objects.A -> alias: [b], not alias: [i, a]

=========RESULTS FOR  generalJava.OuterClass1========
GT:1,[b]
FN:0,[]
FP:1,[a]
PTSGT:1
REPORTED:2
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.0 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.0 seconds.
[Spark] Solution found in 0.0 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("h", "{allocId:1, mayAlias:[b], notMayAlias:[a,p], mustAlias:[b,a], notMustAlias:[p]}") for variable h
	Allocation site $r0 = new benchmark.objects.A -> alias: [b], not alias: [a, p]

=========RESULTS FOR  generalJava.SuperClass1========
GT:1,[b]
FN:0,[]
FP:1,[a]
PTSGT:1
REPORTED:2
]]></system-out>

      <system-err><![CDATA[]]></system-err>

  </testsuite>
  <testsuite errors="0" failures="1" hostname="mac-spaeth.sit.fraunhofer.de" id="8" name="BasicTest" package="tests.yan" skipped="0" tests="11" time="10.898" timestamp="2015-06-16T11:58:10">
      <properties>
          <property name="java.vendor" value="Oracle Corporation" />

          <property name="sun.java.launcher" value="SUN_STANDARD" />

          <property name="eclipse.pdebuild.templates" value="/Applications/eclipse-luna/plugins/org.eclipse.pde.build_3.9.0.v20140415-2029/templates//" />

          <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers" />

          <property name="os.name" value="Mac OS X" />

          <property name="sun.boot.class.path" value="/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/resources.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/rt.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/sunrsasign.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/jsse.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/jce.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/charsets.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/jfr.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/classes" />

          <property name="java.vm.specification.vendor" value="Oracle Corporation" />

          <property name="ant.home" value="/Applications/eclipse-luna/plugins/org.apache.ant_1.9.2.v201404171502" />

          <property name="java.runtime.version" value="1.7.0_51-b13" />

          <property name="user.name" value="spaeth" />

          <property name="user.language" value="de" />

          <property name="sun.boot.library.path" value="/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib" />

          <property name="ant.project.default-target" value="compile" />

          <property name="ant.project.name" value="soot-infoflow" />

          <property name="java.version" value="1.7.0_51" />

          <property name="user.timezone" value="" />

          <property name="sun.arch.data.model" value="64" />

          <property name="http.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16" />

          <property name="java.endorsed.dirs" value="/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/endorsed" />

          <property name="sun.cpu.isalist" value="" />

          <property name="sun.jnu.encoding" value="UTF-8" />

          <property name="file.encoding.pkg" value="sun.io" />

          <property name="file.separator" value="/" />

          <property name="java.specification.name" value="Java Platform API Specification" />

          <property name="java.class.version" value="51.0" />

          <property name="user.country" value="DE" />

          <property name="java.home" value="/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre" />

          <property name="java.vm.info" value="mixed mode" />

          <property name="ant.file" value="/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/experiments.xml" />

          <property name="os.version" value="10.10.3" />

          <property name="path.separator" value=":" />

          <property name="java.vm.version" value="24.51-b03" />

          <property name="ant.file.soot-infoflow" value="/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/experiments.xml" />

          <property name="ant.library.dir" value="/Applications/eclipse-luna/plugins/org.apache.ant_1.9.2.v201404171502/lib" />

          <property name="java.awt.printerjob" value="sun.lwawt.macosx.CPrinterJob" />

          <property name="sun.io.unicode.encoding" value="UnicodeBig" />

          <property name="awt.toolkit" value="sun.lwawt.macosx.LWCToolkit" />

          <property name="socksNonProxyHosts" value="local|*.local|169.254/16|*.169.254/16" />

          <property name="ftp.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16" />

          <property name="eclipse.pdebuild.scripts" value="/Applications/eclipse-luna/plugins/org.eclipse.pde.build_3.9.0.v20140415-2029/scripts//" />

          <property name="user.home" value="/Users/spaeth" />

          <property name="java.specification.vendor" value="Oracle Corporation" />

          <property name="java.library.path" value="/Users/spaeth/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:." />

          <property name="java.vendor.url" value="http://java.oracle.com/" />

          <property name="java.vm.vendor" value="Oracle Corporation" />

          <property name="gopherProxySet" value="false" />

          <property name="java.runtime.name" value="Java(TM) SE Runtime Environment" />

          <property name="sun.java.command" value="org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner tests.yan.BasicTest filtertrace=true haltOnError=false haltOnFailure=false formatter=org.apache.tools.ant.taskdefs.optional.junit.OutErrSummaryJUnitResultFormatter showoutput=false outputtoformatters=true logfailedtests=true logtestlistenerevents=false formatter=org.apache.tools.ant.taskdefs.optional.junit.XMLJUnitResultFormatter,/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/reports/TEST-tests.yan.BasicTest.xml crashfile=/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/junitvmwatcher7376517685233739073.properties propsfile=/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/junit1942515292233809850.properties" />

          <property name="java.class.path" value="/Users/spaeth/Documents/workspace/builds/soot-trunk.jar:/Users/spaeth/Documents/workspace/builds/dart.jar:/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/bin:/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/lib/junit.jar:/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/lib/org.hamcrest.core_1.3.0.jar:/Applications/eclipse-luna/plugins/org.apache.ant_1.9.2.v201404171502/lib/ant-launcher.jar:/Applications/eclipse-luna/plugins/org.apache.ant_1.9.2.v201404171502/lib/ant.jar:/Applications/eclipse-luna/plugins/org.apache.ant_1.9.2.v201404171502/lib/ant-junit.jar:/Applications/eclipse-luna/plugins/org.apache.ant_1.9.2.v201404171502/lib/ant-junit4.jar" />

          <property name="ant.version" value="Apache Ant(TM) version 1.9.2 compiled on July 8 2013" />

          <property name="ant.file.type.soot-infoflow" value="file" />

          <property name="java.vm.specification.name" value="Java Virtual Machine Specification" />

          <property name="java.vm.specification.version" value="1.7" />

          <property name="sun.cpu.endian" value="little" />

          <property name="sun.os.patch.level" value="unknown" />

          <property name="eclipse.pdebuild.home" value="/Applications/eclipse-luna/plugins/org.eclipse.pde.build_3.9.0.v20140415-2029/.//" />

          <property name="java.io.tmpdir" value="/var/folders/61/20qsh7_j6_ncnywwtd50d_qm0000gp/T/" />

          <property name="java.vendor.url.bug" value="http://bugreport.sun.com/bugreport/" />

          <property name="os.arch" value="x86_64" />

          <property name="java.awt.graphicsenv" value="sun.awt.CGraphicsEnvironment" />

          <property name="java.ext.dirs" value="/Users/spaeth/Library/Java/Extensions:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/ext:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java" />

          <property name="user.dir" value="/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark" />

          <property name="dart.jar" value="/Users/spaeth/Documents/workspace/builds/dart.jar" />

          <property name="line.separator" value="&#xa;" />

          <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM" />

          <property name="soot.jar" value="/Users/spaeth/Documents/workspace/builds/soot-trunk.jar" />

          <property name="basedir" value="/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark" />

          <property name="ant.java.version" value="1.7" />

          <property name="ant.core.lib" value="/Applications/eclipse-luna/plugins/org.apache.ant_1.9.2.v201404171502/lib/ant.jar" />

          <property name="file.encoding" value="US-ASCII" />

          <property name="java.specification.version" value="1.7" />

          <property name="ant.project.invoked-targets" value="reporttests" />

      </properties>

      <testcase classname="tests.yan.BasicTest" name="simpleAlias1" time="2.461" />

      <testcase classname="tests.yan.BasicTest" name="loops1" time="1.854" />

      <testcase classname="tests.yan.BasicTest" name="parameter1" time="0.847" />

      <testcase classname="tests.yan.BasicTest" name="parameter2" time="0.358" />

      <testcase classname="tests.yan.BasicTest" name="returnValue1" time="0.47" />

      <testcase classname="tests.yan.BasicTest" name="returnValue2" time="0.435" />

      <testcase classname="tests.yan.BasicTest" name="returnValue3" time="2.196">
          <failure message=" FP:[y]" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError:  FP:[y]
	at benchmark.internal.Evaluator.evaluateAlias(Evaluator.java:79)
	at tests.yan.YanExecutor.evaluate(YanExecutor.java:37)
	at benchmark.internal.Test$1.internalTransform(Test.java:45)
	at soot.SceneTransformer.transform(SceneTransformer.java:39)
	at soot.Transform.apply(Transform.java:90)
	at soot.ScenePack.internalApply(ScenePack.java:40)
	at soot.Pack.apply(Pack.java:116)
	at benchmark.internal.Test.getQueryForTest(Test.java:57)
	at benchmark.internal.Test.&lt;init&gt;(Test.java:30)
	at tests.yan.YanExecutor.&lt;init&gt;(YanExecutor.java:31)
	at tests.yan.BasicTest.returnValue3(BasicTest.java:45)
</failure>

      </testcase>

      <testcase classname="tests.yan.BasicTest" name="method1" time="0.274" />

      <testcase classname="tests.yan.BasicTest" name="method2" time="1.157" />

      <testcase classname="tests.yan.BasicTest" name="branching1" time="0.429" />

      <testcase classname="tests.yan.BasicTest" name="recursion1" time="0.362" />

      <system-out><![CDATA[Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.2 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.0 seconds.
[Spark] Solution found in 0.0 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b", "{allocId:1, mayAlias:[a,b], notMayAlias:[], mustAlias:[a,b], notMustAlias:[]}") for variable b
	Allocation site $r0 = new benchmark.objects.A -> alias: [b, a], not alias: []

[PARAMETER] SPA_BUDGET_NODES: 75000, SUMM_RATIO: 3, TIME_BUDGET: 2
THRESHOLD: 3
[DEBUG] average number of incoming CG edges: 1
THRESHOLD: 3
[DEBUG] average number of incoming CG edges: 1
=========RESULTS FOR  basic.SimpleAlias1========
GT:2,[b, a]
FN:0,[]
FP:0,[]
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.0 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.0 seconds.
[Spark] Solution found in 0.0 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("node", "{allocId:1, mayAlias:[node], notMayAlias:[i,o,p,q], mustAlias:[node], notMustAlias:[i,o,p,q]}") for variable node
	Allocation site $r0 = new basic.Loops1$N -> alias: [node], not alias: [q, i, o, p]

THRESHOLD: 0
[DEBUG] average number of incoming CG edges: 0
THRESHOLD: 0
[DEBUG] average number of incoming CG edges: 0
THRESHOLD: 0
[DEBUG] average number of incoming CG edges: 0
THRESHOLD: 0
[DEBUG] average number of incoming CG edges: 0
THRESHOLD: 0
[DEBUG] average number of incoming CG edges: 0
=========RESULTS FOR  basic.Loops1========
GT:1,[node]
FN:0,[]
FP:0,[]
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.0 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.0 seconds.
[Spark] Solution found in 0.0 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b", "{allocId:1, mayAlias:[b,x], notMayAlias:[], mustAlias:[b,x], notMustAlias:[]}") for variable b
	Allocation site $r0 = new benchmark.objects.A -> alias: [x, b], not alias: []

THRESHOLD: 0
[DEBUG] average number of incoming CG edges: 0
THRESHOLD: 0
[DEBUG] average number of incoming CG edges: 0
=========RESULTS FOR  basic.Parameter1========
GT:2,[x, b]
FN:0,[]
FP:0,[]
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.0 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.0 seconds.
[Spark] Solution found in 0.0 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b", "{allocId:1, mayAlias:[b,x], notMayAlias:[], mustAlias:[b,x], notMustAlias:[]}") for variable b
	Allocation site $r0 = new benchmark.objects.A -> alias: [b, x], not alias: []

THRESHOLD: 0
[DEBUG] average number of incoming CG edges: 0
THRESHOLD: 0
[DEBUG] average number of incoming CG edges: 0
=========RESULTS FOR  basic.Parameter2========
GT:2,[x, b]
FN:0,[]
FP:0,[]
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.0 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.0 seconds.
[Spark] Solution found in 0.0 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b", "{allocId:1, mayAlias:[a,b], notMayAlias:[], mustAlias:[a,b], notMustAlias:[]}") for variable b
	Allocation site $r0 = new benchmark.objects.A -> alias: [b, a], not alias: []

THRESHOLD: 0
[DEBUG] average number of incoming CG edges: 0
THRESHOLD: 0
[DEBUG] average number of incoming CG edges: 0
[summary.pass] <benchmark.objects.A: void <init>()>
[summary.pass] <benchmark.objects.A: void <init>()>
[summary.pass] <benchmark.objects.A: void <init>()>
=========RESULTS FOR  basic.ReturnValue1========
GT:2,[b, a]
FN:0,[]
FP:0,[]
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.0 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.0 seconds.
[Spark] Solution found in 0.0 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b", "{allocId:1, mayAlias:[a,b], notMayAlias:[rv2], mustAlias:[a,b], notMustAlias:[rv2]}") for variable b
	Allocation site $r0 = new benchmark.objects.A -> alias: [a, b], not alias: [rv2]

THRESHOLD: 0
[DEBUG] average number of incoming CG edges: 0
THRESHOLD: 0
[DEBUG] average number of incoming CG edges: 0
THRESHOLD: 0
[DEBUG] average number of incoming CG edges: 0
=========RESULTS FOR  basic.ReturnValue2========
GT:2,[a, b]
FN:0,[]
FP:0,[]
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.0 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.0 seconds.
[Spark] Solution found in 0.0 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("x", "{allocId:1, mayAlias:[x], notMayAlias:[a,b,y], mustAlias:[x], notMustAlias:[a,b,y]}") for variable x
	Allocation site $r1 = new benchmark.objects.B -> alias: [x], not alias: [b, a, y]

THRESHOLD: 0
[DEBUG] average number of incoming CG edges: 0
THRESHOLD: 0
[DEBUG] average number of incoming CG edges: 0
THRESHOLD: 0
[DEBUG] average number of incoming CG edges: 0
THRESHOLD: 0
[DEBUG] average number of incoming CG edges: 0
[summary.fail] <benchmark.objects.A: void <init>()>
=========RESULTS FOR  basic.ReturnValue3========
GT:1,[x]
FN:0,[]
FP:1,[y]
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.0 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.0 seconds.
[Spark] Solution found in 0.0 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("x", "{allocId:1, mayAlias:[x,y], notMayAlias:[a,b], mustAlias:[x,y], notMustAlias:[a,b]}") for variable x
	Allocation site $r2 = new benchmark.objects.B -> alias: [y, x], not alias: [b, a]

THRESHOLD: 0
[DEBUG] average number of incoming CG edges: 0
THRESHOLD: 0
[DEBUG] average number of incoming CG edges: 0
THRESHOLD: 0
[DEBUG] average number of incoming CG edges: 0
THRESHOLD: 0
[DEBUG] average number of incoming CG edges: 0
=========RESULTS FOR  basic.Method1========
GT:2,[y, x]
FN:0,[]
FP:0,[]
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.0 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.0 seconds.
[Spark] Solution found in 0.0 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("x", "{allocId:1, mayAlias:[x,y], notMayAlias:[a,b,m2], mustAlias:[x,y], notMustAlias:[a,b,m2]}") for variable x
	Allocation site $r2 = new benchmark.objects.B -> alias: [x, y], not alias: [a, m2, b]

THRESHOLD: 0
[DEBUG] average number of incoming CG edges: 0
THRESHOLD: 0
[DEBUG] average number of incoming CG edges: 0
[summary.pass] <benchmark.objects.B: void <init>()>
[summary.pass] <benchmark.objects.B: void <init>()>
[summary.pass] <benchmark.objects.B: void <init>()>
[summary.pass] <benchmark.objects.A: void <init>()>
[summary.pass] <benchmark.objects.A: void <init>()>
[summary.pass] <benchmark.objects.A: void <init>()>
[summary.pass] <benchmark.objects.A: void <init>()>
[summary.pass] <benchmark.objects.A: void <init>()>
[summary.pass] <benchmark.objects.A: void <init>()>
[summary.pass] <benchmark.objects.A: void <init>()>
[summary.pass] <benchmark.objects.B: void <init>()>
[summary.pass] <benchmark.objects.B: void <init>()>
[summary.pass] <benchmark.objects.B: void <init>()>
[summary.pass] <benchmark.objects.B: void <init>()>
[summary.pass] <benchmark.objects.A: void <init>()>
[summary.pass] <benchmark.objects.A: void <init>()>
[summary.pass] <benchmark.objects.A: void <init>()>
[summary.pass] <benchmark.objects.A: void <init>()>
[summary.pass] <benchmark.objects.A: void <init>()>
[summary.pass] <benchmark.objects.A: void <init>()>
[summary.pass] <benchmark.objects.A: void <init>()>
[summary.pass] <benchmark.objects.A: void <init>()>
[summary.pass] <benchmark.objects.A: void <init>()>
[summary.pass] <benchmark.objects.A: void <init>()>
[summary.pass] <benchmark.objects.A: void <init>()>
THRESHOLD: 0
[DEBUG] average number of incoming CG edges: 0
THRESHOLD: 0
[DEBUG] average number of incoming CG edges: 0
THRESHOLD: 0
[DEBUG] average number of incoming CG edges: 0
=========RESULTS FOR  basic.Method2========
GT:2,[x, y]
FN:0,[]
FP:0,[]
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.0 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.0 seconds.
[Spark] Solution found in 0.0 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("a", "{allocId:1, mayAlias:[a], notMayAlias:[i,b], mustAlias:[a], notMustAlias:[i,b]},{allocId:2, mayAlias:[a,b], notMayAlias:[i], mustAlias:[a], notMustAlias:[i,b]}") for variable a
	Allocation site $r1 = new benchmark.objects.A -> alias: [b, a], not alias: [i]
	Allocation site $r0 = new benchmark.objects.A -> alias: [a], not alias: [b, i]

THRESHOLD: 0
[DEBUG] average number of incoming CG edges: 0
THRESHOLD: 0
[DEBUG] average number of incoming CG edges: 0
THRESHOLD: 0
[DEBUG] average number of incoming CG edges: 0
THRESHOLD: 0
[DEBUG] average number of incoming CG edges: 0
=========RESULTS FOR  basic.Branching1========
GT:2,[b, a]
FN:0,[]
FP:0,[]
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.0 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.0 seconds.
[Spark] Solution found in 0.0 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("n", "{allocId:1, mayAlias:[n], notMayAlias:[i,o,p,q], mustAlias:[n], notMustAlias:[i,o,p,q]}") for variable n
	Allocation site $r0 = new basic.Recursion1$N -> alias: [n], not alias: [q, o, p]

THRESHOLD: 0
[DEBUG] average number of incoming CG edges: 0
THRESHOLD: 0
[DEBUG] average number of incoming CG edges: 0
THRESHOLD: 0
[DEBUG] average number of incoming CG edges: 0
THRESHOLD: 0
[DEBUG] average number of incoming CG edges: 0
=========RESULTS FOR  basic.Recursion1========
GT:1,[n]
FN:0,[]
FP:0,[]
]]></system-out>

      <system-err><![CDATA[]]></system-err>

  </testsuite>
  <testsuite errors="0" failures="2" hostname="mac-spaeth.sit.fraunhofer.de" id="9" name="CollectionsTest" package="tests.yan" skipped="0" tests="4" time="17.99" timestamp="2015-06-16T11:58:22">
      <properties>
          <property name="java.vendor" value="Oracle Corporation" />

          <property name="sun.java.launcher" value="SUN_STANDARD" />

          <property name="eclipse.pdebuild.templates" value="/Applications/eclipse-luna/plugins/org.eclipse.pde.build_3.9.0.v20140415-2029/templates//" />

          <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers" />

          <property name="os.name" value="Mac OS X" />

          <property name="sun.boot.class.path" value="/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/resources.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/rt.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/sunrsasign.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/jsse.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/jce.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/charsets.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/jfr.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/classes" />

          <property name="java.vm.specification.vendor" value="Oracle Corporation" />

          <property name="ant.home" value="/Applications/eclipse-luna/plugins/org.apache.ant_1.9.2.v201404171502" />

          <property name="java.runtime.version" value="1.7.0_51-b13" />

          <property name="user.name" value="spaeth" />

          <property name="user.language" value="de" />

          <property name="sun.boot.library.path" value="/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib" />

          <property name="ant.project.default-target" value="compile" />

          <property name="ant.project.name" value="soot-infoflow" />

          <property name="java.version" value="1.7.0_51" />

          <property name="user.timezone" value="" />

          <property name="sun.arch.data.model" value="64" />

          <property name="http.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16" />

          <property name="java.endorsed.dirs" value="/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/endorsed" />

          <property name="sun.cpu.isalist" value="" />

          <property name="sun.jnu.encoding" value="UTF-8" />

          <property name="file.encoding.pkg" value="sun.io" />

          <property name="file.separator" value="/" />

          <property name="java.specification.name" value="Java Platform API Specification" />

          <property name="java.class.version" value="51.0" />

          <property name="user.country" value="DE" />

          <property name="java.home" value="/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre" />

          <property name="java.vm.info" value="mixed mode" />

          <property name="ant.file" value="/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/experiments.xml" />

          <property name="os.version" value="10.10.3" />

          <property name="path.separator" value=":" />

          <property name="java.vm.version" value="24.51-b03" />

          <property name="ant.file.soot-infoflow" value="/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/experiments.xml" />

          <property name="ant.library.dir" value="/Applications/eclipse-luna/plugins/org.apache.ant_1.9.2.v201404171502/lib" />

          <property name="java.awt.printerjob" value="sun.lwawt.macosx.CPrinterJob" />

          <property name="sun.io.unicode.encoding" value="UnicodeBig" />

          <property name="awt.toolkit" value="sun.lwawt.macosx.LWCToolkit" />

          <property name="socksNonProxyHosts" value="local|*.local|169.254/16|*.169.254/16" />

          <property name="ftp.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16" />

          <property name="eclipse.pdebuild.scripts" value="/Applications/eclipse-luna/plugins/org.eclipse.pde.build_3.9.0.v20140415-2029/scripts//" />

          <property name="user.home" value="/Users/spaeth" />

          <property name="java.specification.vendor" value="Oracle Corporation" />

          <property name="java.library.path" value="/Users/spaeth/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:." />

          <property name="java.vendor.url" value="http://java.oracle.com/" />

          <property name="java.vm.vendor" value="Oracle Corporation" />

          <property name="gopherProxySet" value="false" />

          <property name="java.runtime.name" value="Java(TM) SE Runtime Environment" />

          <property name="sun.java.command" value="org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner tests.yan.CollectionsTest filtertrace=true haltOnError=false haltOnFailure=false formatter=org.apache.tools.ant.taskdefs.optional.junit.OutErrSummaryJUnitResultFormatter showoutput=false outputtoformatters=true logfailedtests=true logtestlistenerevents=false formatter=org.apache.tools.ant.taskdefs.optional.junit.XMLJUnitResultFormatter,/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/reports/TEST-tests.yan.CollectionsTest.xml crashfile=/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/junitvmwatcher112291439188300785.properties propsfile=/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/junit1296943658868066194.properties" />

          <property name="java.class.path" value="/Users/spaeth/Documents/workspace/builds/soot-trunk.jar:/Users/spaeth/Documents/workspace/builds/dart.jar:/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/bin:/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/lib/junit.jar:/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/lib/org.hamcrest.core_1.3.0.jar:/Applications/eclipse-luna/plugins/org.apache.ant_1.9.2.v201404171502/lib/ant-launcher.jar:/Applications/eclipse-luna/plugins/org.apache.ant_1.9.2.v201404171502/lib/ant.jar:/Applications/eclipse-luna/plugins/org.apache.ant_1.9.2.v201404171502/lib/ant-junit.jar:/Applications/eclipse-luna/plugins/org.apache.ant_1.9.2.v201404171502/lib/ant-junit4.jar" />

          <property name="ant.version" value="Apache Ant(TM) version 1.9.2 compiled on July 8 2013" />

          <property name="ant.file.type.soot-infoflow" value="file" />

          <property name="java.vm.specification.name" value="Java Virtual Machine Specification" />

          <property name="java.vm.specification.version" value="1.7" />

          <property name="sun.cpu.endian" value="little" />

          <property name="sun.os.patch.level" value="unknown" />

          <property name="eclipse.pdebuild.home" value="/Applications/eclipse-luna/plugins/org.eclipse.pde.build_3.9.0.v20140415-2029/.//" />

          <property name="java.io.tmpdir" value="/var/folders/61/20qsh7_j6_ncnywwtd50d_qm0000gp/T/" />

          <property name="java.vendor.url.bug" value="http://bugreport.sun.com/bugreport/" />

          <property name="os.arch" value="x86_64" />

          <property name="java.awt.graphicsenv" value="sun.awt.CGraphicsEnvironment" />

          <property name="java.ext.dirs" value="/Users/spaeth/Library/Java/Extensions:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/ext:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java" />

          <property name="user.dir" value="/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark" />

          <property name="dart.jar" value="/Users/spaeth/Documents/workspace/builds/dart.jar" />

          <property name="line.separator" value="&#xa;" />

          <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM" />

          <property name="soot.jar" value="/Users/spaeth/Documents/workspace/builds/soot-trunk.jar" />

          <property name="basedir" value="/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark" />

          <property name="ant.java.version" value="1.7" />

          <property name="ant.core.lib" value="/Applications/eclipse-luna/plugins/org.apache.ant_1.9.2.v201404171502/lib/ant.jar" />

          <property name="file.encoding" value="US-ASCII" />

          <property name="java.specification.version" value="1.7" />

          <property name="ant.project.invoked-targets" value="reporttests" />

      </properties>

      <testcase classname="tests.yan.CollectionsTest" name="array1" time="2.438">
          <failure message=" FP:[a]" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError:  FP:[a]
	at benchmark.internal.Evaluator.evaluateAlias(Evaluator.java:79)
	at tests.yan.YanExecutor.evaluate(YanExecutor.java:37)
	at benchmark.internal.Test$1.internalTransform(Test.java:45)
	at soot.SceneTransformer.transform(SceneTransformer.java:39)
	at soot.Transform.apply(Transform.java:90)
	at soot.ScenePack.internalApply(ScenePack.java:40)
	at soot.Pack.apply(Pack.java:116)
	at benchmark.internal.Test.getQueryForTest(Test.java:57)
	at benchmark.internal.Test.&lt;init&gt;(Test.java:30)
	at tests.yan.YanExecutor.&lt;init&gt;(YanExecutor.java:31)
	at tests.yan.CollectionsTest.array1(CollectionsTest.java:8)
</failure>

      </testcase>

      <testcase classname="tests.yan.CollectionsTest" name="array2" time="2.038" />

      <testcase classname="tests.yan.CollectionsTest" name="map1" time="7.753">
          <failure message=" FP:[a]" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError:  FP:[a]
	at benchmark.internal.Evaluator.evaluateAlias(Evaluator.java:79)
	at tests.yan.YanExecutor.evaluate(YanExecutor.java:37)
	at benchmark.internal.Test$1.internalTransform(Test.java:45)
	at soot.SceneTransformer.transform(SceneTransformer.java:39)
	at soot.Transform.apply(Transform.java:90)
	at soot.ScenePack.internalApply(ScenePack.java:40)
	at soot.Pack.apply(Pack.java:116)
	at benchmark.internal.Test.getQueryForTest(Test.java:57)
	at benchmark.internal.Test.&lt;init&gt;(Test.java:30)
	at tests.yan.YanExecutor.&lt;init&gt;(YanExecutor.java:31)
	at tests.yan.CollectionsTest.map1(CollectionsTest.java:23)
</failure>

      </testcase>

      <testcase classname="tests.yan.CollectionsTest" name="list1" time="5.682" />

      <system-out><![CDATA[Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.2 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.0 seconds.
[Spark] Solution found in 0.0 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("c", "{allocId:1, mayAlias:[c,b], notMayAlias:[a,array], mustAlias:[c,b], notMustAlias:[a,array]}") for variable c
	Allocation site $r1 = new benchmark.objects.A -> alias: [b, c], not alias: [array, a]

[PARAMETER] SPA_BUDGET_NODES: 75000, SUMM_RATIO: 3, TIME_BUDGET: 2
THRESHOLD: 6
[DEBUG] average number of incoming CG edges: 2
THRESHOLD: 6
[DEBUG] average number of incoming CG edges: 2
THRESHOLD: 6
[DEBUG] average number of incoming CG edges: 2
THRESHOLD: 6
[DEBUG] average number of incoming CG edges: 2
=========RESULTS FOR  collections.Array1========
GT:2,[b, c]
FN:0,[]
FP:1,[a]
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.0 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.0 seconds.
[Spark] Solution found in 0.0 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("slice", "{allocId:1, mayAlias:[slice], notMayAlias:[a,b,array], mustAlias:[slice], notMustAlias:[a,b,array]}") for variable slice
	Allocation site array = newarray (benchmark.objects.A[])[0] -> alias: [slice], not alias: [b, a, array]

THRESHOLD: 3
[DEBUG] average number of incoming CG edges: 1
THRESHOLD: 3
[DEBUG] average number of incoming CG edges: 1
THRESHOLD: 3
[DEBUG] average number of incoming CG edges: 1
THRESHOLD: 3
[DEBUG] average number of incoming CG edges: 1
=========RESULTS FOR  collections.Array2========
GT:1,[slice]
FN:0,[]
FP:0,[]
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.0 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 3.0 seconds.
[Spark] Solution found in 3.0 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("c", "{allocId:1, mayAlias:[c,b], notMayAlias:[a,map], mustAlias:[c,b], notMustAlias:[a,map]}") for variable c
	Allocation site $r2 = new benchmark.objects.A -> alias: [b, c], not alias: [map, a]

THRESHOLD: 15
[DEBUG] average number of incoming CG edges: 5
THRESHOLD: 15
[DEBUG] average number of incoming CG edges: 5
THRESHOLD: 15
[DEBUG] average number of incoming CG edges: 5
THRESHOLD: 15
[DEBUG] average number of incoming CG edges: 5
=========RESULTS FOR  collections.Map1========
GT:2,[b, c]
FN:0,[]
FP:1,[a]
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.0 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.3 seconds.
[Spark] Solution found in 0.3 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b", "{allocId:1, mayAlias:[c,b], notMayAlias:[a,list], mustAlias:[c,b], notMustAlias:[a,list]}") for variable b
	Allocation site $r2 = new benchmark.objects.A -> alias: [b, c], not alias: [list, a]

THRESHOLD: 0
[DEBUG] average number of incoming CG edges: 0
THRESHOLD: 0
[DEBUG] average number of incoming CG edges: 0
THRESHOLD: 0
[DEBUG] average number of incoming CG edges: 0
THRESHOLD: 0
[DEBUG] average number of incoming CG edges: 0
=========RESULTS FOR  collections.List1========
GT:2,[b, c]
FN:0,[]
FP:0,[]
]]></system-out>

      <system-err><![CDATA[]]></system-err>

  </testsuite>
  <testsuite errors="0" failures="3" hostname="mac-spaeth.sit.fraunhofer.de" id="10" name="CornerCasesTest" package="tests.yan" skipped="0" tests="8" time="10.332" timestamp="2015-06-16T11:58:41">
      <properties>
          <property name="java.vendor" value="Oracle Corporation" />

          <property name="sun.java.launcher" value="SUN_STANDARD" />

          <property name="eclipse.pdebuild.templates" value="/Applications/eclipse-luna/plugins/org.eclipse.pde.build_3.9.0.v20140415-2029/templates//" />

          <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers" />

          <property name="os.name" value="Mac OS X" />

          <property name="sun.boot.class.path" value="/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/resources.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/rt.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/sunrsasign.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/jsse.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/jce.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/charsets.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/jfr.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/classes" />

          <property name="java.vm.specification.vendor" value="Oracle Corporation" />

          <property name="ant.home" value="/Applications/eclipse-luna/plugins/org.apache.ant_1.9.2.v201404171502" />

          <property name="java.runtime.version" value="1.7.0_51-b13" />

          <property name="user.name" value="spaeth" />

          <property name="user.language" value="de" />

          <property name="sun.boot.library.path" value="/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib" />

          <property name="ant.project.default-target" value="compile" />

          <property name="ant.project.name" value="soot-infoflow" />

          <property name="java.version" value="1.7.0_51" />

          <property name="user.timezone" value="" />

          <property name="sun.arch.data.model" value="64" />

          <property name="http.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16" />

          <property name="java.endorsed.dirs" value="/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/endorsed" />

          <property name="sun.cpu.isalist" value="" />

          <property name="sun.jnu.encoding" value="UTF-8" />

          <property name="file.encoding.pkg" value="sun.io" />

          <property name="file.separator" value="/" />

          <property name="java.specification.name" value="Java Platform API Specification" />

          <property name="java.class.version" value="51.0" />

          <property name="user.country" value="DE" />

          <property name="java.home" value="/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre" />

          <property name="java.vm.info" value="mixed mode" />

          <property name="ant.file" value="/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/experiments.xml" />

          <property name="os.version" value="10.10.3" />

          <property name="path.separator" value=":" />

          <property name="java.vm.version" value="24.51-b03" />

          <property name="ant.file.soot-infoflow" value="/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/experiments.xml" />

          <property name="ant.library.dir" value="/Applications/eclipse-luna/plugins/org.apache.ant_1.9.2.v201404171502/lib" />

          <property name="java.awt.printerjob" value="sun.lwawt.macosx.CPrinterJob" />

          <property name="sun.io.unicode.encoding" value="UnicodeBig" />

          <property name="awt.toolkit" value="sun.lwawt.macosx.LWCToolkit" />

          <property name="socksNonProxyHosts" value="local|*.local|169.254/16|*.169.254/16" />

          <property name="ftp.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16" />

          <property name="eclipse.pdebuild.scripts" value="/Applications/eclipse-luna/plugins/org.eclipse.pde.build_3.9.0.v20140415-2029/scripts//" />

          <property name="user.home" value="/Users/spaeth" />

          <property name="java.specification.vendor" value="Oracle Corporation" />

          <property name="java.library.path" value="/Users/spaeth/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:." />

          <property name="java.vendor.url" value="http://java.oracle.com/" />

          <property name="java.vm.vendor" value="Oracle Corporation" />

          <property name="gopherProxySet" value="false" />

          <property name="java.runtime.name" value="Java(TM) SE Runtime Environment" />

          <property name="sun.java.command" value="org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner tests.yan.CornerCasesTest filtertrace=true haltOnError=false haltOnFailure=false formatter=org.apache.tools.ant.taskdefs.optional.junit.OutErrSummaryJUnitResultFormatter showoutput=false outputtoformatters=true logfailedtests=true logtestlistenerevents=false formatter=org.apache.tools.ant.taskdefs.optional.junit.XMLJUnitResultFormatter,/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/reports/TEST-tests.yan.CornerCasesTest.xml crashfile=/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/junitvmwatcher2575180762475368468.properties propsfile=/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/junit1380636581435725572.properties" />

          <property name="java.class.path" value="/Users/spaeth/Documents/workspace/builds/soot-trunk.jar:/Users/spaeth/Documents/workspace/builds/dart.jar:/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/bin:/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/lib/junit.jar:/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/lib/org.hamcrest.core_1.3.0.jar:/Applications/eclipse-luna/plugins/org.apache.ant_1.9.2.v201404171502/lib/ant-launcher.jar:/Applications/eclipse-luna/plugins/org.apache.ant_1.9.2.v201404171502/lib/ant.jar:/Applications/eclipse-luna/plugins/org.apache.ant_1.9.2.v201404171502/lib/ant-junit.jar:/Applications/eclipse-luna/plugins/org.apache.ant_1.9.2.v201404171502/lib/ant-junit4.jar" />

          <property name="ant.version" value="Apache Ant(TM) version 1.9.2 compiled on July 8 2013" />

          <property name="ant.file.type.soot-infoflow" value="file" />

          <property name="java.vm.specification.name" value="Java Virtual Machine Specification" />

          <property name="java.vm.specification.version" value="1.7" />

          <property name="sun.cpu.endian" value="little" />

          <property name="sun.os.patch.level" value="unknown" />

          <property name="eclipse.pdebuild.home" value="/Applications/eclipse-luna/plugins/org.eclipse.pde.build_3.9.0.v20140415-2029/.//" />

          <property name="java.io.tmpdir" value="/var/folders/61/20qsh7_j6_ncnywwtd50d_qm0000gp/T/" />

          <property name="java.vendor.url.bug" value="http://bugreport.sun.com/bugreport/" />

          <property name="os.arch" value="x86_64" />

          <property name="java.awt.graphicsenv" value="sun.awt.CGraphicsEnvironment" />

          <property name="java.ext.dirs" value="/Users/spaeth/Library/Java/Extensions:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/ext:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java" />

          <property name="user.dir" value="/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark" />

          <property name="dart.jar" value="/Users/spaeth/Documents/workspace/builds/dart.jar" />

          <property name="line.separator" value="&#xa;" />

          <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM" />

          <property name="soot.jar" value="/Users/spaeth/Documents/workspace/builds/soot-trunk.jar" />

          <property name="basedir" value="/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark" />

          <property name="ant.java.version" value="1.7" />

          <property name="ant.core.lib" value="/Applications/eclipse-luna/plugins/org.apache.ant_1.9.2.v201404171502/lib/ant.jar" />

          <property name="file.encoding" value="US-ASCII" />

          <property name="java.specification.version" value="1.7" />

          <property name="ant.project.invoked-targets" value="reporttests" />

      </properties>

      <testcase classname="tests.yan.CornerCasesTest" name="contextSensitivty1" time="3.358" />

      <testcase classname="tests.yan.CornerCasesTest" name="contextSensitivty2" time="2.284" />

      <testcase classname="tests.yan.CornerCasesTest" name="contextSensitivty3" time="0.847" />

      <testcase classname="tests.yan.CornerCasesTest" name="flowSensitivty1" time="0.497">
          <failure message=" FP:[a]" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError:  FP:[a]
	at benchmark.internal.Evaluator.evaluateAlias(Evaluator.java:79)
	at tests.yan.YanExecutor.evaluate(YanExecutor.java:37)
	at benchmark.internal.Test$1.internalTransform(Test.java:45)
	at soot.SceneTransformer.transform(SceneTransformer.java:39)
	at soot.Transform.apply(Transform.java:90)
	at soot.ScenePack.internalApply(ScenePack.java:40)
	at soot.Pack.apply(Pack.java:116)
	at benchmark.internal.Test.getQueryForTest(Test.java:57)
	at benchmark.internal.Test.&lt;init&gt;(Test.java:30)
	at tests.yan.YanExecutor.&lt;init&gt;(YanExecutor.java:31)
	at tests.yan.CornerCasesTest.flowSensitivty1(CornerCasesTest.java:28)
</failure>

      </testcase>

      <testcase classname="tests.yan.CornerCasesTest" name="strongUpdate1" time="0.468" />

      <testcase classname="tests.yan.CornerCasesTest" name="accessPath1" time="0.511" />

      <testcase classname="tests.yan.CornerCasesTest" name="objectSensitivty1" time="1.585">
          <failure message=" FP:[b1, b3]" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError:  FP:[b1, b3]
	at benchmark.internal.Evaluator.evaluateAlias(Evaluator.java:79)
	at tests.yan.YanExecutor.evaluate(YanExecutor.java:37)
	at benchmark.internal.Test$1.internalTransform(Test.java:45)
	at soot.SceneTransformer.transform(SceneTransformer.java:39)
	at soot.Transform.apply(Transform.java:90)
	at soot.ScenePack.internalApply(ScenePack.java:40)
	at soot.Pack.apply(Pack.java:116)
	at benchmark.internal.Test.getQueryForTest(Test.java:57)
	at benchmark.internal.Test.&lt;init&gt;(Test.java:30)
	at tests.yan.YanExecutor.&lt;init&gt;(YanExecutor.java:31)
	at tests.yan.CornerCasesTest.objectSensitivty1(CornerCasesTest.java:33)
</failure>

      </testcase>

      <testcase classname="tests.yan.CornerCasesTest" name="objectSensitivty2" time="0.72">
          <failure message="FN: [b2] " type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: FN: [b2] 
	at benchmark.internal.Evaluator.evaluateAlias(Evaluator.java:79)
	at tests.yan.YanExecutor.evaluate(YanExecutor.java:37)
	at benchmark.internal.Test$1.internalTransform(Test.java:45)
	at soot.SceneTransformer.transform(SceneTransformer.java:39)
	at soot.Transform.apply(Transform.java:90)
	at soot.ScenePack.internalApply(ScenePack.java:40)
	at soot.Pack.apply(Pack.java:116)
	at benchmark.internal.Test.getQueryForTest(Test.java:57)
	at benchmark.internal.Test.&lt;init&gt;(Test.java:30)
	at tests.yan.YanExecutor.&lt;init&gt;(YanExecutor.java:31)
	at tests.yan.CornerCasesTest.objectSensitivty2(CornerCasesTest.java:38)
</failure>

      </testcase>

      <system-out><![CDATA[Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.2 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.0 seconds.
[Spark] Solution found in 0.0 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b", "{allocId:1, mayAlias:[a,b], notMayAlias:[], mustAlias:[a,b], notMustAlias:[]},{allocId:2, mayAlias:[a], notMayAlias:[b], mustAlias:[a], notMustAlias:[b]}") for variable b
	Allocation site $r1 = new benchmark.objects.A -> alias: [a], not alias: [b]
	Allocation site $r0 = new benchmark.objects.A -> alias: [b, a], not alias: []

[PARAMETER] SPA_BUDGET_NODES: 75000, SUMM_RATIO: 3, TIME_BUDGET: 2
THRESHOLD: 6
[DEBUG] average number of incoming CG edges: 2
THRESHOLD: 6
[DEBUG] average number of incoming CG edges: 2
THRESHOLD: 6
[DEBUG] average number of incoming CG edges: 2
[summary.fail] <benchmark.objects.A: void <init>()>
=========RESULTS FOR  cornerCases.ContextSensitivity1========
GT:2,[b, a]
FN:0,[]
FP:0,[]
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.0 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.0 seconds.
[Spark] Solution found in 0.0 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b", "{allocId:1, mayAlias:[a,b], notMayAlias:[], mustAlias:[a,b], notMustAlias:[]},{allocId:2, mayAlias:[a], notMayAlias:[b], mustAlias:[a], notMustAlias:[b]}") for variable b
	Allocation site $r1 = new benchmark.objects.A -> alias: [a], not alias: [b]
	Allocation site $r0 = new benchmark.objects.A -> alias: [a, b], not alias: []

THRESHOLD: 3
[DEBUG] average number of incoming CG edges: 1
THRESHOLD: 3
[DEBUG] average number of incoming CG edges: 1
THRESHOLD: 3
[DEBUG] average number of incoming CG edges: 1
=========RESULTS FOR  cornerCases.ContextSensitivity2========
GT:2,[a, b]
FN:0,[]
FP:0,[]
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.0 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.0 seconds.
[Spark] Solution found in 0.0 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b", "{allocId:1, mayAlias:[a,b], notMayAlias:[], mustAlias:[a,b], notMustAlias:[]},{allocId:2, mayAlias:[a], notMayAlias:[b], mustAlias:[a], notMustAlias:[b]}") for variable b
	Allocation site $r1 = new benchmark.objects.A -> alias: [a], not alias: [b]
	Allocation site $r0 = new benchmark.objects.A -> alias: [a, b], not alias: []

THRESHOLD: 0
[DEBUG] average number of incoming CG edges: 0
THRESHOLD: 0
[DEBUG] average number of incoming CG edges: 0
THRESHOLD: 0
[DEBUG] average number of incoming CG edges: 0
=========RESULTS FOR  cornerCases.ContextSensitivity3========
GT:2,[a, b]
FN:0,[]
FP:0,[]
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.1 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.0 seconds.
[Spark] Solution found in 0.0 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b", "{allocId:1, mayAlias:[b], notMayAlias:[a], mustAlias:[b], notMustAlias:[a]}") for variable b
	Allocation site $r1 = new benchmark.objects.A -> alias: [b], not alias: [a]

THRESHOLD: 0
[DEBUG] average number of incoming CG edges: 0
THRESHOLD: 0
[DEBUG] average number of incoming CG edges: 0
=========RESULTS FOR  cornerCases.FlowSensitivity1========
GT:1,[b]
FN:0,[]
FP:1,[a]
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.0 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.0 seconds.
[Spark] Solution found in 0.0 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("x", "{allocId:1, mayAlias:[x,y], notMayAlias:[a,b], mustAlias:[x,y], notMustAlias:[a,b]}") for variable x
	Allocation site $r1 = new benchmark.objects.B -> alias: [y, x], not alias: [a, b]

THRESHOLD: 0
[DEBUG] average number of incoming CG edges: 0
THRESHOLD: 0
[DEBUG] average number of incoming CG edges: 0
THRESHOLD: 0
[DEBUG] average number of incoming CG edges: 0
THRESHOLD: 0
[DEBUG] average number of incoming CG edges: 0
=========RESULTS FOR  cornerCases.StrongUpdate1========
GT:2,[y, x]
FN:0,[]
FP:0,[]
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.0 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.0 seconds.
[Spark] Solution found in 0.0 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("x", "{allocId:1, mayAlias:[x,y], notMayAlias:[a,b], mustAlias:[a.f,b.f], notMustAlias:[a,b]}") for variable x
	Allocation site $r0 = new benchmark.objects.A -> alias: [y, x], not alias: [a, b]

THRESHOLD: 0
[DEBUG] average number of incoming CG edges: 0
THRESHOLD: 0
[DEBUG] average number of incoming CG edges: 0
THRESHOLD: 0
[DEBUG] average number of incoming CG edges: 0
THRESHOLD: 0
[DEBUG] average number of incoming CG edges: 0
=========RESULTS FOR  cornerCases.AccessPath1========
GT:2,[y, x]
FN:0,[]
FP:0,[]
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.0 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.0 seconds.
[Spark] Solution found in 0.0 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b4", "{allocId:1, mayAlias:[b4,b2], notMayAlias:[a1,a2,b1,b3], mustAlias:[b4,b2], notMustAlias:[a1,a2,b1,b3]}") for variable b4
	Allocation site $r1 = new benchmark.objects.B -> alias: [b2, b4], not alias: [b1, a1, b3, a2]

THRESHOLD: 0
[DEBUG] average number of incoming CG edges: 0
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
THRESHOLD: 0
[DEBUG] average number of incoming CG edges: 0
THRESHOLD: 0
[DEBUG] average number of incoming CG edges: 0
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
THRESHOLD: 0
[DEBUG] average number of incoming CG edges: 0
THRESHOLD: 0
[DEBUG] average number of incoming CG edges: 0
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: void <init>(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B getF()>
THRESHOLD: 0
[DEBUG] average number of incoming CG edges: 0
=========RESULTS FOR  cornerCases.ObjectSensitivity1========
GT:2,[b2, b4]
FN:0,[]
FP:2,[b1, b3]
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.0 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.0 seconds.
[Spark] Solution found in 0.0 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b4", "{allocId:1, mayAlias:[b4,b2], notMayAlias:[a,b1,b3], mustAlias:[b4,b2], notMustAlias:[a,b1,b3]}") for variable b4
	Allocation site $r1 = new benchmark.objects.B -> alias: [b2, b4], not alias: [b3, b1, a]

THRESHOLD: 0
[DEBUG] average number of incoming CG edges: 0
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
THRESHOLD: 0
[DEBUG] average number of incoming CG edges: 0
THRESHOLD: 0
[DEBUG] average number of incoming CG edges: 0
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
THRESHOLD: 0
[DEBUG] average number of incoming CG edges: 0
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
[summary.pass] <benchmark.objects.A: benchmark.objects.B id(benchmark.objects.B)>
THRESHOLD: 0
[DEBUG] average number of incoming CG edges: 0
=========RESULTS FOR  cornerCases.ObjectSensitivity2========
GT:2,[b2, b4]
FN:1,[b2]
FP:0,[]
]]></system-out>

      <system-err><![CDATA[]]></system-err>

  </testsuite>
  <testsuite errors="1" failures="3" hostname="mac-spaeth.sit.fraunhofer.de" id="11" name="GeneralJavaTest" package="tests.yan" skipped="0" tests="8" time="11.373" timestamp="2015-06-16T11:58:58">
      <properties>
          <property name="java.vendor" value="Oracle Corporation" />

          <property name="sun.java.launcher" value="SUN_STANDARD" />

          <property name="eclipse.pdebuild.templates" value="/Applications/eclipse-luna/plugins/org.eclipse.pde.build_3.9.0.v20140415-2029/templates//" />

          <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers" />

          <property name="os.name" value="Mac OS X" />

          <property name="sun.boot.class.path" value="/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/resources.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/rt.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/sunrsasign.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/jsse.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/jce.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/charsets.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/jfr.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/classes" />

          <property name="java.vm.specification.vendor" value="Oracle Corporation" />

          <property name="ant.home" value="/Applications/eclipse-luna/plugins/org.apache.ant_1.9.2.v201404171502" />

          <property name="java.runtime.version" value="1.7.0_51-b13" />

          <property name="user.name" value="spaeth" />

          <property name="user.language" value="de" />

          <property name="sun.boot.library.path" value="/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib" />

          <property name="ant.project.default-target" value="compile" />

          <property name="ant.project.name" value="soot-infoflow" />

          <property name="java.version" value="1.7.0_51" />

          <property name="user.timezone" value="" />

          <property name="sun.arch.data.model" value="64" />

          <property name="http.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16" />

          <property name="java.endorsed.dirs" value="/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/endorsed" />

          <property name="sun.cpu.isalist" value="" />

          <property name="sun.jnu.encoding" value="UTF-8" />

          <property name="file.encoding.pkg" value="sun.io" />

          <property name="file.separator" value="/" />

          <property name="java.specification.name" value="Java Platform API Specification" />

          <property name="java.class.version" value="51.0" />

          <property name="user.country" value="DE" />

          <property name="java.home" value="/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre" />

          <property name="java.vm.info" value="mixed mode" />

          <property name="ant.file" value="/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/experiments.xml" />

          <property name="os.version" value="10.10.3" />

          <property name="path.separator" value=":" />

          <property name="java.vm.version" value="24.51-b03" />

          <property name="ant.file.soot-infoflow" value="/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/experiments.xml" />

          <property name="ant.library.dir" value="/Applications/eclipse-luna/plugins/org.apache.ant_1.9.2.v201404171502/lib" />

          <property name="java.awt.printerjob" value="sun.lwawt.macosx.CPrinterJob" />

          <property name="sun.io.unicode.encoding" value="UnicodeBig" />

          <property name="awt.toolkit" value="sun.lwawt.macosx.LWCToolkit" />

          <property name="socksNonProxyHosts" value="local|*.local|169.254/16|*.169.254/16" />

          <property name="ftp.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16" />

          <property name="eclipse.pdebuild.scripts" value="/Applications/eclipse-luna/plugins/org.eclipse.pde.build_3.9.0.v20140415-2029/scripts//" />

          <property name="user.home" value="/Users/spaeth" />

          <property name="java.specification.vendor" value="Oracle Corporation" />

          <property name="java.library.path" value="/Users/spaeth/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:." />

          <property name="java.vendor.url" value="http://java.oracle.com/" />

          <property name="java.vm.vendor" value="Oracle Corporation" />

          <property name="gopherProxySet" value="false" />

          <property name="java.runtime.name" value="Java(TM) SE Runtime Environment" />

          <property name="sun.java.command" value="org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner tests.yan.GeneralJavaTest filtertrace=true haltOnError=false haltOnFailure=false formatter=org.apache.tools.ant.taskdefs.optional.junit.OutErrSummaryJUnitResultFormatter showoutput=false outputtoformatters=true logfailedtests=true logtestlistenerevents=false formatter=org.apache.tools.ant.taskdefs.optional.junit.XMLJUnitResultFormatter,/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/reports/TEST-tests.yan.GeneralJavaTest.xml crashfile=/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/junitvmwatcher362245535355286041.properties propsfile=/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/junit8673366504870191366.properties" />

          <property name="java.class.path" value="/Users/spaeth/Documents/workspace/builds/soot-trunk.jar:/Users/spaeth/Documents/workspace/builds/dart.jar:/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/bin:/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/lib/junit.jar:/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark/lib/org.hamcrest.core_1.3.0.jar:/Applications/eclipse-luna/plugins/org.apache.ant_1.9.2.v201404171502/lib/ant-launcher.jar:/Applications/eclipse-luna/plugins/org.apache.ant_1.9.2.v201404171502/lib/ant.jar:/Applications/eclipse-luna/plugins/org.apache.ant_1.9.2.v201404171502/lib/ant-junit.jar:/Applications/eclipse-luna/plugins/org.apache.ant_1.9.2.v201404171502/lib/ant-junit4.jar" />

          <property name="ant.version" value="Apache Ant(TM) version 1.9.2 compiled on July 8 2013" />

          <property name="ant.file.type.soot-infoflow" value="file" />

          <property name="java.vm.specification.name" value="Java Virtual Machine Specification" />

          <property name="java.vm.specification.version" value="1.7" />

          <property name="sun.cpu.endian" value="little" />

          <property name="sun.os.patch.level" value="unknown" />

          <property name="eclipse.pdebuild.home" value="/Applications/eclipse-luna/plugins/org.eclipse.pde.build_3.9.0.v20140415-2029/.//" />

          <property name="java.io.tmpdir" value="/var/folders/61/20qsh7_j6_ncnywwtd50d_qm0000gp/T/" />

          <property name="java.vendor.url.bug" value="http://bugreport.sun.com/bugreport/" />

          <property name="os.arch" value="x86_64" />

          <property name="java.awt.graphicsenv" value="sun.awt.CGraphicsEnvironment" />

          <property name="java.ext.dirs" value="/Users/spaeth/Library/Java/Extensions:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/ext:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java" />

          <property name="user.dir" value="/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark" />

          <property name="dart.jar" value="/Users/spaeth/Documents/workspace/builds/dart.jar" />

          <property name="line.separator" value="&#xa;" />

          <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM" />

          <property name="soot.jar" value="/Users/spaeth/Documents/workspace/builds/soot-trunk.jar" />

          <property name="basedir" value="/Users/spaeth/Documents/DART-related/alias-benchmark/AliasBenchmark" />

          <property name="ant.java.version" value="1.7" />

          <property name="ant.core.lib" value="/Applications/eclipse-luna/plugins/org.apache.ant_1.9.2.v201404171502/lib/ant.jar" />

          <property name="file.encoding" value="US-ASCII" />

          <property name="java.specification.version" value="1.7" />

          <property name="ant.project.invoked-targets" value="reporttests" />

      </properties>

      <testcase classname="tests.yan.GeneralJavaTest" name="interface1" time="3.274" />

      <testcase classname="tests.yan.GeneralJavaTest" name="exception1" time="2.704" />

      <testcase classname="tests.yan.GeneralJavaTest" name="exception2" time="0.533">
          <error type="java.lang.NullPointerException">java.lang.NullPointerException
	at benchmark.internal.Evaluator.evaluateAlias(Evaluator.java:71)
	at tests.yan.YanExecutor.evaluate(YanExecutor.java:37)
	at benchmark.internal.Test$1.internalTransform(Test.java:45)
	at soot.SceneTransformer.transform(SceneTransformer.java:39)
	at soot.Transform.apply(Transform.java:90)
	at soot.ScenePack.internalApply(ScenePack.java:40)
	at soot.Pack.apply(Pack.java:116)
	at benchmark.internal.Test.getQueryForTest(Test.java:57)
	at benchmark.internal.Test.&lt;init&gt;(Test.java:30)
	at tests.yan.YanExecutor.&lt;init&gt;(YanExecutor.java:31)
	at tests.yan.GeneralJavaTest.exception2(GeneralJavaTest.java:12)
</error>

      </testcase>

      <testcase classname="tests.yan.GeneralJavaTest" name="null1" time="0.443">
          <failure message=" FP:[b]" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError:  FP:[b]
	at benchmark.internal.Evaluator.evaluateAlias(Evaluator.java:79)
	at tests.yan.YanExecutor.evaluate(YanExecutor.java:37)
	at benchmark.internal.Test$1.internalTransform(Test.java:45)
	at soot.SceneTransformer.transform(SceneTransformer.java:39)
	at soot.Transform.apply(Transform.java:90)
	at soot.ScenePack.internalApply(ScenePack.java:40)
	at soot.Pack.apply(Pack.java:116)
	at benchmark.internal.Test.getQueryForTest(Test.java:57)
	at benchmark.internal.Test.&lt;init&gt;(Test.java:30)
	at tests.yan.YanExecutor.&lt;init&gt;(YanExecutor.java:31)
	at tests.yan.GeneralJavaTest.null1(GeneralJavaTest.java:21)
</failure>

      </testcase>

      <testcase classname="tests.yan.GeneralJavaTest" name="null2" time="0.474" />

      <testcase classname="tests.yan.GeneralJavaTest" name="staticVariables1" time="0.523" />

      <testcase classname="tests.yan.GeneralJavaTest" name="outerClass1" time="0.334">
          <failure message=" FP:[a]" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError:  FP:[a]
	at benchmark.internal.Evaluator.evaluateAlias(Evaluator.java:79)
	at tests.yan.YanExecutor.evaluate(YanExecutor.java:37)
	at benchmark.internal.Test$1.internalTransform(Test.java:45)
	at soot.SceneTransformer.transform(SceneTransformer.java:39)
	at soot.Transform.apply(Transform.java:90)
	at soot.ScenePack.internalApply(ScenePack.java:40)
	at soot.Pack.apply(Pack.java:116)
	at benchmark.internal.Test.getQueryForTest(Test.java:57)
	at benchmark.internal.Test.&lt;init&gt;(Test.java:30)
	at tests.yan.YanExecutor.&lt;init&gt;(YanExecutor.java:31)
	at tests.yan.GeneralJavaTest.outerClass1(GeneralJavaTest.java:31)
</failure>

      </testcase>

      <testcase classname="tests.yan.GeneralJavaTest" name="superClass1" time="3.009">
          <failure message=" FP:[a]" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError:  FP:[a]
	at benchmark.internal.Evaluator.evaluateAlias(Evaluator.java:79)
	at tests.yan.YanExecutor.evaluate(YanExecutor.java:37)
	at benchmark.internal.Test$1.internalTransform(Test.java:45)
	at soot.SceneTransformer.transform(SceneTransformer.java:39)
	at soot.Transform.apply(Transform.java:90)
	at soot.ScenePack.internalApply(ScenePack.java:40)
	at soot.Pack.apply(Pack.java:116)
	at benchmark.internal.Test.getQueryForTest(Test.java:57)
	at benchmark.internal.Test.&lt;init&gt;(Test.java:30)
	at tests.yan.YanExecutor.&lt;init&gt;(YanExecutor.java:31)
	at tests.yan.GeneralJavaTest.superClass1(GeneralJavaTest.java:40)
</failure>

      </testcase>

      <system-out><![CDATA[Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.2 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.0 seconds.
[Spark] Solution found in 0.0 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("c", "{allocId:1, mayAlias:[c,b], notMayAlias:[a,g,h], mustAlias:[c,b], notMustAlias:[a,g,h]}") for variable c
	Allocation site $r1 = new benchmark.objects.A -> alias: [c, b], not alias: [g, a, h]

[PARAMETER] SPA_BUDGET_NODES: 75000, SUMM_RATIO: 3, TIME_BUDGET: 2
THRESHOLD: 6
[DEBUG] average number of incoming CG edges: 2
THRESHOLD: 6
[DEBUG] average number of incoming CG edges: 2
[summary.pass] <benchmark.objects.A: void <init>()>
[summary.pass] <benchmark.objects.A: void <init>()>
[summary.pass] <benchmark.objects.A: void <init>()>
[summary.pass] <benchmark.objects.H: benchmark.objects.A foo(benchmark.objects.A)>
[summary.pass] <benchmark.objects.H: benchmark.objects.A foo(benchmark.objects.A)>
[summary.pass] <benchmark.objects.H: benchmark.objects.A foo(benchmark.objects.A)>
[summary.pass] <benchmark.objects.H: benchmark.objects.A foo(benchmark.objects.A)>
THRESHOLD: 6
[DEBUG] average number of incoming CG edges: 2
THRESHOLD: 6
[DEBUG] average number of incoming CG edges: 2
THRESHOLD: 6
[DEBUG] average number of incoming CG edges: 2
=========RESULTS FOR  generalJava.Interface1========
GT:2,[c, b]
FN:0,[]
FP:0,[]
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.0 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.4 seconds.
[Spark] Solution found in 0.4 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b", "{allocId:1, mayAlias:[a,b], notMayAlias:[], mustAlias:[a,b], notMustAlias:[]}") for variable b
	Allocation site $r0 = new benchmark.objects.A -> alias: [a, b], not alias: []

THRESHOLD: 9
[DEBUG] average number of incoming CG edges: 3
THRESHOLD: 9
[DEBUG] average number of incoming CG edges: 3
=========RESULTS FOR  generalJava.Exception1========
GT:2,[a, b]
FN:0,[]
FP:0,[]
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.0 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.0 seconds.
[Spark] Solution found in 0.0 seconds.
Query at stmt null for variable null
	Allocation site $r1 = new benchmark.objects.A -> alias: [], not alias: []

Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.0 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.0 seconds.
[Spark] Solution found in 0.0 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b", "{NULLALLOC, mayAlias:[], notMayAlias:[b,a], mustAlias:[b,a], notMustAlias:[i]}") for variable b
	Allocation site null -> alias: [], not alias: [a, b]

THRESHOLD: 0
[DEBUG] average number of incoming CG edges: 0
THRESHOLD: 0
[DEBUG] average number of incoming CG edges: 0
=========RESULTS FOR  generalJava.Null1========
GT:0,[]
FN:0,[]
FP:1,[b]
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.0 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.0 seconds.
[Spark] Solution found in 0.0 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("x", "{NULLALLOC, mayAlias:[], notMayAlias:[b,a], mustAlias:[b,a], notMustAlias:[i]}") for variable x
	Allocation site null -> alias: [], not alias: [a, b]

THRESHOLD: 0
[DEBUG] average number of incoming CG edges: 0
THRESHOLD: 0
[DEBUG] average number of incoming CG edges: 0
=========RESULTS FOR  generalJava.Null2========
GT:0,[]
FN:0,[]
FP:0,[]
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.0 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.0 seconds.
[Spark] Solution found in 0.0 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("b", "{allocId:1, mayAlias:[b,a], notMayAlias:[], mustAlias:[b,a], notMustAlias:[]}") for variable b
	Allocation site $r0 = new benchmark.objects.A -> alias: [b], not alias: []

THRESHOLD: 0
[DEBUG] average number of incoming CG edges: 0
=========RESULTS FOR  generalJava.StaticVariables1========
GT:1,[b]
FN:0,[]
FP:0,[]
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.0 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.0 seconds.
[Spark] Solution found in 0.0 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("h", "{allocId:1, mayAlias:[b,b], notMayAlias:[i,a], mustAlias:[b,a], notMustAlias:[i]}") for variable h
	Allocation site $r0 = new benchmark.objects.A -> alias: [b], not alias: [a, i]

THRESHOLD: 0
[DEBUG] average number of incoming CG edges: 0
[summary.pass] <generalJava.OuterClass1$InnerClass: void alias(benchmark.objects.A)>
[summary.pass] <generalJava.OuterClass1$InnerClass: void <init>(generalJava.OuterClass1,benchmark.objects.A)>
[summary.pass] <generalJava.OuterClass1$InnerClass: void alias(benchmark.objects.A)>
[summary.pass] <generalJava.OuterClass1$InnerClass: benchmark.objects.A access$000(generalJava.OuterClass1$InnerClass)>
THRESHOLD: 0
[DEBUG] average number of incoming CG edges: 0
[summary.pass] <generalJava.OuterClass1$InnerClass: void <init>(generalJava.OuterClass1,benchmark.objects.A)>
[summary.pass] <generalJava.OuterClass1$InnerClass: void <init>(generalJava.OuterClass1,benchmark.objects.A)>
[summary.pass] <generalJava.OuterClass1$InnerClass: void <init>(generalJava.OuterClass1,benchmark.objects.A)>
[summary.pass] <generalJava.OuterClass1$InnerClass: void <init>(generalJava.OuterClass1,benchmark.objects.A)>
[summary.pass] <generalJava.OuterClass1$InnerClass: void alias(benchmark.objects.A)>
[summary.pass] <generalJava.OuterClass1$InnerClass: benchmark.objects.A access$000(generalJava.OuterClass1$InnerClass)>
THRESHOLD: 0
[DEBUG] average number of incoming CG edges: 0
=========RESULTS FOR  generalJava.OuterClass1========
GT:1,[b]
FN:0,[]
FP:1,[a]
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.0 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.0 seconds.
[Spark] Solution found in 0.0 seconds.
Query at stmt staticinvoke <benchmark.internal.Benchmark: void test(java.lang.String,java.lang.String)>("h", "{allocId:1, mayAlias:[b], notMayAlias:[a,p], mustAlias:[b,a], notMustAlias:[p]}") for variable h
	Allocation site $r0 = new benchmark.objects.A -> alias: [b], not alias: [p, a]

THRESHOLD: 0
[DEBUG] average number of incoming CG edges: 0
[summary.pass] <benchmark.objects.Q: void alias(benchmark.objects.A)>
[summary.pass] <benchmark.objects.Q: benchmark.objects.A getA()>
THRESHOLD: 0
[DEBUG] average number of incoming CG edges: 0
THRESHOLD: 0
[DEBUG] average number of incoming CG edges: 0
[summary.fail] <benchmark.objects.P: void <init>(benchmark.objects.A)>
=========RESULTS FOR  generalJava.SuperClass1========
GT:1,[b]
FN:0,[]
FP:1,[a]
]]></system-out>

      <system-err><![CDATA[]]></system-err>

  </testsuite>
</testsuites>
